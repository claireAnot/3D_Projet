/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include "core_cm4.h"   // pour DWT->CYCCNT
#include <stdint.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
}

// ----------- Déclaration du buffer DMX (start code + 512 canaux) -----------
uint8_t dmxData[513];

// ----------- Prototypes des fonctions auxiliaires DMX que l’on va définir -----------
static void DWT_Delay_Init(void);
static void DWT_Delay_us(uint32_t us);
static void DMX_SendBreak_MAB(void);
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_UART5_Init();
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();

  dmxData[0] = 0x00;
  for (uint16_t i = 1; i <= 512; i++) {
      // Ex. : on remplit chaque canal avec (i mod 256). Tu peux adapter.
      dmxData[i] = (uint8_t)i;
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // === 1) Générer le Break (ligne TX = 0 pendant ≥88µs) et le MAB (TX = 1 ≥8µs) ===
      DMX_SendBreak_MAB();

      // === 2) Ré-initialiser UART5 (PC12 redevient AF8 TX) ===
      MX_UART5_Init();

      // === 3) Envoyer la trame DMX (513 octets) ===
      //     - dmxData[0] = start code
      //     - dmxData[1..512] = valeurs des canaux
      HAL_UART_Transmit(&huart5, dmxData, 513, HAL_MAX_DELAY);

      // === 4) Attendre ~22 ms avant la prochaine trame (≈45 Hz) ===
      HAL_Delay(22);


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
// ─────────────── Fonctions auxiliaires DMX ───────────────

/**
  * @brief  Active le compteur DWT->CYCCNT pour faire des délais en µs.
  * @note   Appeler cette fonction une seule fois après HAL_Init() / SystemClock_Config().
  */
static void DWT_Delay_Init(void)
{
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // autoriser DWT
    DWT->CTRL    |= DWT_CTRL_CYCCNTENA_Msk;         // activer le compteur de cycles
}

/**
  * @brief  Pause en microsecondes (bloquant) en utilisant DWT->CYCCNT.
  * @param  us : nombre de microsecondes à attendre
  * @note   SystemCoreClock doit être correct (fréquence CPU). Sur Nucleo L476RG,
  *         c’est typiquement 80 MHz ou 48 MHz selon ta config CubeMX.
  */
static void DWT_Delay_us(uint32_t us)
{
    uint32_t start = DWT->CYCCNT;
    // Calcul du nombre de cycles à attendre = (FCPU en Hz / 1e6) * us
    uint32_t cycles = (SystemCoreClock / 1000000UL) * us;
    while ((DWT->CYCCNT - start) < cycles) {
        // on boucle jusqu’à atteindre le nombre de cycles voulus
    }
}

/**
  * @brief  Génère un signal DMX 'Break' (≥88µs à 0) puis 'Mark After Break' (≥8µs à 1)
  *         sur la broche PC12 (USART5_TX). Pour cela, on :
  *         1) Désactive l’UART5 (HAL_UART_DeInit),
  *         2) Reconfigure PC12 en GPIO output push-pull,
  *            le met à 0 (Break) et attend >=88µs,
  *            puis le met à 1 (MAB) >=8µs,
  *         3) Re-désactive la config GPIO pour que, lorsqu’on rappellera MX_UART5_Init(),
  *            PC12 repasse en AF8 (USART5_TX).
  */
static void DMX_SendBreak_MAB(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // 1) Désactiver UART5 : PC12 repasse en état "flottant" (reset)
    HAL_UART_DeInit(&huart5);

    // 2) Configurer PC12 en GPIO output push-pull pour forcer la ligne à 0/1
    __HAL_RCC_GPIOC_CLK_ENABLE();
    GPIO_InitStruct.Pin   = GPIO_PIN_12;
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    // 3) Break : PC12 = 0 pendant ≥88µs
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
    DWT_Delay_us(100);    // 100µs pour rester confortablement > 88µs

    // 4) Mark After Break : PC12 = 1 pendant ≥8µs
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
    DWT_Delay_us(12);     // 12µs pour rester > 8µs

    // 5) Déconfigurer PC12 en GPIO pour que, lors du prochain MX_UART5_Init(),
    //    CubeMX reconfigure la pin en AF8 (USART5_TX).
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
