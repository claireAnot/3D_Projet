
test_artnet_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000847c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800860c  0800860c  0000960c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cb4  08008cb4  0000a0d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008cb4  08008cb4  00009cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cbc  08008cbc  0000a0d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cbc  08008cbc  00009cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008cc0  08008cc0  00009cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08008cc4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200000d0  08008d94  0000a0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08008d94  0000a38c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115fa  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030bd  00000000  00000000  0001b6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0001e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc3  00000000  00000000  0001f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286a0  00000000  00000000  000202e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014042  00000000  00000000  00048983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f00e5  00000000  00000000  0005c9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014caaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004534  00000000  00000000  0014caf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00151024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085f4 	.word	0x080085f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	080085f4 	.word	0x080085f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005dc:	4812      	ldr	r0, [pc, #72]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005de:	f004 fb55 	bl	8004c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005fa:	f004 f99d 	bl	8004938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4804      	ldr	r0, [pc, #16]	@ (8000628 <MX_GPIO_Init+0xc8>)
 8000618:	f004 f98e 	bl	8004938 <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	@ 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <__io_putchar+0x20>)
 800063e:	f006 fa29 	bl	8006a94 <HAL_UART_Transmit>

	return chr;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000154 	.word	0x20000154

08000650 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000656:	f003 ffe9 	bl	800462c <HAL_Init>

	/* USER CODE BEGIN Init */
	setbuf(stdout, NULL);
 800065a:	4b34      	ldr	r3, [pc, #208]	@ (800072c <main+0xdc>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 f8a6 	bl	80077b4 <setbuf>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000668:	f000 f880 	bl	800076c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800066c:	f7ff ff78 	bl	8000560 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000670:	f000 fa5c 	bl	8000b2c <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000674:	f000 f8d2 	bl	800081c <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_SPI_Transmit(&hspi1, spi_tx_buffer, 1, 1000); // Initialize transmission
 8000678:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067c:	2201      	movs	r2, #1
 800067e:	492c      	ldr	r1, [pc, #176]	@ (8000730 <main+0xe0>)
 8000680:	482c      	ldr	r0, [pc, #176]	@ (8000734 <main+0xe4>)
 8000682:	f005 fede 	bl	8006442 <HAL_SPI_Transmit>
	HAL_Delay(100);
 8000686:	2064      	movs	r0, #100	@ 0x64
 8000688:	f004 f84c 	bl	8004724 <HAL_Delay>

	printf("---------- AVANT w5500_init ----------\r\n");
 800068c:	482a      	ldr	r0, [pc, #168]	@ (8000738 <main+0xe8>)
 800068e:	f007 f889 	bl	80077a4 <puts>
	w5500_init(&net_info);
 8000692:	482a      	ldr	r0, [pc, #168]	@ (800073c <main+0xec>)
 8000694:	f003 f99a 	bl	80039cc <w5500_init>
	printf("---------- APRES w5500_init ----------\r\n");
 8000698:	4829      	ldr	r0, [pc, #164]	@ (8000740 <main+0xf0>)
 800069a:	f007 f883 	bl	80077a4 <puts>

	wizchip_setnetinfo(&net_info);
 800069e:	4827      	ldr	r0, [pc, #156]	@ (800073c <main+0xec>)
 80006a0:	f003 feae 	bl	8004400 <wizchip_setnetinfo>

	wiz_NetInfo check;
	wizchip_getnetinfo(&check);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 feea 	bl	8004480 <wizchip_getnetinfo>
	printf("IP configuree : %d.%d.%d.%d\r\n", check.ip[0], check.ip[1], check.ip[2], check.ip[3]);
 80006ac:	7abb      	ldrb	r3, [r7, #10]
 80006ae:	4619      	mov	r1, r3
 80006b0:	7afb      	ldrb	r3, [r7, #11]
 80006b2:	461a      	mov	r2, r3
 80006b4:	7b3b      	ldrb	r3, [r7, #12]
 80006b6:	4618      	mov	r0, r3
 80006b8:	7b7b      	ldrb	r3, [r7, #13]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4603      	mov	r3, r0
 80006be:	4821      	ldr	r0, [pc, #132]	@ (8000744 <main+0xf4>)
 80006c0:	f007 f808 	bl	80076d4 <iprintf>

	printf("---------- AVANT dynamic_host_configuration ----------\r\n");
 80006c4:	4820      	ldr	r0, [pc, #128]	@ (8000748 <main+0xf8>)
 80006c6:	f007 f86d 	bl	80077a4 <puts>
	dynamic_host_configuration(net_info.mac);
 80006ca:	481c      	ldr	r0, [pc, #112]	@ (800073c <main+0xec>)
 80006cc:	f002 fec6 	bl	800345c <dynamic_host_configuration>
	printf("---------- APRES dynamic_host_configuration ----------\r\n");
 80006d0:	481e      	ldr	r0, [pc, #120]	@ (800074c <main+0xfc>)
 80006d2:	f007 f867 	bl	80077a4 <puts>

	printf("---------- AVANT check_cable_presence ----------\r\n");
 80006d6:	481e      	ldr	r0, [pc, #120]	@ (8000750 <main+0x100>)
 80006d8:	f007 f864 	bl	80077a4 <puts>
	check_cable_presence();
 80006dc:	f002 ff8e 	bl	80035fc <check_cable_presence>
	printf("---------- APRES check_cable_presence ----------\r\n");
 80006e0:	481c      	ldr	r0, [pc, #112]	@ (8000754 <main+0x104>)
 80006e2:	f007 f85f 	bl	80077a4 <puts>

	printf("---------- AVANT check_phy_status ----------\r\n");
 80006e6:	481c      	ldr	r0, [pc, #112]	@ (8000758 <main+0x108>)
 80006e8:	f007 f85c 	bl	80077a4 <puts>
	check_phy_status();
 80006ec:	f002 ffbc 	bl	8003668 <check_phy_status>
	printf("---------- APRES check_phy_status ----------\r\n");
 80006f0:	481a      	ldr	r0, [pc, #104]	@ (800075c <main+0x10c>)
 80006f2:	f007 f857 	bl	80077a4 <puts>

	printf("---------- AVANT print_current_host_configuration ----------\r\n");
 80006f6:	481a      	ldr	r0, [pc, #104]	@ (8000760 <main+0x110>)
 80006f8:	f007 f854 	bl	80077a4 <puts>
	print_current_host_configuration();
 80006fc:	f003 f854 	bl	80037a8 <print_current_host_configuration>
	printf("---------- APRES print_current_host_configuration ----------\r\n");
 8000700:	4818      	ldr	r0, [pc, #96]	@ (8000764 <main+0x114>)
 8000702:	f007 f84f 	bl	80077a4 <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		for (int i = 0; i < 100; i++)
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	e00a      	b.n	8000722 <main+0xd2>
		{
			printf("%i: Hello World!\r\n", i);
 800070c:	69f9      	ldr	r1, [r7, #28]
 800070e:	4816      	ldr	r0, [pc, #88]	@ (8000768 <main+0x118>)
 8000710:	f006 ffe0 	bl	80076d4 <iprintf>
			HAL_Delay(1500);
 8000714:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000718:	f004 f804 	bl	8004724 <HAL_Delay>
		for (int i = 0; i < 100; i++)
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3301      	adds	r3, #1
 8000720:	61fb      	str	r3, [r7, #28]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2b63      	cmp	r3, #99	@ 0x63
 8000726:	ddf1      	ble.n	800070c <main+0xbc>
 8000728:	e7ed      	b.n	8000706 <main+0xb6>
 800072a:	bf00      	nop
 800072c:	20000080 	.word	0x20000080
 8000730:	20000018 	.word	0x20000018
 8000734:	200000ec 	.word	0x200000ec
 8000738:	08008624 	.word	0x08008624
 800073c:	20000000 	.word	0x20000000
 8000740:	0800864c 	.word	0x0800864c
 8000744:	08008674 	.word	0x08008674
 8000748:	08008694 	.word	0x08008694
 800074c:	080086cc 	.word	0x080086cc
 8000750:	08008704 	.word	0x08008704
 8000754:	08008738 	.word	0x08008738
 8000758:	0800876c 	.word	0x0800876c
 800075c:	0800879c 	.word	0x0800879c
 8000760:	080087cc 	.word	0x080087cc
 8000764:	0800880c 	.word	0x0800880c
 8000768:	0800884c 	.word	0x0800884c

0800076c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b096      	sub	sp, #88	@ 0x58
 8000770:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2244      	movs	r2, #68	@ 0x44
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f007 f9ae 	bl	8007adc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800078e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000792:	f004 faa1 	bl	8004cd8 <HAL_PWREx_ControlVoltageScaling>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800079c:	f000 f837 	bl	800080e <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007aa:	2310      	movs	r3, #16
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b2:	2302      	movs	r3, #2
 80007b4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80007ba:	230a      	movs	r3, #10
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007be:	2307      	movs	r3, #7
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 fad8 	bl	8004d84 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x72>
	{
		Error_Handler();
 80007da:	f000 f818 	bl	800080e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2303      	movs	r3, #3
 80007e4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	2104      	movs	r1, #4
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fea0 	bl	800553c <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000802:	f000 f804 	bl	800080e <Error_Handler>
	}
}
 8000806:	bf00      	nop
 8000808:	3758      	adds	r7, #88	@ 0x58
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000812:	b672      	cpsid	i
}
 8000814:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000816:	bf00      	nop
 8000818:	e7fd      	b.n	8000816 <Error_Handler+0x8>
	...

0800081c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_SPI1_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	@ (8000894 <MX_SPI1_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_SPI1_Init+0x74>)
 8000828:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800082c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_SPI1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_SPI1_Init+0x74>)
 8000836:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800083a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_SPI1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_SPI1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000848:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_SPI1_Init+0x74>)
 800084a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800084e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_SPI1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_SPI1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_SPI1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_SPI1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_SPI1_Init+0x74>)
 800086a:	2207      	movs	r2, #7
 800086c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_SPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_SPI1_Init+0x74>)
 8000876:	2208      	movs	r2, #8
 8000878:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_SPI1_Init+0x74>)
 800087c:	f005 fd3e 	bl	80062fc <HAL_SPI_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000886:	f7ff ffc2 	bl	800080e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000ec 	.word	0x200000ec
 8000894:	40013000 	.word	0x40013000

08000898 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <HAL_SPI_MspInit+0x7c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d128      	bne.n	800090c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <HAL_SPI_MspInit+0x80>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008be:	4a16      	ldr	r2, [pc, #88]	@ (8000918 <HAL_SPI_MspInit+0x80>)
 80008c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <HAL_SPI_MspInit+0x80>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <HAL_SPI_MspInit+0x80>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	4a10      	ldr	r2, [pc, #64]	@ (8000918 <HAL_SPI_MspInit+0x80>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <HAL_SPI_MspInit+0x80>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008ea:	23f0      	movs	r3, #240	@ 0xf0
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008fa:	2305      	movs	r3, #5
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000908:	f004 f816 	bl	8004938 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40013000 	.word	0x40013000
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000926:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6613      	str	r3, [r2, #96]	@ 0x60
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <HAL_MspInit+0x44>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000944:	6593      	str	r3, [r2, #88]	@ 0x58
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <NMI_Handler+0x4>

0800096c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <MemManage_Handler+0x4>

0800097c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <UsageFault_Handler+0x4>

0800098c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ba:	f003 fe93 	bl	80046e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e00a      	b.n	80009ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d4:	f3af 8000 	nop.w
 80009d8:	4601      	mov	r1, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	60ba      	str	r2, [r7, #8]
 80009e0:	b2ca      	uxtb	r2, r1
 80009e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3301      	adds	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dbf0      	blt.n	80009d4 <_read+0x12>
  }

  return len;
 80009f2:	687b      	ldr	r3, [r7, #4]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e009      	b.n	8000a22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	60ba      	str	r2, [r7, #8]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe08 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dbf1      	blt.n	8000a0e <_write+0x12>
  }
  return len;
 8000a2a:	687b      	ldr	r3, [r7, #4]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_close>:

int _close(int file)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_isatty>:

int _isatty(int file)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f007 f854 	bl	8007b78 <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20018000 	.word	0x20018000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	20000150 	.word	0x20000150
 8000b04:	20000390 	.word	0x20000390

08000b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b32:	4a15      	ldr	r2, [pc, #84]	@ (8000b88 <MX_USART2_UART_Init+0x5c>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b70:	f005 ff42 	bl	80069f8 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b7a:	f7ff fe48 	bl	800080e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000154 	.word	0x20000154
 8000b88:	40004400 	.word	0x40004400

08000b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2288      	movs	r2, #136	@ 0x88
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f006 ff95 	bl	8007adc <memset>
  if(uartHandle->Instance==USART2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <HAL_UART_MspInit+0xb0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d13b      	bne.n	8000c34 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 fedb 	bl	8005984 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd4:	f7ff fe1b 	bl	800080e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bdc:	4a18      	ldr	r2, [pc, #96]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c20:	2307      	movs	r3, #7
 8000c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f003 fe82 	bl	8004938 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c34:	bf00      	nop
 8000c36:	37b0      	adds	r7, #176	@ 0xb0
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40021000 	.word	0x40021000

08000c44 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <WIZCHIP_READ+0x24>
 8000c60:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d114      	bne.n	8000c92 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	0c12      	lsrs	r2, r2, #16
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	4610      	mov	r0, r2
 8000c74:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	0a12      	lsrs	r2, r2, #8
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	4610      	mov	r0, r2
 8000c82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000c84:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	4798      	blx	r3
 8000c90:	e011      	b.n	8000cb6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	0c1b      	lsrs	r3, r3, #16
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cac:	f107 020c 	add.w	r2, r7, #12
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000cb6:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4798      	blx	r3
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <WIZCHIP_READ+0x94>)
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	4798      	blx	r3
   return ret;
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000040 	.word	0x20000040

08000cdc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000ce8:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <WIZCHIP_WRITE+0x98>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <WIZCHIP_WRITE+0x98>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <WIZCHIP_WRITE+0x98>)
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d119      	bne.n	8000d38 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <WIZCHIP_WRITE+0x98>)
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	0c12      	lsrs	r2, r2, #16
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <WIZCHIP_WRITE+0x98>)
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	0a12      	lsrs	r2, r2, #8
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <WIZCHIP_WRITE+0x98>)
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <WIZCHIP_WRITE+0x98>)
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	78fa      	ldrb	r2, [r7, #3]
 8000d32:	4610      	mov	r0, r2
 8000d34:	4798      	blx	r3
 8000d36:	e013      	b.n	8000d60 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	0c1b      	lsrs	r3, r3, #16
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	0a1b      	lsrs	r3, r3, #8
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <WIZCHIP_WRITE+0x98>)
 8000d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d56:	f107 020c 	add.w	r2, r7, #12
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <WIZCHIP_WRITE+0x98>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d66:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <WIZCHIP_WRITE+0x98>)
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	4798      	blx	r3
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000040 	.word	0x20000040

08000d78 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000d86:	4b2b      	ldr	r3, [pc, #172]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000d8c:	4b29      	ldr	r3, [pc, #164]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000d92:	4b28      	ldr	r3, [pc, #160]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <WIZCHIP_READ_BUF+0x2a>
 8000d9a:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d126      	bne.n	8000df0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000da2:	4b24      	ldr	r3, [pc, #144]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	0c12      	lsrs	r2, r2, #16
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	4610      	mov	r0, r2
 8000dae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000db0:	4b20      	ldr	r3, [pc, #128]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	0a12      	lsrs	r2, r2, #8
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	4610      	mov	r0, r2
 8000dbc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	82fb      	strh	r3, [r7, #22]
 8000dce:	e00a      	b.n	8000de6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000dd0:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	8afa      	ldrh	r2, [r7, #22]
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	188c      	adds	r4, r1, r2
 8000dda:	4798      	blx	r3
 8000ddc:	4603      	mov	r3, r0
 8000dde:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000de0:	8afb      	ldrh	r3, [r7, #22]
 8000de2:	3301      	adds	r3, #1
 8000de4:	82fb      	strh	r3, [r7, #22]
 8000de6:	8afa      	ldrh	r2, [r7, #22]
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d3f0      	bcc.n	8000dd0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000dee:	e017      	b.n	8000e20 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	0c1b      	lsrs	r3, r3, #16
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000e06:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0a:	f107 0210 	add.w	r2, r7, #16
 8000e0e:	2103      	movs	r1, #3
 8000e10:	4610      	mov	r0, r2
 8000e12:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e18:	88fa      	ldrh	r2, [r7, #6]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000e20:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000e26:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <WIZCHIP_READ_BUF+0xbc>)
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	4798      	blx	r3
}
 8000e2c:	bf00      	nop
 8000e2e:	371c      	adds	r7, #28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	20000040 	.word	0x20000040

08000e38 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	4613      	mov	r3, r2
 8000e44:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000e46:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000e4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000e5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d126      	bne.n	8000eb0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	0c12      	lsrs	r2, r2, #16
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000e70:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	0a12      	lsrs	r2, r2, #8
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	4610      	mov	r0, r2
 8000e88:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	82fb      	strh	r3, [r7, #22]
 8000e8e:	e00a      	b.n	8000ea6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	8afa      	ldrh	r2, [r7, #22]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	440a      	add	r2, r1
 8000e9a:	7812      	ldrb	r2, [r2, #0]
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000ea0:	8afb      	ldrh	r3, [r7, #22]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	82fb      	strh	r3, [r7, #22]
 8000ea6:	8afa      	ldrh	r2, [r7, #22]
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3f0      	bcc.n	8000e90 <WIZCHIP_WRITE_BUF+0x58>
 8000eae:	e017      	b.n	8000ee0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eca:	f107 0210 	add.w	r2, r7, #16
 8000ece:	2103      	movs	r1, #3
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed8:	88fa      	ldrh	r2, [r7, #6]
 8000eda:	4611      	mov	r1, r2
 8000edc:	68b8      	ldr	r0, [r7, #8]
 8000ede:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000ee6:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	4798      	blx	r3
}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000040 	.word	0x20000040

08000ef8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	81fb      	strh	r3, [r7, #14]
 8000f06:	2300      	movs	r3, #0
 8000f08:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	3301      	adds	r3, #1
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe94 	bl	8000c44 <WIZCHIP_READ>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000f20:	89bb      	ldrh	r3, [r7, #12]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b29c      	uxth	r4, r3
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fe86 	bl	8000c44 <WIZCHIP_READ>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4423      	add	r3, r4
 8000f3c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000f3e:	89bb      	ldrh	r3, [r7, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d019      	beq.n	8000f78 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	3301      	adds	r3, #1
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fe77 	bl	8000c44 <WIZCHIP_READ>
 8000f56:	4603      	mov	r3, r0
 8000f58:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b29c      	uxth	r4, r3
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	3301      	adds	r3, #1
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fe69 	bl	8000c44 <WIZCHIP_READ>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4423      	add	r3, r4
 8000f76:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000f78:	89fa      	ldrh	r2, [r7, #14]
 8000f7a:	89bb      	ldrh	r3, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d1c4      	bne.n	8000f0a <getSn_TX_FSR+0x12>
   return val;
 8000f80:	89fb      	ldrh	r3, [r7, #14]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}

08000f8a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8000f8a:	b590      	push	{r4, r7, lr}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	81fb      	strh	r3, [r7, #14]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fe4b 	bl	8000c44 <WIZCHIP_READ>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000fb2:	89bb      	ldrh	r3, [r7, #12]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b29c      	uxth	r4, r3
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe3d 	bl	8000c44 <WIZCHIP_READ>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4423      	add	r3, r4
 8000fce:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000fd0:	89bb      	ldrh	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d019      	beq.n	800100a <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	3301      	adds	r3, #1
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fe2e 	bl	8000c44 <WIZCHIP_READ>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b29c      	uxth	r4, r3
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fe20 	bl	8000c44 <WIZCHIP_READ>
 8001004:	4603      	mov	r3, r0
 8001006:	4423      	add	r3, r4
 8001008:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800100a:	89fa      	ldrh	r2, [r7, #14]
 800100c:	89bb      	ldrh	r3, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	d1c4      	bne.n	8000f9c <getSn_RX_RSR+0x12>
   return val;
 8001012:	89fb      	ldrh	r3, [r7, #14]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}

0800101c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d046      	beq.n	80010c8 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	3301      	adds	r3, #1
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdfc 	bl	8000c44 <WIZCHIP_READ>
 800104c:	4603      	mov	r3, r0
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b29c      	uxth	r4, r3
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	3301      	adds	r3, #1
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fdf0 	bl	8000c44 <WIZCHIP_READ>
 8001064:	4603      	mov	r3, r0
 8001066:	4423      	add	r3, r4
 8001068:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800106a:	89fb      	ldrh	r3, [r7, #14]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	79fa      	ldrb	r2, [r7, #7]
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	3202      	adds	r2, #2
 8001074:	00d2      	lsls	r2, r2, #3
 8001076:	4413      	add	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800107a:	88bb      	ldrh	r3, [r7, #4]
 800107c:	461a      	mov	r2, r3
 800107e:	6839      	ldr	r1, [r7, #0]
 8001080:	68b8      	ldr	r0, [r7, #8]
 8001082:	f7ff fed9 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001086:	89fa      	ldrh	r2, [r7, #14]
 8001088:	88bb      	ldrh	r3, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	3301      	adds	r3, #1
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800109a:	461a      	mov	r2, r3
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	4610      	mov	r0, r2
 80010a8:	f7ff fe18 	bl	8000cdc <WIZCHIP_WRITE>
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	3301      	adds	r3, #1
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80010b8:	461a      	mov	r2, r3
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4619      	mov	r1, r3
 80010c0:	4610      	mov	r0, r2
 80010c2:	f7ff fe0b 	bl	8000cdc <WIZCHIP_WRITE>
 80010c6:	e000      	b.n	80010ca <wiz_send_data+0xae>
   if(len == 0)  return;
 80010c8:	bf00      	nop
}
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd90      	pop	{r4, r7, pc}

080010d0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80010e8:	88bb      	ldrh	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d046      	beq.n	800117c <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	3301      	adds	r3, #1
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fda2 	bl	8000c44 <WIZCHIP_READ>
 8001100:	4603      	mov	r3, r0
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b29c      	uxth	r4, r3
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	3301      	adds	r3, #1
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fd96 	bl	8000c44 <WIZCHIP_READ>
 8001118:	4603      	mov	r3, r0
 800111a:	4423      	add	r3, r4
 800111c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800111e:	89fb      	ldrh	r3, [r7, #14]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	3203      	adds	r2, #3
 8001128:	00d2      	lsls	r2, r2, #3
 800112a:	4413      	add	r3, r2
 800112c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800112e:	88bb      	ldrh	r3, [r7, #4]
 8001130:	461a      	mov	r2, r3
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	68b8      	ldr	r0, [r7, #8]
 8001136:	f7ff fe1f 	bl	8000d78 <WIZCHIP_READ_BUF>
   ptr += len;
 800113a:	89fa      	ldrh	r2, [r7, #14]
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	3301      	adds	r3, #1
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800114e:	461a      	mov	r2, r3
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4619      	mov	r1, r3
 800115a:	4610      	mov	r0, r2
 800115c:	f7ff fdbe 	bl	8000cdc <WIZCHIP_WRITE>
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	3301      	adds	r3, #1
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800116c:	461a      	mov	r2, r3
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f7ff fdb1 	bl	8000cdc <WIZCHIP_WRITE>
 800117a:	e000      	b.n	800117e <wiz_recv_data+0xae>
   if(len == 0) return;
 800117c:	bf00      	nop
}
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bd90      	pop	{r4, r7, pc}

08001184 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	3301      	adds	r3, #1
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fd4d 	bl	8000c44 <WIZCHIP_READ>
 80011aa:	4603      	mov	r3, r0
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29c      	uxth	r4, r3
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	3301      	adds	r3, #1
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fd41 	bl	8000c44 <WIZCHIP_READ>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4423      	add	r3, r4
 80011c6:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80011c8:	89fa      	ldrh	r2, [r7, #14]
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	3301      	adds	r3, #1
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80011dc:	461a      	mov	r2, r3
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	4610      	mov	r0, r2
 80011ea:	f7ff fd77 	bl	8000cdc <WIZCHIP_WRITE>
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	3301      	adds	r3, #1
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80011fa:	461a      	mov	r2, r3
 80011fc:	89fb      	ldrh	r3, [r7, #14]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4619      	mov	r1, r3
 8001202:	4610      	mov	r0, r2
 8001204:	f7ff fd6a 	bl	8000cdc <WIZCHIP_WRITE>
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}

08001210 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8001214:	2204      	movs	r2, #4
 8001216:	4909      	ldr	r1, [pc, #36]	@ (800123c <default_ip_assign+0x2c>)
 8001218:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800121c:	f7ff fe0c 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8001220:	2204      	movs	r2, #4
 8001222:	4907      	ldr	r1, [pc, #28]	@ (8001240 <default_ip_assign+0x30>)
 8001224:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001228:	f7ff fe06 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 800122c:	2204      	movs	r2, #4
 800122e:	4905      	ldr	r1, [pc, #20]	@ (8001244 <default_ip_assign+0x34>)
 8001230:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001234:	f7ff fe00 	bl	8000e38 <WIZCHIP_WRITE_BUF>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001ec 	.word	0x200001ec
 8001240:	200001f4 	.word	0x200001f4
 8001244:	200001f0 	.word	0x200001f0

08001248 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 800124c:	2180      	movs	r1, #128	@ 0x80
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff fd44 	bl	8000cdc <WIZCHIP_WRITE>
   getMR(); // for delay
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fcf5 	bl	8000c44 <WIZCHIP_READ>
   default_ip_assign();
 800125a:	f7ff ffd9 	bl	8001210 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 800125e:	2206      	movs	r2, #6
 8001260:	4903      	ldr	r1, [pc, #12]	@ (8001270 <default_ip_update+0x28>)
 8001262:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001266:	f7ff fde7 	bl	8000e38 <WIZCHIP_WRITE_BUF>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000020c 	.word	0x2000020c

08001274 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8001278:	2180      	movs	r1, #128	@ 0x80
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fd2e 	bl	8000cdc <WIZCHIP_WRITE>
	getMR(); // for delay
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fcdf 	bl	8000c44 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8001286:	2206      	movs	r2, #6
 8001288:	4903      	ldr	r1, [pc, #12]	@ (8001298 <default_ip_conflict+0x24>)
 800128a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800128e:	f7ff fdd3 	bl	8000e38 <WIZCHIP_WRITE_BUF>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000020c 	.word	0x2000020c

0800129c <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 80012a8:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <reg_dhcp_cbfunc+0x50>)
 80012aa:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <reg_dhcp_cbfunc+0x54>)
 80012ac:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <reg_dhcp_cbfunc+0x58>)
 80012b0:	4a11      	ldr	r2, [pc, #68]	@ (80012f8 <reg_dhcp_cbfunc+0x5c>)
 80012b2:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <reg_dhcp_cbfunc+0x60>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <reg_dhcp_cbfunc+0x64>)
 80012b8:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <reg_dhcp_cbfunc+0x2a>
 80012c0:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <reg_dhcp_cbfunc+0x50>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <reg_dhcp_cbfunc+0x36>
 80012cc:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <reg_dhcp_cbfunc+0x58>)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <reg_dhcp_cbfunc+0x42>
 80012d8:	4a08      	ldr	r2, [pc, #32]	@ (80012fc <reg_dhcp_cbfunc+0x60>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000030 	.word	0x20000030
 80012f0:	08001211 	.word	0x08001211
 80012f4:	20000034 	.word	0x20000034
 80012f8:	08001249 	.word	0x08001249
 80012fc:	20000038 	.word	0x20000038
 8001300:	08001275 	.word	0x08001275

08001304 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800130a:	463b      	mov	r3, r7
 800130c:	2206      	movs	r2, #6
 800130e:	4619      	mov	r1, r3
 8001310:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001314:	f7ff fd30 	bl	8000d78 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001318:	4b72      	ldr	r3, [pc, #456]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001320:	4b70      	ldr	r3, [pc, #448]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2201      	movs	r2, #1
 8001326:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001328:	4b6e      	ldr	r3, [pc, #440]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2206      	movs	r2, #6
 800132e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001330:	4b6c      	ldr	r3, [pc, #432]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2200      	movs	r2, #0
 8001336:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001338:	4b6a      	ldr	r3, [pc, #424]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3304      	adds	r3, #4
 800133e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001340:	4b69      	ldr	r3, [pc, #420]	@ (80014e8 <makeDHCPMSG+0x1e4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0e1b      	lsrs	r3, r3, #24
 8001346:	b2da      	uxtb	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 800134c:	4b66      	ldr	r3, [pc, #408]	@ (80014e8 <makeDHCPMSG+0x1e4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	0c1a      	lsrs	r2, r3, #16
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	3301      	adds	r3, #1
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 800135a:	4b63      	ldr	r3, [pc, #396]	@ (80014e8 <makeDHCPMSG+0x1e4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	0a1a      	lsrs	r2, r3, #8
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	3302      	adds	r3, #2
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8001368:	4b5f      	ldr	r3, [pc, #380]	@ (80014e8 <makeDHCPMSG+0x1e4>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3303      	adds	r3, #3
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8001374:	4b5b      	ldr	r3, [pc, #364]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 800137c:	4b59      	ldr	r3, [pc, #356]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	330a      	adds	r3, #10
 8001382:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3301      	adds	r3, #1
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8001392:	4b54      	ldr	r3, [pc, #336]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 800139a:	4b52      	ldr	r3, [pc, #328]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 80013a2:	4b50      	ldr	r3, [pc, #320]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 80013aa:	4b4e      	ldr	r3, [pc, #312]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2200      	movs	r2, #0
 80013b0:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 80013b2:	4b4c      	ldr	r3, [pc, #304]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2200      	movs	r2, #0
 80013b8:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 80013ba:	4b4a      	ldr	r3, [pc, #296]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 80013c2:	4b48      	ldr	r3, [pc, #288]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 80013ca:	4b46      	ldr	r3, [pc, #280]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 80013d2:	4b44      	ldr	r3, [pc, #272]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80013da:	4b42      	ldr	r3, [pc, #264]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 80013e2:	4b40      	ldr	r3, [pc, #256]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 80013ea:	4b3e      	ldr	r3, [pc, #248]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 80013f2:	4b3c      	ldr	r3, [pc, #240]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 80013fa:	4b3a      	ldr	r3, [pc, #232]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8001402:	4b38      	ldr	r3, [pc, #224]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2200      	movs	r2, #0
 8001408:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800140a:	4b36      	ldr	r3, [pc, #216]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2200      	movs	r2, #0
 8001410:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001412:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a35      	ldr	r2, [pc, #212]	@ (80014ec <makeDHCPMSG+0x1e8>)
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800141c:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a32      	ldr	r2, [pc, #200]	@ (80014ec <makeDHCPMSG+0x1e8>)
 8001422:	7852      	ldrb	r2, [r2, #1]
 8001424:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8001426:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a30      	ldr	r2, [pc, #192]	@ (80014ec <makeDHCPMSG+0x1e8>)
 800142c:	7892      	ldrb	r2, [r2, #2]
 800142e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001430:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a2d      	ldr	r2, [pc, #180]	@ (80014ec <makeDHCPMSG+0x1e8>)
 8001436:	78d2      	ldrb	r2, [r2, #3]
 8001438:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800143a:	4b2a      	ldr	r3, [pc, #168]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a2b      	ldr	r2, [pc, #172]	@ (80014ec <makeDHCPMSG+0x1e8>)
 8001440:	7912      	ldrb	r2, [r2, #4]
 8001442:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8001446:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a28      	ldr	r2, [pc, #160]	@ (80014ec <makeDHCPMSG+0x1e8>)
 800144c:	7952      	ldrb	r2, [r2, #5]
 800144e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8001452:	2306      	movs	r3, #6
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	e008      	b.n	800146a <makeDHCPMSG+0x166>
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	4413      	add	r3, r2
 8001460:	2200      	movs	r2, #0
 8001462:	771a      	strb	r2, [r3, #28]
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d9f3      	bls.n	8001458 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e009      	b.n	800148a <makeDHCPMSG+0x186>
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	4413      	add	r3, r2
 800147e:	2200      	movs	r2, #0
 8001480:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	3301      	adds	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	2b3f      	cmp	r3, #63	@ 0x3f
 800148e:	d9f2      	bls.n	8001476 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e009      	b.n	80014aa <makeDHCPMSG+0x1a6>
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	4413      	add	r3, r2
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	3301      	adds	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	daf1      	bge.n	8001496 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2263      	movs	r2, #99	@ 0x63
 80014b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2282      	movs	r2, #130	@ 0x82
 80014c2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2253      	movs	r2, #83	@ 0x53
 80014cc:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <makeDHCPMSG+0x1e0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2263      	movs	r2, #99	@ 0x63
 80014d6:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000208 	.word	0x20000208
 80014e8:	20000204 	.word	0x20000204
 80014ec:	2000020c 	.word	0x2000020c

080014f0 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 80014fa:	f7ff ff03 	bl	8001304 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80014fe:	4b56      	ldr	r3, [pc, #344]	@ (8001658 <send_DHCP_DISCOVER+0x168>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8001504:	4b54      	ldr	r3, [pc, #336]	@ (8001658 <send_DHCP_DISCOVER+0x168>)
 8001506:	2200      	movs	r2, #0
 8001508:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800150a:	4b53      	ldr	r3, [pc, #332]	@ (8001658 <send_DHCP_DISCOVER+0x168>)
 800150c:	2200      	movs	r2, #0
 800150e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8001510:	4b51      	ldr	r3, [pc, #324]	@ (8001658 <send_DHCP_DISCOVER+0x168>)
 8001512:	2200      	movs	r2, #0
 8001514:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8001516:	4b51      	ldr	r3, [pc, #324]	@ (800165c <send_DHCP_DISCOVER+0x16c>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 800151c:	4b4f      	ldr	r3, [pc, #316]	@ (800165c <send_DHCP_DISCOVER+0x16c>)
 800151e:	2200      	movs	r2, #0
 8001520:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8001522:	4b4e      	ldr	r3, [pc, #312]	@ (800165c <send_DHCP_DISCOVER+0x16c>)
 8001524:	2200      	movs	r2, #0
 8001526:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8001528:	4b4c      	ldr	r3, [pc, #304]	@ (800165c <send_DHCP_DISCOVER+0x16c>)
 800152a:	2200      	movs	r2, #0
 800152c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800152e:	2304      	movs	r3, #4
 8001530:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001532:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	88bb      	ldrh	r3, [r7, #4]
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	80b9      	strh	r1, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	2235      	movs	r2, #53	@ 0x35
 8001540:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001544:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	88bb      	ldrh	r3, [r7, #4]
 800154a:	1c59      	adds	r1, r3, #1
 800154c:	80b9      	strh	r1, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	2201      	movs	r2, #1
 8001552:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8001556:	4b42      	ldr	r3, [pc, #264]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	88bb      	ldrh	r3, [r7, #4]
 800155c:	1c59      	adds	r1, r3, #1
 800155e:	80b9      	strh	r1, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	2201      	movs	r2, #1
 8001564:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001568:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	1c59      	adds	r1, r3, #1
 8001570:	80b9      	strh	r1, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	223d      	movs	r2, #61	@ 0x3d
 8001576:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800157a:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	88bb      	ldrh	r3, [r7, #4]
 8001580:	1c59      	adds	r1, r3, #1
 8001582:	80b9      	strh	r1, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	2207      	movs	r2, #7
 8001588:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800158c:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	1c59      	adds	r1, r3, #1
 8001594:	80b9      	strh	r1, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	2201      	movs	r2, #1
 800159a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800159e:	4b30      	ldr	r3, [pc, #192]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	88bb      	ldrh	r3, [r7, #4]
 80015a4:	1c59      	adds	r1, r3, #1
 80015a6:	80b9      	strh	r1, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <send_DHCP_DISCOVER+0x174>)
 80015ac:	7819      	ldrb	r1, [r3, #0]
 80015ae:	1813      	adds	r3, r2, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	1c59      	adds	r1, r3, #1
 80015be:	80b9      	strh	r1, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <send_DHCP_DISCOVER+0x174>)
 80015c4:	7859      	ldrb	r1, [r3, #1]
 80015c6:	1813      	adds	r3, r2, r0
 80015c8:	460a      	mov	r2, r1
 80015ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80015ce:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	1c59      	adds	r1, r3, #1
 80015d6:	80b9      	strh	r1, [r7, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <send_DHCP_DISCOVER+0x174>)
 80015dc:	7899      	ldrb	r1, [r3, #2]
 80015de:	1813      	adds	r3, r2, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80015e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	1c59      	adds	r1, r3, #1
 80015ee:	80b9      	strh	r1, [r7, #4]
 80015f0:	4618      	mov	r0, r3
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <send_DHCP_DISCOVER+0x174>)
 80015f4:	78d9      	ldrb	r1, [r3, #3]
 80015f6:	1813      	adds	r3, r2, r0
 80015f8:	460a      	mov	r2, r1
 80015fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	88bb      	ldrh	r3, [r7, #4]
 8001604:	1c59      	adds	r1, r3, #1
 8001606:	80b9      	strh	r1, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <send_DHCP_DISCOVER+0x174>)
 800160c:	7919      	ldrb	r1, [r3, #4]
 800160e:	1813      	adds	r3, r2, r0
 8001610:	460a      	mov	r2, r1
 8001612:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	88bb      	ldrh	r3, [r7, #4]
 800161c:	1c59      	adds	r1, r3, #1
 800161e:	80b9      	strh	r1, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <send_DHCP_DISCOVER+0x174>)
 8001624:	7959      	ldrb	r1, [r3, #5]
 8001626:	1813      	adds	r3, r2, r0
 8001628:	460a      	mov	r2, r1
 800162a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	88bb      	ldrh	r3, [r7, #4]
 8001634:	1c59      	adds	r1, r3, #1
 8001636:	80b9      	strh	r1, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	220c      	movs	r2, #12
 800163c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001640:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <send_DHCP_DISCOVER+0x170>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	88bb      	ldrh	r3, [r7, #4]
 8001646:	1c59      	adds	r1, r3, #1
 8001648:	80b9      	strh	r1, [r7, #4]
 800164a:	4413      	add	r3, r2
 800164c:	2200      	movs	r2, #0
 800164e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	e017      	b.n	8001688 <send_DHCP_DISCOVER+0x198>
 8001658:	200001e0 	.word	0x200001e0
 800165c:	200001e4 	.word	0x200001e4
 8001660:	20000208 	.word	0x20000208
 8001664:	2000020c 	.word	0x2000020c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001668:	88f9      	ldrh	r1, [r7, #6]
 800166a:	4b80      	ldr	r3, [pc, #512]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	1c58      	adds	r0, r3, #1
 8001672:	80b8      	strh	r0, [r7, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	4b7e      	ldr	r3, [pc, #504]	@ (8001870 <send_DHCP_DISCOVER+0x380>)
 8001678:	5c59      	ldrb	r1, [r3, r1]
 800167a:	1813      	adds	r3, r2, r0
 800167c:	460a      	mov	r2, r1
 800167e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	3301      	adds	r3, #1
 8001686:	80fb      	strh	r3, [r7, #6]
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	4a79      	ldr	r2, [pc, #484]	@ (8001870 <send_DHCP_DISCOVER+0x380>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ea      	bne.n	8001668 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4);
 8001692:	4b78      	ldr	r3, [pc, #480]	@ (8001874 <send_DHCP_DISCOVER+0x384>)
 8001694:	78db      	ldrb	r3, [r3, #3]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b74      	ldr	r3, [pc, #464]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 800169c:	681c      	ldr	r4, [r3, #0]
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	1c59      	adds	r1, r3, #1
 80016a2:	80b9      	strh	r1, [r7, #4]
 80016a4:	461d      	mov	r5, r3
 80016a6:	4610      	mov	r0, r2
 80016a8:	f001 f9c4 	bl	8002a34 <NibbleToHex>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	1963      	adds	r3, r4, r5
 80016b2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80016b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001874 <send_DHCP_DISCOVER+0x384>)
 80016b8:	78da      	ldrb	r2, [r3, #3]
 80016ba:	4b6c      	ldr	r3, [pc, #432]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 80016bc:	681c      	ldr	r4, [r3, #0]
 80016be:	88bb      	ldrh	r3, [r7, #4]
 80016c0:	1c59      	adds	r1, r3, #1
 80016c2:	80b9      	strh	r1, [r7, #4]
 80016c4:	461d      	mov	r5, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f001 f9b4 	bl	8002a34 <NibbleToHex>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	1963      	adds	r3, r4, r5
 80016d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4);
 80016d6:	4b67      	ldr	r3, [pc, #412]	@ (8001874 <send_DHCP_DISCOVER+0x384>)
 80016d8:	791b      	ldrb	r3, [r3, #4]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b63      	ldr	r3, [pc, #396]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 80016e0:	681c      	ldr	r4, [r3, #0]
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	1c59      	adds	r1, r3, #1
 80016e6:	80b9      	strh	r1, [r7, #4]
 80016e8:	461d      	mov	r5, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f001 f9a2 	bl	8002a34 <NibbleToHex>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	1963      	adds	r3, r4, r5
 80016f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80016fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001874 <send_DHCP_DISCOVER+0x384>)
 80016fc:	791a      	ldrb	r2, [r3, #4]
 80016fe:	4b5b      	ldr	r3, [pc, #364]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 8001700:	681c      	ldr	r4, [r3, #0]
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	1c59      	adds	r1, r3, #1
 8001706:	80b9      	strh	r1, [r7, #4]
 8001708:	461d      	mov	r5, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f001 f992 	bl	8002a34 <NibbleToHex>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	1963      	adds	r3, r4, r5
 8001716:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4);
 800171a:	4b56      	ldr	r3, [pc, #344]	@ (8001874 <send_DHCP_DISCOVER+0x384>)
 800171c:	795b      	ldrb	r3, [r3, #5]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b52      	ldr	r3, [pc, #328]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 8001724:	681c      	ldr	r4, [r3, #0]
 8001726:	88bb      	ldrh	r3, [r7, #4]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	80b9      	strh	r1, [r7, #4]
 800172c:	461d      	mov	r5, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f001 f980 	bl	8002a34 <NibbleToHex>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	1963      	adds	r3, r4, r5
 800173a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800173e:	4b4d      	ldr	r3, [pc, #308]	@ (8001874 <send_DHCP_DISCOVER+0x384>)
 8001740:	795a      	ldrb	r2, [r3, #5]
 8001742:	4b4a      	ldr	r3, [pc, #296]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 8001744:	681c      	ldr	r4, [r3, #0]
 8001746:	88bb      	ldrh	r3, [r7, #4]
 8001748:	1c59      	adds	r1, r3, #1
 800174a:	80b9      	strh	r1, [r7, #4]
 800174c:	461d      	mov	r5, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f001 f970 	bl	8002a34 <NibbleToHex>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	1963      	adds	r3, r4, r5
 800175a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	b2d9      	uxtb	r1, r3
 8001762:	4b42      	ldr	r3, [pc, #264]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	88b8      	ldrh	r0, [r7, #4]
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	3307      	adds	r3, #7
 800176c:	1ac3      	subs	r3, r0, r3
 800176e:	3106      	adds	r1, #6
 8001770:	b2c9      	uxtb	r1, r1
 8001772:	4413      	add	r3, r2
 8001774:	460a      	mov	r2, r1
 8001776:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800177a:	4b3c      	ldr	r3, [pc, #240]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	88bb      	ldrh	r3, [r7, #4]
 8001780:	1c59      	adds	r1, r3, #1
 8001782:	80b9      	strh	r1, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	2237      	movs	r2, #55	@ 0x37
 8001788:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 800178c:	4b37      	ldr	r3, [pc, #220]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	80b9      	strh	r1, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	2206      	movs	r2, #6
 800179a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800179e:	4b33      	ldr	r3, [pc, #204]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	1c59      	adds	r1, r3, #1
 80017a6:	80b9      	strh	r1, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80017b0:	4b2e      	ldr	r3, [pc, #184]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	88bb      	ldrh	r3, [r7, #4]
 80017b6:	1c59      	adds	r1, r3, #1
 80017b8:	80b9      	strh	r1, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 80017c2:	4b2a      	ldr	r3, [pc, #168]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	1c59      	adds	r1, r3, #1
 80017ca:	80b9      	strh	r1, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	2206      	movs	r2, #6
 80017d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80017d4:	4b25      	ldr	r3, [pc, #148]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	1c59      	adds	r1, r3, #1
 80017dc:	80b9      	strh	r1, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	220f      	movs	r2, #15
 80017e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80017e6:	4b21      	ldr	r3, [pc, #132]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	88bb      	ldrh	r3, [r7, #4]
 80017ec:	1c59      	adds	r1, r3, #1
 80017ee:	80b9      	strh	r1, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	223a      	movs	r2, #58	@ 0x3a
 80017f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80017f8:	4b1c      	ldr	r3, [pc, #112]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	1c59      	adds	r1, r3, #1
 8001800:	80b9      	strh	r1, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	223b      	movs	r2, #59	@ 0x3b
 8001806:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800180a:	4b18      	ldr	r3, [pc, #96]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	1c59      	adds	r1, r3, #1
 8001812:	80b9      	strh	r1, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	22ff      	movs	r2, #255	@ 0xff
 8001818:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800181c:	88bb      	ldrh	r3, [r7, #4]
 800181e:	80fb      	strh	r3, [r7, #6]
 8001820:	e009      	b.n	8001836 <send_DHCP_DISCOVER+0x346>
 8001822:	4b12      	ldr	r3, [pc, #72]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	4413      	add	r3, r2
 800182a:	2200      	movs	r2, #0
 800182c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	3301      	adds	r3, #1
 8001834:	80fb      	strh	r3, [r7, #6]
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800183c:	d3f1      	bcc.n	8001822 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 800183e:	23ff      	movs	r3, #255	@ 0xff
 8001840:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001842:	23ff      	movs	r3, #255	@ 0xff
 8001844:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8001846:	23ff      	movs	r3, #255	@ 0xff
 8001848:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800184a:	23ff      	movs	r3, #255	@ 0xff
 800184c:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <send_DHCP_DISCOVER+0x388>)
 8001850:	7818      	ldrb	r0, [r3, #0]
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <send_DHCP_DISCOVER+0x37c>)
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	463b      	mov	r3, r7
 8001858:	2243      	movs	r2, #67	@ 0x43
 800185a:	9200      	str	r2, [sp, #0]
 800185c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001860:	f001 fadc 	bl	8002e1c <sendto>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bdb0      	pop	{r4, r5, r7, pc}
 800186c:	20000208 	.word	0x20000208
 8001870:	20000028 	.word	0x20000028
 8001874:	2000020c 	.word	0x2000020c
 8001878:	200001dc 	.word	0x200001dc

0800187c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 800187c:	b5b0      	push	{r4, r5, r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001886:	f7ff fd3d 	bl	8001304 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <send_DHCP_REQUEST+0x7c>)
 800188c:	f993 3000 	ldrsb.w	r3, [r3]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d004      	beq.n	800189e <send_DHCP_REQUEST+0x22>
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <send_DHCP_REQUEST+0x7c>)
 8001896:	f993 3000 	ldrsb.w	r3, [r3]
 800189a:	2b04      	cmp	r3, #4
 800189c:	d134      	bne.n	8001908 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800189e:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <send_DHCP_REQUEST+0x80>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	330a      	adds	r3, #10
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <send_DHCP_REQUEST+0x80>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	330a      	adds	r3, #10
 80018ae:	3301      	adds	r3, #1
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <send_DHCP_REQUEST+0x80>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a11      	ldr	r2, [pc, #68]	@ (8001900 <send_DHCP_REQUEST+0x84>)
 80018ba:	7812      	ldrb	r2, [r2, #0]
 80018bc:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80018be:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <send_DHCP_REQUEST+0x80>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001900 <send_DHCP_REQUEST+0x84>)
 80018c4:	7852      	ldrb	r2, [r2, #1]
 80018c6:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <send_DHCP_REQUEST+0x80>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001900 <send_DHCP_REQUEST+0x84>)
 80018ce:	7892      	ldrb	r2, [r2, #2]
 80018d0:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <send_DHCP_REQUEST+0x80>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <send_DHCP_REQUEST+0x84>)
 80018d8:	78d2      	ldrb	r2, [r2, #3]
 80018da:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <send_DHCP_REQUEST+0x88>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <send_DHCP_REQUEST+0x88>)
 80018e4:	785b      	ldrb	r3, [r3, #1]
 80018e6:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <send_DHCP_REQUEST+0x88>)
 80018ea:	789b      	ldrb	r3, [r3, #2]
 80018ec:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80018ee:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <send_DHCP_REQUEST+0x88>)
 80018f0:	78db      	ldrb	r3, [r3, #3]
 80018f2:	71fb      	strb	r3, [r7, #7]
 80018f4:	e010      	b.n	8001918 <send_DHCP_REQUEST+0x9c>
 80018f6:	bf00      	nop
 80018f8:	200001fc 	.word	0x200001fc
 80018fc:	20000208 	.word	0x20000208
 8001900:	200001ec 	.word	0x200001ec
 8001904:	200001e0 	.word	0x200001e0
   }
   else
   {
   	ip[0] = 255;
 8001908:	23ff      	movs	r3, #255	@ 0xff
 800190a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 800190c:	23ff      	movs	r3, #255	@ 0xff
 800190e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001910:	23ff      	movs	r3, #255	@ 0xff
 8001912:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001914:	23ff      	movs	r3, #255	@ 0xff
 8001916:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001918:	2304      	movs	r3, #4
 800191a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800191c:	4b8d      	ldr	r3, [pc, #564]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	897b      	ldrh	r3, [r7, #10]
 8001922:	1c59      	adds	r1, r3, #1
 8001924:	8179      	strh	r1, [r7, #10]
 8001926:	4413      	add	r3, r2
 8001928:	2235      	movs	r2, #53	@ 0x35
 800192a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800192e:	4b89      	ldr	r3, [pc, #548]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	897b      	ldrh	r3, [r7, #10]
 8001934:	1c59      	adds	r1, r3, #1
 8001936:	8179      	strh	r1, [r7, #10]
 8001938:	4413      	add	r3, r2
 800193a:	2201      	movs	r2, #1
 800193c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001940:	4b84      	ldr	r3, [pc, #528]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	897b      	ldrh	r3, [r7, #10]
 8001946:	1c59      	adds	r1, r3, #1
 8001948:	8179      	strh	r1, [r7, #10]
 800194a:	4413      	add	r3, r2
 800194c:	2203      	movs	r2, #3
 800194e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001952:	4b80      	ldr	r3, [pc, #512]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	897b      	ldrh	r3, [r7, #10]
 8001958:	1c59      	adds	r1, r3, #1
 800195a:	8179      	strh	r1, [r7, #10]
 800195c:	4413      	add	r3, r2
 800195e:	223d      	movs	r2, #61	@ 0x3d
 8001960:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001964:	4b7b      	ldr	r3, [pc, #492]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	897b      	ldrh	r3, [r7, #10]
 800196a:	1c59      	adds	r1, r3, #1
 800196c:	8179      	strh	r1, [r7, #10]
 800196e:	4413      	add	r3, r2
 8001970:	2207      	movs	r2, #7
 8001972:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001976:	4b77      	ldr	r3, [pc, #476]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	897b      	ldrh	r3, [r7, #10]
 800197c:	1c59      	adds	r1, r3, #1
 800197e:	8179      	strh	r1, [r7, #10]
 8001980:	4413      	add	r3, r2
 8001982:	2201      	movs	r2, #1
 8001984:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001988:	4b72      	ldr	r3, [pc, #456]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	897b      	ldrh	r3, [r7, #10]
 800198e:	1c59      	adds	r1, r3, #1
 8001990:	8179      	strh	r1, [r7, #10]
 8001992:	4618      	mov	r0, r3
 8001994:	4b70      	ldr	r3, [pc, #448]	@ (8001b58 <send_DHCP_REQUEST+0x2dc>)
 8001996:	7819      	ldrb	r1, [r3, #0]
 8001998:	1813      	adds	r3, r2, r0
 800199a:	460a      	mov	r2, r1
 800199c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80019a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	897b      	ldrh	r3, [r7, #10]
 80019a6:	1c59      	adds	r1, r3, #1
 80019a8:	8179      	strh	r1, [r7, #10]
 80019aa:	4618      	mov	r0, r3
 80019ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001b58 <send_DHCP_REQUEST+0x2dc>)
 80019ae:	7859      	ldrb	r1, [r3, #1]
 80019b0:	1813      	adds	r3, r2, r0
 80019b2:	460a      	mov	r2, r1
 80019b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80019b8:	4b66      	ldr	r3, [pc, #408]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	897b      	ldrh	r3, [r7, #10]
 80019be:	1c59      	adds	r1, r3, #1
 80019c0:	8179      	strh	r1, [r7, #10]
 80019c2:	4618      	mov	r0, r3
 80019c4:	4b64      	ldr	r3, [pc, #400]	@ (8001b58 <send_DHCP_REQUEST+0x2dc>)
 80019c6:	7899      	ldrb	r1, [r3, #2]
 80019c8:	1813      	adds	r3, r2, r0
 80019ca:	460a      	mov	r2, r1
 80019cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80019d0:	4b60      	ldr	r3, [pc, #384]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	897b      	ldrh	r3, [r7, #10]
 80019d6:	1c59      	adds	r1, r3, #1
 80019d8:	8179      	strh	r1, [r7, #10]
 80019da:	4618      	mov	r0, r3
 80019dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b58 <send_DHCP_REQUEST+0x2dc>)
 80019de:	78d9      	ldrb	r1, [r3, #3]
 80019e0:	1813      	adds	r3, r2, r0
 80019e2:	460a      	mov	r2, r1
 80019e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80019e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	897b      	ldrh	r3, [r7, #10]
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	8179      	strh	r1, [r7, #10]
 80019f2:	4618      	mov	r0, r3
 80019f4:	4b58      	ldr	r3, [pc, #352]	@ (8001b58 <send_DHCP_REQUEST+0x2dc>)
 80019f6:	7919      	ldrb	r1, [r3, #4]
 80019f8:	1813      	adds	r3, r2, r0
 80019fa:	460a      	mov	r2, r1
 80019fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001a00:	4b54      	ldr	r3, [pc, #336]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	897b      	ldrh	r3, [r7, #10]
 8001a06:	1c59      	adds	r1, r3, #1
 8001a08:	8179      	strh	r1, [r7, #10]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4b52      	ldr	r3, [pc, #328]	@ (8001b58 <send_DHCP_REQUEST+0x2dc>)
 8001a0e:	7959      	ldrb	r1, [r3, #5]
 8001a10:	1813      	adds	r3, r2, r0
 8001a12:	460a      	mov	r2, r1
 8001a14:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	2bff      	cmp	r3, #255	@ 0xff
 8001a1c:	f040 8084 	bne.w	8001b28 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001a20:	4b4c      	ldr	r3, [pc, #304]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	897b      	ldrh	r3, [r7, #10]
 8001a26:	1c59      	adds	r1, r3, #1
 8001a28:	8179      	strh	r1, [r7, #10]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	2232      	movs	r2, #50	@ 0x32
 8001a2e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001a32:	4b48      	ldr	r3, [pc, #288]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	897b      	ldrh	r3, [r7, #10]
 8001a38:	1c59      	adds	r1, r3, #1
 8001a3a:	8179      	strh	r1, [r7, #10]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2204      	movs	r2, #4
 8001a40:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001a44:	4b43      	ldr	r3, [pc, #268]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	897b      	ldrh	r3, [r7, #10]
 8001a4a:	1c59      	adds	r1, r3, #1
 8001a4c:	8179      	strh	r1, [r7, #10]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	4b42      	ldr	r3, [pc, #264]	@ (8001b5c <send_DHCP_REQUEST+0x2e0>)
 8001a52:	7819      	ldrb	r1, [r3, #0]
 8001a54:	1813      	adds	r3, r2, r0
 8001a56:	460a      	mov	r2, r1
 8001a58:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	897b      	ldrh	r3, [r7, #10]
 8001a62:	1c59      	adds	r1, r3, #1
 8001a64:	8179      	strh	r1, [r7, #10]
 8001a66:	4618      	mov	r0, r3
 8001a68:	4b3c      	ldr	r3, [pc, #240]	@ (8001b5c <send_DHCP_REQUEST+0x2e0>)
 8001a6a:	7859      	ldrb	r1, [r3, #1]
 8001a6c:	1813      	adds	r3, r2, r0
 8001a6e:	460a      	mov	r2, r1
 8001a70:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001a74:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	897b      	ldrh	r3, [r7, #10]
 8001a7a:	1c59      	adds	r1, r3, #1
 8001a7c:	8179      	strh	r1, [r7, #10]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	4b36      	ldr	r3, [pc, #216]	@ (8001b5c <send_DHCP_REQUEST+0x2e0>)
 8001a82:	7899      	ldrb	r1, [r3, #2]
 8001a84:	1813      	adds	r3, r2, r0
 8001a86:	460a      	mov	r2, r1
 8001a88:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001a8c:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	897b      	ldrh	r3, [r7, #10]
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	8179      	strh	r1, [r7, #10]
 8001a96:	4618      	mov	r0, r3
 8001a98:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <send_DHCP_REQUEST+0x2e0>)
 8001a9a:	78d9      	ldrb	r1, [r3, #3]
 8001a9c:	1813      	adds	r3, r2, r0
 8001a9e:	460a      	mov	r2, r1
 8001aa0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	897b      	ldrh	r3, [r7, #10]
 8001aaa:	1c59      	adds	r1, r3, #1
 8001aac:	8179      	strh	r1, [r7, #10]
 8001aae:	4413      	add	r3, r2
 8001ab0:	2236      	movs	r2, #54	@ 0x36
 8001ab2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001ab6:	4b27      	ldr	r3, [pc, #156]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	897b      	ldrh	r3, [r7, #10]
 8001abc:	1c59      	adds	r1, r3, #1
 8001abe:	8179      	strh	r1, [r7, #10]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	897b      	ldrh	r3, [r7, #10]
 8001ace:	1c59      	adds	r1, r3, #1
 8001ad0:	8179      	strh	r1, [r7, #10]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <send_DHCP_REQUEST+0x2e4>)
 8001ad6:	7819      	ldrb	r1, [r3, #0]
 8001ad8:	1813      	adds	r3, r2, r0
 8001ada:	460a      	mov	r2, r1
 8001adc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	897b      	ldrh	r3, [r7, #10]
 8001ae6:	1c59      	adds	r1, r3, #1
 8001ae8:	8179      	strh	r1, [r7, #10]
 8001aea:	4618      	mov	r0, r3
 8001aec:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <send_DHCP_REQUEST+0x2e4>)
 8001aee:	7859      	ldrb	r1, [r3, #1]
 8001af0:	1813      	adds	r3, r2, r0
 8001af2:	460a      	mov	r2, r1
 8001af4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	897b      	ldrh	r3, [r7, #10]
 8001afe:	1c59      	adds	r1, r3, #1
 8001b00:	8179      	strh	r1, [r7, #10]
 8001b02:	4618      	mov	r0, r3
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <send_DHCP_REQUEST+0x2e4>)
 8001b06:	7899      	ldrb	r1, [r3, #2]
 8001b08:	1813      	adds	r3, r2, r0
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001b10:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	1c59      	adds	r1, r3, #1
 8001b18:	8179      	strh	r1, [r7, #10]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <send_DHCP_REQUEST+0x2e4>)
 8001b1e:	78d9      	ldrb	r1, [r3, #3]
 8001b20:	1813      	adds	r3, r2, r0
 8001b22:	460a      	mov	r2, r1
 8001b24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	897b      	ldrh	r3, [r7, #10]
 8001b2e:	1c59      	adds	r1, r3, #1
 8001b30:	8179      	strh	r1, [r7, #10]
 8001b32:	4413      	add	r3, r2
 8001b34:	220c      	movs	r2, #12
 8001b36:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <send_DHCP_REQUEST+0x2d8>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	897b      	ldrh	r3, [r7, #10]
 8001b40:	1c59      	adds	r1, r3, #1
 8001b42:	8179      	strh	r1, [r7, #10]
 8001b44:	4413      	add	r3, r2
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e019      	b.n	8001b86 <send_DHCP_REQUEST+0x30a>
 8001b52:	bf00      	nop
 8001b54:	20000208 	.word	0x20000208
 8001b58:	2000020c 	.word	0x2000020c
 8001b5c:	200001ec 	.word	0x200001ec
 8001b60:	200001e0 	.word	0x200001e0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001b64:	4b86      	ldr	r3, [pc, #536]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	897b      	ldrh	r3, [r7, #10]
 8001b6a:	1c59      	adds	r1, r3, #1
 8001b6c:	8179      	strh	r1, [r7, #10]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4984      	ldr	r1, [pc, #528]	@ (8001d84 <send_DHCP_REQUEST+0x508>)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	440b      	add	r3, r1
 8001b76:	7819      	ldrb	r1, [r3, #0]
 8001b78:	1813      	adds	r3, r2, r0
 8001b7a:	460a      	mov	r2, r1
 8001b7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3301      	adds	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4a7f      	ldr	r2, [pc, #508]	@ (8001d84 <send_DHCP_REQUEST+0x508>)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e8      	bne.n	8001b64 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001b92:	4b7d      	ldr	r3, [pc, #500]	@ (8001d88 <send_DHCP_REQUEST+0x50c>)
 8001b94:	78db      	ldrb	r3, [r3, #3]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b79      	ldr	r3, [pc, #484]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001b9c:	681c      	ldr	r4, [r3, #0]
 8001b9e:	897b      	ldrh	r3, [r7, #10]
 8001ba0:	1c59      	adds	r1, r3, #1
 8001ba2:	8179      	strh	r1, [r7, #10]
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f000 ff44 	bl	8002a34 <NibbleToHex>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	1963      	adds	r3, r4, r5
 8001bb2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001bb6:	4b74      	ldr	r3, [pc, #464]	@ (8001d88 <send_DHCP_REQUEST+0x50c>)
 8001bb8:	78da      	ldrb	r2, [r3, #3]
 8001bba:	4b71      	ldr	r3, [pc, #452]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001bbc:	681c      	ldr	r4, [r3, #0]
 8001bbe:	897b      	ldrh	r3, [r7, #10]
 8001bc0:	1c59      	adds	r1, r3, #1
 8001bc2:	8179      	strh	r1, [r7, #10]
 8001bc4:	461d      	mov	r5, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f000 ff34 	bl	8002a34 <NibbleToHex>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	1963      	adds	r3, r4, r5
 8001bd2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d88 <send_DHCP_REQUEST+0x50c>)
 8001bd8:	791b      	ldrb	r3, [r3, #4]
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b68      	ldr	r3, [pc, #416]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001be0:	681c      	ldr	r4, [r3, #0]
 8001be2:	897b      	ldrh	r3, [r7, #10]
 8001be4:	1c59      	adds	r1, r3, #1
 8001be6:	8179      	strh	r1, [r7, #10]
 8001be8:	461d      	mov	r5, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f000 ff22 	bl	8002a34 <NibbleToHex>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	1963      	adds	r3, r4, r5
 8001bf6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001bfa:	4b63      	ldr	r3, [pc, #396]	@ (8001d88 <send_DHCP_REQUEST+0x50c>)
 8001bfc:	791a      	ldrb	r2, [r3, #4]
 8001bfe:	4b60      	ldr	r3, [pc, #384]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001c00:	681c      	ldr	r4, [r3, #0]
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	1c59      	adds	r1, r3, #1
 8001c06:	8179      	strh	r1, [r7, #10]
 8001c08:	461d      	mov	r5, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f000 ff12 	bl	8002a34 <NibbleToHex>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	1963      	adds	r3, r4, r5
 8001c16:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001d88 <send_DHCP_REQUEST+0x50c>)
 8001c1c:	795b      	ldrb	r3, [r3, #5]
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b57      	ldr	r3, [pc, #348]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001c24:	681c      	ldr	r4, [r3, #0]
 8001c26:	897b      	ldrh	r3, [r7, #10]
 8001c28:	1c59      	adds	r1, r3, #1
 8001c2a:	8179      	strh	r1, [r7, #10]
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	f000 ff00 	bl	8002a34 <NibbleToHex>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	1963      	adds	r3, r4, r5
 8001c3a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001c3e:	4b52      	ldr	r3, [pc, #328]	@ (8001d88 <send_DHCP_REQUEST+0x50c>)
 8001c40:	795a      	ldrb	r2, [r3, #5]
 8001c42:	4b4f      	ldr	r3, [pc, #316]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001c44:	681c      	ldr	r4, [r3, #0]
 8001c46:	897b      	ldrh	r3, [r7, #10]
 8001c48:	1c59      	adds	r1, r3, #1
 8001c4a:	8179      	strh	r1, [r7, #10]
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 fef0 	bl	8002a34 <NibbleToHex>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	1963      	adds	r3, r4, r5
 8001c5a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	b2d9      	uxtb	r1, r3
 8001c62:	4b47      	ldr	r3, [pc, #284]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	8978      	ldrh	r0, [r7, #10]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3307      	adds	r3, #7
 8001c6c:	1ac3      	subs	r3, r0, r3
 8001c6e:	3106      	adds	r1, #6
 8001c70:	b2c9      	uxtb	r1, r1
 8001c72:	4413      	add	r3, r2
 8001c74:	460a      	mov	r2, r1
 8001c76:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001c7a:	4b41      	ldr	r3, [pc, #260]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	897b      	ldrh	r3, [r7, #10]
 8001c80:	1c59      	adds	r1, r3, #1
 8001c82:	8179      	strh	r1, [r7, #10]
 8001c84:	4413      	add	r3, r2
 8001c86:	2237      	movs	r2, #55	@ 0x37
 8001c88:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	897b      	ldrh	r3, [r7, #10]
 8001c92:	1c59      	adds	r1, r3, #1
 8001c94:	8179      	strh	r1, [r7, #10]
 8001c96:	4413      	add	r3, r2
 8001c98:	2208      	movs	r2, #8
 8001c9a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001c9e:	4b38      	ldr	r3, [pc, #224]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	897b      	ldrh	r3, [r7, #10]
 8001ca4:	1c59      	adds	r1, r3, #1
 8001ca6:	8179      	strh	r1, [r7, #10]
 8001ca8:	4413      	add	r3, r2
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001cb0:	4b33      	ldr	r3, [pc, #204]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	897b      	ldrh	r3, [r7, #10]
 8001cb6:	1c59      	adds	r1, r3, #1
 8001cb8:	8179      	strh	r1, [r7, #10]
 8001cba:	4413      	add	r3, r2
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	1c59      	adds	r1, r3, #1
 8001cca:	8179      	strh	r1, [r7, #10]
 8001ccc:	4413      	add	r3, r2
 8001cce:	2206      	movs	r2, #6
 8001cd0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	897b      	ldrh	r3, [r7, #10]
 8001cda:	1c59      	adds	r1, r3, #1
 8001cdc:	8179      	strh	r1, [r7, #10]
 8001cde:	4413      	add	r3, r2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001ce6:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	1c59      	adds	r1, r3, #1
 8001cee:	8179      	strh	r1, [r7, #10]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	223a      	movs	r2, #58	@ 0x3a
 8001cf4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001cf8:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	1c59      	adds	r1, r3, #1
 8001d00:	8179      	strh	r1, [r7, #10]
 8001d02:	4413      	add	r3, r2
 8001d04:	223b      	movs	r2, #59	@ 0x3b
 8001d06:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	1c59      	adds	r1, r3, #1
 8001d12:	8179      	strh	r1, [r7, #10]
 8001d14:	4413      	add	r3, r2
 8001d16:	221f      	movs	r2, #31
 8001d18:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	1c59      	adds	r1, r3, #1
 8001d24:	8179      	strh	r1, [r7, #10]
 8001d26:	4413      	add	r3, r2
 8001d28:	2221      	movs	r2, #33	@ 0x21
 8001d2a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	897b      	ldrh	r3, [r7, #10]
 8001d34:	1c59      	adds	r1, r3, #1
 8001d36:	8179      	strh	r1, [r7, #10]
 8001d38:	4413      	add	r3, r2
 8001d3a:	22ff      	movs	r2, #255	@ 0xff
 8001d3c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001d40:	897b      	ldrh	r3, [r7, #10]
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e009      	b.n	8001d5a <send_DHCP_REQUEST+0x4de>
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	33ec      	adds	r3, #236	@ 0xec
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3301      	adds	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001d60:	dbf1      	blt.n	8001d46 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <send_DHCP_REQUEST+0x510>)
 8001d64:	7818      	ldrb	r0, [r3, #0]
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <send_DHCP_REQUEST+0x504>)
 8001d68:	6819      	ldr	r1, [r3, #0]
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2243      	movs	r2, #67	@ 0x43
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001d74:	f001 f852 	bl	8002e1c <sendto>

}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d80:	20000208 	.word	0x20000208
 8001d84:	20000028 	.word	0x20000028
 8001d88:	2000020c 	.word	0x2000020c
 8001d8c:	200001dc 	.word	0x200001dc

08001d90 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001d9a:	f7ff fab3 	bl	8001304 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001d9e:	2304      	movs	r3, #4
 8001da0:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001da2:	4b9f      	ldr	r3, [pc, #636]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	330a      	adds	r3, #10
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001dac:	4b9c      	ldr	r3, [pc, #624]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	330a      	adds	r3, #10
 8001db2:	3301      	adds	r3, #1
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001db8:	4b99      	ldr	r3, [pc, #612]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	897b      	ldrh	r3, [r7, #10]
 8001dbe:	1c59      	adds	r1, r3, #1
 8001dc0:	8179      	strh	r1, [r7, #10]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2235      	movs	r2, #53	@ 0x35
 8001dc6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001dca:	4b95      	ldr	r3, [pc, #596]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	897b      	ldrh	r3, [r7, #10]
 8001dd0:	1c59      	adds	r1, r3, #1
 8001dd2:	8179      	strh	r1, [r7, #10]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001ddc:	4b90      	ldr	r3, [pc, #576]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	897b      	ldrh	r3, [r7, #10]
 8001de2:	1c59      	adds	r1, r3, #1
 8001de4:	8179      	strh	r1, [r7, #10]
 8001de6:	4413      	add	r3, r2
 8001de8:	2204      	movs	r2, #4
 8001dea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001dee:	4b8c      	ldr	r3, [pc, #560]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	897b      	ldrh	r3, [r7, #10]
 8001df4:	1c59      	adds	r1, r3, #1
 8001df6:	8179      	strh	r1, [r7, #10]
 8001df8:	4413      	add	r3, r2
 8001dfa:	223d      	movs	r2, #61	@ 0x3d
 8001dfc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001e00:	4b87      	ldr	r3, [pc, #540]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	897b      	ldrh	r3, [r7, #10]
 8001e06:	1c59      	adds	r1, r3, #1
 8001e08:	8179      	strh	r1, [r7, #10]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001e12:	4b83      	ldr	r3, [pc, #524]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	897b      	ldrh	r3, [r7, #10]
 8001e18:	1c59      	adds	r1, r3, #1
 8001e1a:	8179      	strh	r1, [r7, #10]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001e24:	4b7e      	ldr	r3, [pc, #504]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	897b      	ldrh	r3, [r7, #10]
 8001e2a:	1c59      	adds	r1, r3, #1
 8001e2c:	8179      	strh	r1, [r7, #10]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	4b7c      	ldr	r3, [pc, #496]	@ (8002024 <send_DHCP_DECLINE+0x294>)
 8001e32:	7819      	ldrb	r1, [r3, #0]
 8001e34:	1813      	adds	r3, r2, r0
 8001e36:	460a      	mov	r2, r1
 8001e38:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001e3c:	4b78      	ldr	r3, [pc, #480]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	897b      	ldrh	r3, [r7, #10]
 8001e42:	1c59      	adds	r1, r3, #1
 8001e44:	8179      	strh	r1, [r7, #10]
 8001e46:	4618      	mov	r0, r3
 8001e48:	4b76      	ldr	r3, [pc, #472]	@ (8002024 <send_DHCP_DECLINE+0x294>)
 8001e4a:	7859      	ldrb	r1, [r3, #1]
 8001e4c:	1813      	adds	r3, r2, r0
 8001e4e:	460a      	mov	r2, r1
 8001e50:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001e54:	4b72      	ldr	r3, [pc, #456]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	897b      	ldrh	r3, [r7, #10]
 8001e5a:	1c59      	adds	r1, r3, #1
 8001e5c:	8179      	strh	r1, [r7, #10]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	4b70      	ldr	r3, [pc, #448]	@ (8002024 <send_DHCP_DECLINE+0x294>)
 8001e62:	7899      	ldrb	r1, [r3, #2]
 8001e64:	1813      	adds	r3, r2, r0
 8001e66:	460a      	mov	r2, r1
 8001e68:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	897b      	ldrh	r3, [r7, #10]
 8001e72:	1c59      	adds	r1, r3, #1
 8001e74:	8179      	strh	r1, [r7, #10]
 8001e76:	4618      	mov	r0, r3
 8001e78:	4b6a      	ldr	r3, [pc, #424]	@ (8002024 <send_DHCP_DECLINE+0x294>)
 8001e7a:	78d9      	ldrb	r1, [r3, #3]
 8001e7c:	1813      	adds	r3, r2, r0
 8001e7e:	460a      	mov	r2, r1
 8001e80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001e84:	4b66      	ldr	r3, [pc, #408]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	897b      	ldrh	r3, [r7, #10]
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	8179      	strh	r1, [r7, #10]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4b64      	ldr	r3, [pc, #400]	@ (8002024 <send_DHCP_DECLINE+0x294>)
 8001e92:	7919      	ldrb	r1, [r3, #4]
 8001e94:	1813      	adds	r3, r2, r0
 8001e96:	460a      	mov	r2, r1
 8001e98:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001e9c:	4b60      	ldr	r3, [pc, #384]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	897b      	ldrh	r3, [r7, #10]
 8001ea2:	1c59      	adds	r1, r3, #1
 8001ea4:	8179      	strh	r1, [r7, #10]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8002024 <send_DHCP_DECLINE+0x294>)
 8001eaa:	7959      	ldrb	r1, [r3, #5]
 8001eac:	1813      	adds	r3, r2, r0
 8001eae:	460a      	mov	r2, r1
 8001eb0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	897b      	ldrh	r3, [r7, #10]
 8001eba:	1c59      	adds	r1, r3, #1
 8001ebc:	8179      	strh	r1, [r7, #10]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	2232      	movs	r2, #50	@ 0x32
 8001ec2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001ec6:	4b56      	ldr	r3, [pc, #344]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	1c59      	adds	r1, r3, #1
 8001ece:	8179      	strh	r1, [r7, #10]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001ed8:	4b51      	ldr	r3, [pc, #324]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	897b      	ldrh	r3, [r7, #10]
 8001ede:	1c59      	adds	r1, r3, #1
 8001ee0:	8179      	strh	r1, [r7, #10]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	4b50      	ldr	r3, [pc, #320]	@ (8002028 <send_DHCP_DECLINE+0x298>)
 8001ee6:	7819      	ldrb	r1, [r3, #0]
 8001ee8:	1813      	adds	r3, r2, r0
 8001eea:	460a      	mov	r2, r1
 8001eec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	897b      	ldrh	r3, [r7, #10]
 8001ef6:	1c59      	adds	r1, r3, #1
 8001ef8:	8179      	strh	r1, [r7, #10]
 8001efa:	4618      	mov	r0, r3
 8001efc:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <send_DHCP_DECLINE+0x298>)
 8001efe:	7859      	ldrb	r1, [r3, #1]
 8001f00:	1813      	adds	r3, r2, r0
 8001f02:	460a      	mov	r2, r1
 8001f04:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001f08:	4b45      	ldr	r3, [pc, #276]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	897b      	ldrh	r3, [r7, #10]
 8001f0e:	1c59      	adds	r1, r3, #1
 8001f10:	8179      	strh	r1, [r7, #10]
 8001f12:	4618      	mov	r0, r3
 8001f14:	4b44      	ldr	r3, [pc, #272]	@ (8002028 <send_DHCP_DECLINE+0x298>)
 8001f16:	7899      	ldrb	r1, [r3, #2]
 8001f18:	1813      	adds	r3, r2, r0
 8001f1a:	460a      	mov	r2, r1
 8001f1c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001f20:	4b3f      	ldr	r3, [pc, #252]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	897b      	ldrh	r3, [r7, #10]
 8001f26:	1c59      	adds	r1, r3, #1
 8001f28:	8179      	strh	r1, [r7, #10]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002028 <send_DHCP_DECLINE+0x298>)
 8001f2e:	78d9      	ldrb	r1, [r3, #3]
 8001f30:	1813      	adds	r3, r2, r0
 8001f32:	460a      	mov	r2, r1
 8001f34:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001f38:	4b39      	ldr	r3, [pc, #228]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	897b      	ldrh	r3, [r7, #10]
 8001f3e:	1c59      	adds	r1, r3, #1
 8001f40:	8179      	strh	r1, [r7, #10]
 8001f42:	4413      	add	r3, r2
 8001f44:	2236      	movs	r2, #54	@ 0x36
 8001f46:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001f4a:	4b35      	ldr	r3, [pc, #212]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	897b      	ldrh	r3, [r7, #10]
 8001f50:	1c59      	adds	r1, r3, #1
 8001f52:	8179      	strh	r1, [r7, #10]
 8001f54:	4413      	add	r3, r2
 8001f56:	2204      	movs	r2, #4
 8001f58:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001f5c:	4b30      	ldr	r3, [pc, #192]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	897b      	ldrh	r3, [r7, #10]
 8001f62:	1c59      	adds	r1, r3, #1
 8001f64:	8179      	strh	r1, [r7, #10]
 8001f66:	4618      	mov	r0, r3
 8001f68:	4b30      	ldr	r3, [pc, #192]	@ (800202c <send_DHCP_DECLINE+0x29c>)
 8001f6a:	7819      	ldrb	r1, [r3, #0]
 8001f6c:	1813      	adds	r3, r2, r0
 8001f6e:	460a      	mov	r2, r1
 8001f70:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001f74:	4b2a      	ldr	r3, [pc, #168]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	897b      	ldrh	r3, [r7, #10]
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	8179      	strh	r1, [r7, #10]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <send_DHCP_DECLINE+0x29c>)
 8001f82:	7859      	ldrb	r1, [r3, #1]
 8001f84:	1813      	adds	r3, r2, r0
 8001f86:	460a      	mov	r2, r1
 8001f88:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001f8c:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	897b      	ldrh	r3, [r7, #10]
 8001f92:	1c59      	adds	r1, r3, #1
 8001f94:	8179      	strh	r1, [r7, #10]
 8001f96:	4618      	mov	r0, r3
 8001f98:	4b24      	ldr	r3, [pc, #144]	@ (800202c <send_DHCP_DECLINE+0x29c>)
 8001f9a:	7899      	ldrb	r1, [r3, #2]
 8001f9c:	1813      	adds	r3, r2, r0
 8001f9e:	460a      	mov	r2, r1
 8001fa0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	897b      	ldrh	r3, [r7, #10]
 8001faa:	1c59      	adds	r1, r3, #1
 8001fac:	8179      	strh	r1, [r7, #10]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <send_DHCP_DECLINE+0x29c>)
 8001fb2:	78d9      	ldrb	r1, [r3, #3]
 8001fb4:	1813      	adds	r3, r2, r0
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	897b      	ldrh	r3, [r7, #10]
 8001fc2:	1c59      	adds	r1, r3, #1
 8001fc4:	8179      	strh	r1, [r7, #10]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	22ff      	movs	r2, #255	@ 0xff
 8001fca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001fce:	897b      	ldrh	r3, [r7, #10]
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e009      	b.n	8001fe8 <send_DHCP_DECLINE+0x258>
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4413      	add	r3, r2
 8001fdc:	33ec      	adds	r3, #236	@ 0xec
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001fee:	dbf1      	blt.n	8001fd4 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001ff0:	23ff      	movs	r3, #255	@ 0xff
 8001ff2:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001ff4:	23ff      	movs	r3, #255	@ 0xff
 8001ff6:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001ff8:	23ff      	movs	r3, #255	@ 0xff
 8001ffa:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001ffc:	23ff      	movs	r3, #255	@ 0xff
 8001ffe:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <send_DHCP_DECLINE+0x2a0>)
 8002002:	7818      	ldrb	r0, [r3, #0]
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <send_DHCP_DECLINE+0x290>)
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2243      	movs	r2, #67	@ 0x43
 800200c:	9200      	str	r2, [sp, #0]
 800200e:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002012:	f000 ff03 	bl	8002e1c <sendto>
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000208 	.word	0x20000208
 8002024:	2000020c 	.word	0x2000020c
 8002028:	200001ec 	.word	0x200001ec
 800202c:	200001e0 	.word	0x200001e0
 8002030:	200001dc 	.word	0x200001dc

08002034 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b089      	sub	sp, #36	@ 0x24
 8002038:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 800203e:	4ba1      	ldr	r3, [pc, #644]	@ (80022c4 <parseDHCPMSG+0x290>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe ffa1 	bl	8000f8a <getSn_RX_RSR>
 8002048:	4603      	mov	r3, r0
 800204a:	823b      	strh	r3, [r7, #16]
 800204c:	8a3b      	ldrh	r3, [r7, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d011      	beq.n	8002076 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8002052:	4b9c      	ldr	r3, [pc, #624]	@ (80022c4 <parseDHCPMSG+0x290>)
 8002054:	7818      	ldrb	r0, [r3, #0]
 8002056:	4b9c      	ldr	r3, [pc, #624]	@ (80022c8 <parseDHCPMSG+0x294>)
 8002058:	6819      	ldr	r1, [r3, #0]
 800205a:	1d3c      	adds	r4, r7, #4
 800205c:	8a3a      	ldrh	r2, [r7, #16]
 800205e:	1cbb      	adds	r3, r7, #2
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	4623      	mov	r3, r4
 8002064:	f001 f80e 	bl	8003084 <recvfrom>
 8002068:	4603      	mov	r3, r0
 800206a:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	2b43      	cmp	r3, #67	@ 0x43
 8002070:	f040 81ed 	bne.w	800244e <parseDHCPMSG+0x41a>
 8002074:	e001      	b.n	800207a <parseDHCPMSG+0x46>
   else return 0;
 8002076:	2300      	movs	r3, #0
 8002078:	e1eb      	b.n	8002452 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800207a:	4b93      	ldr	r3, [pc, #588]	@ (80022c8 <parseDHCPMSG+0x294>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	7f1a      	ldrb	r2, [r3, #28]
 8002080:	4b92      	ldr	r3, [pc, #584]	@ (80022cc <parseDHCPMSG+0x298>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d124      	bne.n	80020d2 <parseDHCPMSG+0x9e>
 8002088:	4b8f      	ldr	r3, [pc, #572]	@ (80022c8 <parseDHCPMSG+0x294>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	7f5a      	ldrb	r2, [r3, #29]
 800208e:	4b8f      	ldr	r3, [pc, #572]	@ (80022cc <parseDHCPMSG+0x298>)
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	429a      	cmp	r2, r3
 8002094:	d11d      	bne.n	80020d2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002096:	4b8c      	ldr	r3, [pc, #560]	@ (80022c8 <parseDHCPMSG+0x294>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	7f9a      	ldrb	r2, [r3, #30]
 800209c:	4b8b      	ldr	r3, [pc, #556]	@ (80022cc <parseDHCPMSG+0x298>)
 800209e:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d116      	bne.n	80020d2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80020a4:	4b88      	ldr	r3, [pc, #544]	@ (80022c8 <parseDHCPMSG+0x294>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	7fda      	ldrb	r2, [r3, #31]
 80020aa:	4b88      	ldr	r3, [pc, #544]	@ (80022cc <parseDHCPMSG+0x298>)
 80020ac:	78db      	ldrb	r3, [r3, #3]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d10f      	bne.n	80020d2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80020b2:	4b85      	ldr	r3, [pc, #532]	@ (80022c8 <parseDHCPMSG+0x294>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80020ba:	4b84      	ldr	r3, [pc, #528]	@ (80022cc <parseDHCPMSG+0x298>)
 80020bc:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d107      	bne.n	80020d2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80020c2:	4b81      	ldr	r3, [pc, #516]	@ (80022c8 <parseDHCPMSG+0x294>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80020ca:	4b80      	ldr	r3, [pc, #512]	@ (80022cc <parseDHCPMSG+0x298>)
 80020cc:	795b      	ldrb	r3, [r3, #5]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e1bd      	b.n	8002452 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80020d6:	4b7e      	ldr	r3, [pc, #504]	@ (80022d0 <parseDHCPMSG+0x29c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10b      	bne.n	80020f6 <parseDHCPMSG+0xc2>
 80020de:	4b7c      	ldr	r3, [pc, #496]	@ (80022d0 <parseDHCPMSG+0x29c>)
 80020e0:	785b      	ldrb	r3, [r3, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d107      	bne.n	80020f6 <parseDHCPMSG+0xc2>
 80020e6:	4b7a      	ldr	r3, [pc, #488]	@ (80022d0 <parseDHCPMSG+0x29c>)
 80020e8:	789b      	ldrb	r3, [r3, #2]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <parseDHCPMSG+0xc2>
 80020ee:	4b78      	ldr	r3, [pc, #480]	@ (80022d0 <parseDHCPMSG+0x29c>)
 80020f0:	78db      	ldrb	r3, [r3, #3]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d029      	beq.n	800214a <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80020f6:	793a      	ldrb	r2, [r7, #4]
 80020f8:	4b75      	ldr	r3, [pc, #468]	@ (80022d0 <parseDHCPMSG+0x29c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d10e      	bne.n	800211e <parseDHCPMSG+0xea>
 8002100:	797a      	ldrb	r2, [r7, #5]
 8002102:	4b73      	ldr	r3, [pc, #460]	@ (80022d0 <parseDHCPMSG+0x29c>)
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	429a      	cmp	r2, r3
 8002108:	d109      	bne.n	800211e <parseDHCPMSG+0xea>
 800210a:	79ba      	ldrb	r2, [r7, #6]
 800210c:	4b70      	ldr	r3, [pc, #448]	@ (80022d0 <parseDHCPMSG+0x29c>)
 800210e:	789b      	ldrb	r3, [r3, #2]
 8002110:	429a      	cmp	r2, r3
 8002112:	d104      	bne.n	800211e <parseDHCPMSG+0xea>
 8002114:	79fa      	ldrb	r2, [r7, #7]
 8002116:	4b6e      	ldr	r3, [pc, #440]	@ (80022d0 <parseDHCPMSG+0x29c>)
 8002118:	78db      	ldrb	r3, [r3, #3]
 800211a:	429a      	cmp	r2, r3
 800211c:	d015      	beq.n	800214a <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800211e:	793a      	ldrb	r2, [r7, #4]
 8002120:	4b6c      	ldr	r3, [pc, #432]	@ (80022d4 <parseDHCPMSG+0x2a0>)
 8002122:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002124:	429a      	cmp	r2, r3
 8002126:	d10e      	bne.n	8002146 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002128:	797a      	ldrb	r2, [r7, #5]
 800212a:	4b6a      	ldr	r3, [pc, #424]	@ (80022d4 <parseDHCPMSG+0x2a0>)
 800212c:	785b      	ldrb	r3, [r3, #1]
 800212e:	429a      	cmp	r2, r3
 8002130:	d109      	bne.n	8002146 <parseDHCPMSG+0x112>
 8002132:	79ba      	ldrb	r2, [r7, #6]
 8002134:	4b67      	ldr	r3, [pc, #412]	@ (80022d4 <parseDHCPMSG+0x2a0>)
 8002136:	789b      	ldrb	r3, [r3, #2]
 8002138:	429a      	cmp	r2, r3
 800213a:	d104      	bne.n	8002146 <parseDHCPMSG+0x112>
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	4b65      	ldr	r3, [pc, #404]	@ (80022d4 <parseDHCPMSG+0x2a0>)
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8002146:	2300      	movs	r3, #0
 8002148:	e183      	b.n	8002452 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 800214a:	4b5f      	ldr	r3, [pc, #380]	@ (80022c8 <parseDHCPMSG+0x294>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	33f0      	adds	r3, #240	@ 0xf0
 8002154:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8002156:	8a3b      	ldrh	r3, [r7, #16]
 8002158:	3bf0      	subs	r3, #240	@ 0xf0
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4413      	add	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8002160:	e170      	b.n	8002444 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b36      	cmp	r3, #54	@ 0x36
 8002168:	dc76      	bgt.n	8002258 <parseDHCPMSG+0x224>
 800216a:	2b00      	cmp	r3, #0
 800216c:	f2c0 815d 	blt.w	800242a <parseDHCPMSG+0x3f6>
 8002170:	2b36      	cmp	r3, #54	@ 0x36
 8002172:	f200 815a 	bhi.w	800242a <parseDHCPMSG+0x3f6>
 8002176:	a201      	add	r2, pc, #4	@ (adr r2, 800217c <parseDHCPMSG+0x148>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	08002265 	.word	0x08002265
 8002180:	08002285 	.word	0x08002285
 8002184:	0800242b 	.word	0x0800242b
 8002188:	080022dd 	.word	0x080022dd
 800218c:	0800242b 	.word	0x0800242b
 8002190:	0800242b 	.word	0x0800242b
 8002194:	08002329 	.word	0x08002329
 8002198:	0800242b 	.word	0x0800242b
 800219c:	0800242b 	.word	0x0800242b
 80021a0:	0800242b 	.word	0x0800242b
 80021a4:	0800242b 	.word	0x0800242b
 80021a8:	0800242b 	.word	0x0800242b
 80021ac:	0800242b 	.word	0x0800242b
 80021b0:	0800242b 	.word	0x0800242b
 80021b4:	0800242b 	.word	0x0800242b
 80021b8:	0800242b 	.word	0x0800242b
 80021bc:	0800242b 	.word	0x0800242b
 80021c0:	0800242b 	.word	0x0800242b
 80021c4:	0800242b 	.word	0x0800242b
 80021c8:	0800242b 	.word	0x0800242b
 80021cc:	0800242b 	.word	0x0800242b
 80021d0:	0800242b 	.word	0x0800242b
 80021d4:	0800242b 	.word	0x0800242b
 80021d8:	0800242b 	.word	0x0800242b
 80021dc:	0800242b 	.word	0x0800242b
 80021e0:	0800242b 	.word	0x0800242b
 80021e4:	0800242b 	.word	0x0800242b
 80021e8:	0800242b 	.word	0x0800242b
 80021ec:	0800242b 	.word	0x0800242b
 80021f0:	0800242b 	.word	0x0800242b
 80021f4:	0800242b 	.word	0x0800242b
 80021f8:	0800242b 	.word	0x0800242b
 80021fc:	0800242b 	.word	0x0800242b
 8002200:	0800242b 	.word	0x0800242b
 8002204:	0800242b 	.word	0x0800242b
 8002208:	0800242b 	.word	0x0800242b
 800220c:	0800242b 	.word	0x0800242b
 8002210:	0800242b 	.word	0x0800242b
 8002214:	0800242b 	.word	0x0800242b
 8002218:	0800242b 	.word	0x0800242b
 800221c:	0800242b 	.word	0x0800242b
 8002220:	0800242b 	.word	0x0800242b
 8002224:	0800242b 	.word	0x0800242b
 8002228:	0800242b 	.word	0x0800242b
 800222c:	0800242b 	.word	0x0800242b
 8002230:	0800242b 	.word	0x0800242b
 8002234:	0800242b 	.word	0x0800242b
 8002238:	0800242b 	.word	0x0800242b
 800223c:	0800242b 	.word	0x0800242b
 8002240:	0800242b 	.word	0x0800242b
 8002244:	0800242b 	.word	0x0800242b
 8002248:	08002375 	.word	0x08002375
 800224c:	0800242b 	.word	0x0800242b
 8002250:	0800226d 	.word	0x0800226d
 8002254:	080023d1 	.word	0x080023d1
 8002258:	2bff      	cmp	r3, #255	@ 0xff
 800225a:	f040 80e6 	bne.w	800242a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	617b      	str	r3, [r7, #20]
   				break;
 8002262:	e0ef      	b.n	8002444 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
   				break;
 800226a:	e0eb      	b.n	8002444 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3301      	adds	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
   				p++;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3301      	adds	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	617a      	str	r2, [r7, #20]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	74fb      	strb	r3, [r7, #19]
   				break;
 8002282:	e0df      	b.n	8002444 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
   				p++;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	617a      	str	r2, [r7, #20]
 8002296:	781a      	ldrb	r2, [r3, #0]
 8002298:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <parseDHCPMSG+0x2a4>)
 800229a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	617a      	str	r2, [r7, #20]
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <parseDHCPMSG+0x2a4>)
 80022a6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	617a      	str	r2, [r7, #20]
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <parseDHCPMSG+0x2a4>)
 80022b2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	617a      	str	r2, [r7, #20]
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <parseDHCPMSG+0x2a4>)
 80022be:	70da      	strb	r2, [r3, #3]
   				break;
 80022c0:	e0c0      	b.n	8002444 <parseDHCPMSG+0x410>
 80022c2:	bf00      	nop
 80022c4:	200001dc 	.word	0x200001dc
 80022c8:	20000208 	.word	0x20000208
 80022cc:	2000020c 	.word	0x2000020c
 80022d0:	200001e0 	.word	0x200001e0
 80022d4:	200001e4 	.word	0x200001e4
 80022d8:	200001f4 	.word	0x200001f4
   			case routersOnSubnet :
   				p++;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3301      	adds	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	617a      	str	r2, [r7, #20]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	617a      	str	r2, [r7, #20]
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b59      	ldr	r3, [pc, #356]	@ (800245c <parseDHCPMSG+0x428>)
 80022f6:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	617a      	str	r2, [r7, #20]
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	4b56      	ldr	r3, [pc, #344]	@ (800245c <parseDHCPMSG+0x428>)
 8002302:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	617a      	str	r2, [r7, #20]
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	4b53      	ldr	r3, [pc, #332]	@ (800245c <parseDHCPMSG+0x428>)
 800230e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	617a      	str	r2, [r7, #20]
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	4b50      	ldr	r3, [pc, #320]	@ (800245c <parseDHCPMSG+0x428>)
 800231a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	3b04      	subs	r3, #4
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
   				break;
 8002326:	e08d      	b.n	8002444 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	617a      	str	r2, [r7, #20]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	617a      	str	r2, [r7, #20]
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	4b47      	ldr	r3, [pc, #284]	@ (8002460 <parseDHCPMSG+0x42c>)
 8002342:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	617a      	str	r2, [r7, #20]
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	4b44      	ldr	r3, [pc, #272]	@ (8002460 <parseDHCPMSG+0x42c>)
 800234e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	617a      	str	r2, [r7, #20]
 8002356:	781a      	ldrb	r2, [r3, #0]
 8002358:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <parseDHCPMSG+0x42c>)
 800235a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	617a      	str	r2, [r7, #20]
 8002362:	781a      	ldrb	r2, [r3, #0]
 8002364:	4b3e      	ldr	r3, [pc, #248]	@ (8002460 <parseDHCPMSG+0x42c>)
 8002366:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	3b04      	subs	r3, #4
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4413      	add	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
   				break;
 8002372:	e067      	b.n	8002444 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3301      	adds	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	617a      	str	r2, [r7, #20]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	617a      	str	r2, [r7, #20]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <parseDHCPMSG+0x430>)
 8002390:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002392:	4b34      	ldr	r3, [pc, #208]	@ (8002464 <parseDHCPMSG+0x430>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	021a      	lsls	r2, r3, #8
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	1c59      	adds	r1, r3, #1
 800239c:	6179      	str	r1, [r7, #20]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a30      	ldr	r2, [pc, #192]	@ (8002464 <parseDHCPMSG+0x430>)
 80023a4:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80023a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002464 <parseDHCPMSG+0x430>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	021a      	lsls	r2, r3, #8
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	1c59      	adds	r1, r3, #1
 80023b0:	6179      	str	r1, [r7, #20]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002464 <parseDHCPMSG+0x430>)
 80023b8:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80023ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <parseDHCPMSG+0x430>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	021a      	lsls	r2, r3, #8
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	1c59      	adds	r1, r3, #1
 80023c4:	6179      	str	r1, [r7, #20]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a26      	ldr	r2, [pc, #152]	@ (8002464 <parseDHCPMSG+0x430>)
 80023cc:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 80023ce:	e039      	b.n	8002444 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	617a      	str	r2, [r7, #20]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	617a      	str	r2, [r7, #20]
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <parseDHCPMSG+0x434>)
 80023ea:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	617a      	str	r2, [r7, #20]
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <parseDHCPMSG+0x434>)
 80023f6:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	617a      	str	r2, [r7, #20]
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <parseDHCPMSG+0x434>)
 8002402:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	617a      	str	r2, [r7, #20]
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <parseDHCPMSG+0x434>)
 800240e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002410:	793a      	ldrb	r2, [r7, #4]
 8002412:	4b16      	ldr	r3, [pc, #88]	@ (800246c <parseDHCPMSG+0x438>)
 8002414:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8002416:	797a      	ldrb	r2, [r7, #5]
 8002418:	4b14      	ldr	r3, [pc, #80]	@ (800246c <parseDHCPMSG+0x438>)
 800241a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 800241c:	79ba      	ldrb	r2, [r7, #6]
 800241e:	4b13      	ldr	r3, [pc, #76]	@ (800246c <parseDHCPMSG+0x438>)
 8002420:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8002422:	79fa      	ldrb	r2, [r7, #7]
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <parseDHCPMSG+0x438>)
 8002426:	70da      	strb	r2, [r3, #3]
   				break;
 8002428:	e00c      	b.n	8002444 <parseDHCPMSG+0x410>
   			default :
   				p++;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	617a      	str	r2, [r7, #20]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800243a:	7afb      	ldrb	r3, [r7, #11]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	4413      	add	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
   				break;
 8002442:	bf00      	nop
		while ( p < e ) {
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	429a      	cmp	r2, r3
 800244a:	f4ff ae8a 	bcc.w	8002162 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 800244e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002452:	4618      	mov	r0, r3
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}
 800245a:	bf00      	nop
 800245c:	200001f0 	.word	0x200001f0
 8002460:	200001f8 	.word	0x200001f8
 8002464:	20000020 	.word	0x20000020
 8002468:	200001e0 	.word	0x200001e0
 800246c:	200001e4 	.word	0x200001e4

08002470 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8002476:	4b7f      	ldr	r3, [pc, #508]	@ (8002674 <DHCP_run+0x204>)
 8002478:	f993 3000 	ldrsb.w	r3, [r3]
 800247c:	2b06      	cmp	r3, #6
 800247e:	d101      	bne.n	8002484 <DHCP_run+0x14>
 8002480:	2305      	movs	r3, #5
 8002482:	e0f3      	b.n	800266c <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8002484:	4b7c      	ldr	r3, [pc, #496]	@ (8002678 <DHCP_run+0x208>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	3301      	adds	r3, #1
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fbd6 	bl	8000c44 <WIZCHIP_READ>
 8002498:	4603      	mov	r3, r0
 800249a:	2b22      	cmp	r3, #34	@ 0x22
 800249c:	d006      	beq.n	80024ac <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800249e:	4b76      	ldr	r3, [pc, #472]	@ (8002678 <DHCP_run+0x208>)
 80024a0:	7818      	ldrb	r0, [r3, #0]
 80024a2:	2300      	movs	r3, #0
 80024a4:	2244      	movs	r2, #68	@ 0x44
 80024a6:	2102      	movs	r1, #2
 80024a8:	f000 fade 	bl	8002a68 <socket>

	ret = DHCP_RUNNING;
 80024ac:	2301      	movs	r3, #1
 80024ae:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80024b0:	f7ff fdc0 	bl	8002034 <parseDHCPMSG>
 80024b4:	4603      	mov	r3, r0
 80024b6:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80024b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002674 <DHCP_run+0x204>)
 80024ba:	f993 3000 	ldrsb.w	r3, [r3]
 80024be:	2b04      	cmp	r3, #4
 80024c0:	f200 80d0 	bhi.w	8002664 <DHCP_run+0x1f4>
 80024c4:	a201      	add	r2, pc, #4	@ (adr r2, 80024cc <DHCP_run+0x5c>)
 80024c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ca:	bf00      	nop
 80024cc:	080024e1 	.word	0x080024e1
 80024d0:	08002505 	.word	0x08002505
 80024d4:	08002549 	.word	0x08002549
 80024d8:	08002599 	.word	0x08002599
 80024dc:	080025f3 	.word	0x080025f3
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80024e0:	4b66      	ldr	r3, [pc, #408]	@ (800267c <DHCP_run+0x20c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80024e6:	4b65      	ldr	r3, [pc, #404]	@ (800267c <DHCP_run+0x20c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80024ec:	4b63      	ldr	r3, [pc, #396]	@ (800267c <DHCP_run+0x20c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80024f2:	4b62      	ldr	r3, [pc, #392]	@ (800267c <DHCP_run+0x20c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80024f8:	f7fe fffa 	bl	80014f0 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 80024fc:	4b5d      	ldr	r3, [pc, #372]	@ (8002674 <DHCP_run+0x204>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
   		break;
 8002502:	e0b2      	b.n	800266a <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d119      	bne.n	800253e <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800250a:	4b5d      	ldr	r3, [pc, #372]	@ (8002680 <DHCP_run+0x210>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	7c1a      	ldrb	r2, [r3, #16]
 8002510:	4b5a      	ldr	r3, [pc, #360]	@ (800267c <DHCP_run+0x20c>)
 8002512:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002514:	4b5a      	ldr	r3, [pc, #360]	@ (8002680 <DHCP_run+0x210>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	7c5a      	ldrb	r2, [r3, #17]
 800251a:	4b58      	ldr	r3, [pc, #352]	@ (800267c <DHCP_run+0x20c>)
 800251c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800251e:	4b58      	ldr	r3, [pc, #352]	@ (8002680 <DHCP_run+0x210>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	7c9a      	ldrb	r2, [r3, #18]
 8002524:	4b55      	ldr	r3, [pc, #340]	@ (800267c <DHCP_run+0x20c>)
 8002526:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8002528:	4b55      	ldr	r3, [pc, #340]	@ (8002680 <DHCP_run+0x210>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	7cda      	ldrb	r2, [r3, #19]
 800252e:	4b53      	ldr	r3, [pc, #332]	@ (800267c <DHCP_run+0x20c>)
 8002530:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002532:	f7ff f9a3 	bl	800187c <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8002536:	4b4f      	ldr	r3, [pc, #316]	@ (8002674 <DHCP_run+0x204>)
 8002538:	2202      	movs	r2, #2
 800253a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 800253c:	e095      	b.n	800266a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800253e:	f000 f8b1 	bl	80026a4 <check_DHCP_timeout>
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
         break;
 8002546:	e090      	b.n	800266a <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8002548:	79bb      	ldrb	r3, [r7, #6]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d116      	bne.n	800257c <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800254e:	f000 f909 	bl	8002764 <check_DHCP_leasedIP>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8002558:	4b4a      	ldr	r3, [pc, #296]	@ (8002684 <DHCP_run+0x214>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4798      	blx	r3
					reset_DHCP_timeout();
 800255e:	f000 f9d3 	bl	8002908 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8002562:	4b44      	ldr	r3, [pc, #272]	@ (8002674 <DHCP_run+0x204>)
 8002564:	2203      	movs	r2, #3
 8002566:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8002568:	e07f      	b.n	800266a <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800256a:	f000 f9cd 	bl	8002908 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800256e:	4b46      	ldr	r3, [pc, #280]	@ (8002688 <DHCP_run+0x218>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002574:	4b3f      	ldr	r3, [pc, #252]	@ (8002674 <DHCP_run+0x204>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
		break;
 800257a:	e076      	b.n	800266a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d105      	bne.n	800258e <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8002582:	f000 f9c1 	bl	8002908 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002586:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <DHCP_run+0x204>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
		break;
 800258c:	e06d      	b.n	800266a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800258e:	f000 f889 	bl	80026a4 <check_DHCP_timeout>
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
		break;
 8002596:	e068      	b.n	800266a <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8002598:	2304      	movs	r3, #4
 800259a:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 800259c:	4b3b      	ldr	r3, [pc, #236]	@ (800268c <DHCP_run+0x21c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d060      	beq.n	8002668 <DHCP_run+0x1f8>
 80025a6:	4b39      	ldr	r3, [pc, #228]	@ (800268c <DHCP_run+0x21c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	085a      	lsrs	r2, r3, #1
 80025ac:	4b38      	ldr	r3, [pc, #224]	@ (8002690 <DHCP_run+0x220>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d259      	bcs.n	8002668 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80025b8:	4b30      	ldr	r3, [pc, #192]	@ (800267c <DHCP_run+0x20c>)
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	4b35      	ldr	r3, [pc, #212]	@ (8002694 <DHCP_run+0x224>)
 80025be:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80025c0:	4b2e      	ldr	r3, [pc, #184]	@ (800267c <DHCP_run+0x20c>)
 80025c2:	785a      	ldrb	r2, [r3, #1]
 80025c4:	4b33      	ldr	r3, [pc, #204]	@ (8002694 <DHCP_run+0x224>)
 80025c6:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80025c8:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <DHCP_run+0x20c>)
 80025ca:	789a      	ldrb	r2, [r3, #2]
 80025cc:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <DHCP_run+0x224>)
 80025ce:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80025d0:	4b2a      	ldr	r3, [pc, #168]	@ (800267c <DHCP_run+0x20c>)
 80025d2:	78da      	ldrb	r2, [r3, #3]
 80025d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002694 <DHCP_run+0x224>)
 80025d6:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80025d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <DHCP_run+0x228>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	4a2e      	ldr	r2, [pc, #184]	@ (8002698 <DHCP_run+0x228>)
 80025e0:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80025e2:	f7ff f94b 	bl	800187c <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80025e6:	f000 f98f 	bl	8002908 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80025ea:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <DHCP_run+0x204>)
 80025ec:	2204      	movs	r2, #4
 80025ee:	701a      	strb	r2, [r3, #0]
			}
		break;
 80025f0:	e03a      	b.n	8002668 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80025f2:	2304      	movs	r3, #4
 80025f4:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d125      	bne.n	8002648 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 80025fc:	4b27      	ldr	r3, [pc, #156]	@ (800269c <DHCP_run+0x22c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002602:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <DHCP_run+0x224>)
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <DHCP_run+0x20c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d111      	bne.n	8002632 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800260e:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <DHCP_run+0x224>)
 8002610:	785a      	ldrb	r2, [r3, #1]
 8002612:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <DHCP_run+0x20c>)
 8002614:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002616:	429a      	cmp	r2, r3
 8002618:	d10b      	bne.n	8002632 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800261a:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <DHCP_run+0x224>)
 800261c:	789a      	ldrb	r2, [r3, #2]
 800261e:	4b17      	ldr	r3, [pc, #92]	@ (800267c <DHCP_run+0x20c>)
 8002620:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d105      	bne.n	8002632 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8002626:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <DHCP_run+0x224>)
 8002628:	78da      	ldrb	r2, [r3, #3]
 800262a:	4b14      	ldr	r3, [pc, #80]	@ (800267c <DHCP_run+0x20c>)
 800262c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d004      	beq.n	800263c <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8002632:	2303      	movs	r3, #3
 8002634:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <DHCP_run+0x230>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 800263c:	f000 f964 	bl	8002908 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002640:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <DHCP_run+0x204>)
 8002642:	2203      	movs	r2, #3
 8002644:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8002646:	e010      	b.n	800266a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002648:	79bb      	ldrb	r3, [r7, #6]
 800264a:	2b06      	cmp	r3, #6
 800264c:	d105      	bne.n	800265a <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800264e:	f000 f95b 	bl	8002908 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002652:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <DHCP_run+0x204>)
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
	   	break;
 8002658:	e007      	b.n	800266a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800265a:	f000 f823 	bl	80026a4 <check_DHCP_timeout>
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	   	break;
 8002662:	e002      	b.n	800266a <DHCP_run+0x1fa>
		default :
   		break;
 8002664:	bf00      	nop
 8002666:	e000      	b.n	800266a <DHCP_run+0x1fa>
		break;
 8002668:	bf00      	nop
	}

	return ret;
 800266a:	79fb      	ldrb	r3, [r7, #7]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200001fc 	.word	0x200001fc
 8002678:	200001dc 	.word	0x200001dc
 800267c:	200001ec 	.word	0x200001ec
 8002680:	20000208 	.word	0x20000208
 8002684:	20000030 	.word	0x20000030
 8002688:	20000038 	.word	0x20000038
 800268c:	20000020 	.word	0x20000020
 8002690:	20000200 	.word	0x20000200
 8002694:	200001e8 	.word	0x200001e8
 8002698:	20000204 	.word	0x20000204
 800269c:	200001fd 	.word	0x200001fd
 80026a0:	20000034 	.word	0x20000034

080026a4 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80026aa:	2301      	movs	r3, #1
 80026ac:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80026ae:	4b29      	ldr	r3, [pc, #164]	@ (8002754 <check_DHCP_timeout+0xb0>)
 80026b0:	f993 3000 	ldrsb.w	r3, [r3]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	dc2d      	bgt.n	8002714 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80026b8:	4b27      	ldr	r3, [pc, #156]	@ (8002758 <check_DHCP_timeout+0xb4>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b27      	ldr	r3, [pc, #156]	@ (800275c <check_DHCP_timeout+0xb8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d242      	bcs.n	800274a <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80026c4:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <check_DHCP_timeout+0xbc>)
 80026c6:	f993 3000 	ldrsb.w	r3, [r3]
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d00c      	beq.n	80026e8 <check_DHCP_timeout+0x44>
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	dc0d      	bgt.n	80026ee <check_DHCP_timeout+0x4a>
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d002      	beq.n	80026dc <check_DHCP_timeout+0x38>
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d003      	beq.n	80026e2 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80026da:	e008      	b.n	80026ee <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80026dc:	f7fe ff08 	bl	80014f0 <send_DHCP_DISCOVER>
				break;
 80026e0:	e006      	b.n	80026f0 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80026e2:	f7ff f8cb 	bl	800187c <send_DHCP_REQUEST>
				break;
 80026e6:	e003      	b.n	80026f0 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80026e8:	f7ff f8c8 	bl	800187c <send_DHCP_REQUEST>
				break;
 80026ec:	e000      	b.n	80026f0 <check_DHCP_timeout+0x4c>
				break;
 80026ee:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <check_DHCP_timeout+0xb8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80026f6:	4b19      	ldr	r3, [pc, #100]	@ (800275c <check_DHCP_timeout+0xb8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330a      	adds	r3, #10
 80026fc:	4a16      	ldr	r2, [pc, #88]	@ (8002758 <check_DHCP_timeout+0xb4>)
 80026fe:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002700:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <check_DHCP_timeout+0xb0>)
 8002702:	f993 3000 	ldrsb.w	r3, [r3]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	b25a      	sxtb	r2, r3
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <check_DHCP_timeout+0xb0>)
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e01a      	b.n	800274a <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002714:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <check_DHCP_timeout+0xbc>)
 8002716:	f993 3000 	ldrsb.w	r3, [r3]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d00c      	beq.n	8002738 <check_DHCP_timeout+0x94>
 800271e:	2b04      	cmp	r3, #4
 8002720:	dc10      	bgt.n	8002744 <check_DHCP_timeout+0xa0>
 8002722:	2b01      	cmp	r3, #1
 8002724:	d002      	beq.n	800272c <check_DHCP_timeout+0x88>
 8002726:	2b02      	cmp	r3, #2
 8002728:	d006      	beq.n	8002738 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800272a:	e00b      	b.n	8002744 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <check_DHCP_timeout+0xbc>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002732:	2300      	movs	r3, #0
 8002734:	71fb      	strb	r3, [r7, #7]
				break;
 8002736:	e006      	b.n	8002746 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8002738:	f7fe feda 	bl	80014f0 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <check_DHCP_timeout+0xbc>)
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
				break;
 8002742:	e000      	b.n	8002746 <check_DHCP_timeout+0xa2>
				break;
 8002744:	bf00      	nop
		}
		reset_DHCP_timeout();
 8002746:	f000 f8df 	bl	8002908 <reset_DHCP_timeout>
	}
	return ret;
 800274a:	79fb      	ldrb	r3, [r7, #7]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200001fd 	.word	0x200001fd
 8002758:	20000024 	.word	0x20000024
 800275c:	20000200 	.word	0x20000200
 8002760:	200001fc 	.word	0x200001fc

08002764 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800276a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800276e:	f7fe fa69 	bl	8000c44 <WIZCHIP_READ>
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8002776:	2103      	movs	r1, #3
 8002778:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800277c:	f7fe faae 	bl	8000cdc <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002780:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <check_DHCP_leasedIP+0x6c>)
 8002782:	7818      	ldrb	r0, [r3, #0]
 8002784:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <check_DHCP_leasedIP+0x70>)
 800278c:	2211      	movs	r2, #17
 800278e:	4912      	ldr	r1, [pc, #72]	@ (80027d8 <check_DHCP_leasedIP+0x74>)
 8002790:	f000 fb44 	bl	8002e1c <sendto>
 8002794:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	4619      	mov	r1, r3
 800279a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800279e:	f7fe fa9d 	bl	8000cdc <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	f113 0f0d 	cmn.w	r3, #13
 80027a8:	d101      	bne.n	80027ae <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00c      	b.n	80027c8 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80027ae:	f7ff faef 	bl	8001d90 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <check_DHCP_leasedIP+0x78>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80027b8:	bf00      	nop
 80027ba:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <check_DHCP_leasedIP+0x78>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d9f9      	bls.n	80027ba <check_DHCP_leasedIP+0x56>

		return 0;
 80027c6:	2300      	movs	r3, #0
	}
}	
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	200001dc 	.word	0x200001dc
 80027d4:	200001ec 	.word	0x200001ec
 80027d8:	08008860 	.word	0x08008860
 80027dc:	20000200 	.word	0x20000200

080027e0 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80027f0:	2206      	movs	r2, #6
 80027f2:	493f      	ldr	r1, [pc, #252]	@ (80028f0 <DHCP_init+0x110>)
 80027f4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80027f8:	f7fe fabe 	bl	8000d78 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80027fc:	4b3c      	ldr	r3, [pc, #240]	@ (80028f0 <DHCP_init+0x110>)
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	4b3b      	ldr	r3, [pc, #236]	@ (80028f0 <DHCP_init+0x110>)
 8002802:	785b      	ldrb	r3, [r3, #1]
 8002804:	4313      	orrs	r3, r2
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b39      	ldr	r3, [pc, #228]	@ (80028f0 <DHCP_init+0x110>)
 800280a:	789b      	ldrb	r3, [r3, #2]
 800280c:	4313      	orrs	r3, r2
 800280e:	b2da      	uxtb	r2, r3
 8002810:	4b37      	ldr	r3, [pc, #220]	@ (80028f0 <DHCP_init+0x110>)
 8002812:	78db      	ldrb	r3, [r3, #3]
 8002814:	4313      	orrs	r3, r2
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b35      	ldr	r3, [pc, #212]	@ (80028f0 <DHCP_init+0x110>)
 800281a:	791b      	ldrb	r3, [r3, #4]
 800281c:	4313      	orrs	r3, r2
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b33      	ldr	r3, [pc, #204]	@ (80028f0 <DHCP_init+0x110>)
 8002822:	795b      	ldrb	r3, [r3, #5]
 8002824:	4313      	orrs	r3, r2
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d117      	bne.n	800285c <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800282c:	4b30      	ldr	r3, [pc, #192]	@ (80028f0 <DHCP_init+0x110>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002832:	4b2f      	ldr	r3, [pc, #188]	@ (80028f0 <DHCP_init+0x110>)
 8002834:	2208      	movs	r2, #8
 8002836:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002838:	4b2d      	ldr	r3, [pc, #180]	@ (80028f0 <DHCP_init+0x110>)
 800283a:	22dc      	movs	r2, #220	@ 0xdc
 800283c:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800283e:	4b2c      	ldr	r3, [pc, #176]	@ (80028f0 <DHCP_init+0x110>)
 8002840:	2200      	movs	r2, #0
 8002842:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002844:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <DHCP_init+0x110>)
 8002846:	2200      	movs	r2, #0
 8002848:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800284a:	4b29      	ldr	r3, [pc, #164]	@ (80028f0 <DHCP_init+0x110>)
 800284c:	2200      	movs	r2, #0
 800284e:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002850:	2206      	movs	r2, #6
 8002852:	4927      	ldr	r1, [pc, #156]	@ (80028f0 <DHCP_init+0x110>)
 8002854:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002858:	f7fe faee 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 800285c:	4a25      	ldr	r2, [pc, #148]	@ (80028f4 <DHCP_init+0x114>)
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002862:	4a25      	ldr	r2, [pc, #148]	@ (80028f8 <DHCP_init+0x118>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002868:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <DHCP_init+0x11c>)
 800286a:	4a25      	ldr	r2, [pc, #148]	@ (8002900 <DHCP_init+0x120>)
 800286c:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800286e:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <DHCP_init+0x110>)
 8002870:	78db      	ldrb	r3, [r3, #3]
 8002872:	461a      	mov	r2, r3
 8002874:	4b21      	ldr	r3, [pc, #132]	@ (80028fc <DHCP_init+0x11c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4413      	add	r3, r2
 800287a:	4a20      	ldr	r2, [pc, #128]	@ (80028fc <DHCP_init+0x11c>)
 800287c:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800287e:	4b1c      	ldr	r3, [pc, #112]	@ (80028f0 <DHCP_init+0x110>)
 8002880:	791b      	ldrb	r3, [r3, #4]
 8002882:	461a      	mov	r2, r3
 8002884:	4b1d      	ldr	r3, [pc, #116]	@ (80028fc <DHCP_init+0x11c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4413      	add	r3, r2
 800288a:	4a1c      	ldr	r2, [pc, #112]	@ (80028fc <DHCP_init+0x11c>)
 800288c:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800288e:	4b18      	ldr	r3, [pc, #96]	@ (80028f0 <DHCP_init+0x110>)
 8002890:	795b      	ldrb	r3, [r3, #5]
 8002892:	461a      	mov	r2, r3
 8002894:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <DHCP_init+0x11c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4413      	add	r3, r2
 800289a:	4a18      	ldr	r2, [pc, #96]	@ (80028fc <DHCP_init+0x11c>)
 800289c:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800289e:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <DHCP_init+0x110>)
 80028a0:	78da      	ldrb	r2, [r3, #3]
 80028a2:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <DHCP_init+0x110>)
 80028a4:	791b      	ldrb	r3, [r3, #4]
 80028a6:	4053      	eors	r3, r2
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <DHCP_init+0x110>)
 80028ac:	795b      	ldrb	r3, [r3, #5]
 80028ae:	4053      	eors	r3, r2
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <DHCP_init+0x11c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a10      	ldr	r2, [pc, #64]	@ (80028fc <DHCP_init+0x11c>)
 80028bc:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	2204      	movs	r2, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80028ca:	f7fe fab5 	bl	8000e38 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80028ce:	f107 030c 	add.w	r3, r7, #12
 80028d2:	2204      	movs	r2, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80028da:	f7fe faad 	bl	8000e38 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80028de:	f000 f813 	bl	8002908 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <DHCP_init+0x124>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000020c 	.word	0x2000020c
 80028f4:	200001dc 	.word	0x200001dc
 80028f8:	20000208 	.word	0x20000208
 80028fc:	20000204 	.word	0x20000204
 8002900:	12345678 	.word	0x12345678
 8002904:	200001fc 	.word	0x200001fc

08002908 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <reset_DHCP_timeout+0x20>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <reset_DHCP_timeout+0x24>)
 8002914:	220a      	movs	r2, #10
 8002916:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <reset_DHCP_timeout+0x28>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	20000200 	.word	0x20000200
 800292c:	20000024 	.word	0x20000024
 8002930:	200001fd 	.word	0x200001fd

08002934 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <getIPfromDHCP+0x3c>)
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3301      	adds	r3, #1
 8002948:	4a09      	ldr	r2, [pc, #36]	@ (8002970 <getIPfromDHCP+0x3c>)
 800294a:	7852      	ldrb	r2, [r2, #1]
 800294c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3302      	adds	r3, #2
 8002952:	4a07      	ldr	r2, [pc, #28]	@ (8002970 <getIPfromDHCP+0x3c>)
 8002954:	7892      	ldrb	r2, [r2, #2]
 8002956:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3303      	adds	r3, #3
 800295c:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <getIPfromDHCP+0x3c>)
 800295e:	78d2      	ldrb	r2, [r2, #3]
 8002960:	701a      	strb	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	200001ec 	.word	0x200001ec

08002974 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 800297c:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <getGWfromDHCP+0x3c>)
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3301      	adds	r3, #1
 8002988:	4a09      	ldr	r2, [pc, #36]	@ (80029b0 <getGWfromDHCP+0x3c>)
 800298a:	7852      	ldrb	r2, [r2, #1]
 800298c:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3302      	adds	r3, #2
 8002992:	4a07      	ldr	r2, [pc, #28]	@ (80029b0 <getGWfromDHCP+0x3c>)
 8002994:	7892      	ldrb	r2, [r2, #2]
 8002996:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3303      	adds	r3, #3
 800299c:	4a04      	ldr	r2, [pc, #16]	@ (80029b0 <getGWfromDHCP+0x3c>)
 800299e:	78d2      	ldrb	r2, [r2, #3]
 80029a0:	701a      	strb	r2, [r3, #0]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	200001f0 	.word	0x200001f0

080029b4 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 80029bc:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <getSNfromDHCP+0x3c>)
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3301      	adds	r3, #1
 80029c8:	4a09      	ldr	r2, [pc, #36]	@ (80029f0 <getSNfromDHCP+0x3c>)
 80029ca:	7852      	ldrb	r2, [r2, #1]
 80029cc:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3302      	adds	r3, #2
 80029d2:	4a07      	ldr	r2, [pc, #28]	@ (80029f0 <getSNfromDHCP+0x3c>)
 80029d4:	7892      	ldrb	r2, [r2, #2]
 80029d6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3303      	adds	r3, #3
 80029dc:	4a04      	ldr	r2, [pc, #16]	@ (80029f0 <getSNfromDHCP+0x3c>)
 80029de:	78d2      	ldrb	r2, [r2, #3]
 80029e0:	701a      	strb	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	200001f4 	.word	0x200001f4

080029f4 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 80029fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <getDNSfromDHCP+0x3c>)
 80029fe:	781a      	ldrb	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3301      	adds	r3, #1
 8002a08:	4a09      	ldr	r2, [pc, #36]	@ (8002a30 <getDNSfromDHCP+0x3c>)
 8002a0a:	7852      	ldrb	r2, [r2, #1]
 8002a0c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3302      	adds	r3, #2
 8002a12:	4a07      	ldr	r2, [pc, #28]	@ (8002a30 <getDNSfromDHCP+0x3c>)
 8002a14:	7892      	ldrb	r2, [r2, #2]
 8002a16:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3303      	adds	r3, #3
 8002a1c:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <getDNSfromDHCP+0x3c>)
 8002a1e:	78d2      	ldrb	r2, [r2, #3]
 8002a20:	701a      	strb	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	200001f8 	.word	0x200001f8

08002a34 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	d803      	bhi.n	8002a54 <NibbleToHex+0x20>
    return nibble + '0';
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	3330      	adds	r3, #48	@ 0x30
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e002      	b.n	8002a5a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	3337      	adds	r3, #55	@ 0x37
 8002a58:	b2db      	uxtb	r3, r3
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b08d      	sub	sp, #52	@ 0x34
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	71fb      	strb	r3, [r7, #7]
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71bb      	strb	r3, [r7, #6]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	80bb      	strh	r3, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d902      	bls.n	8002a92 <socket+0x2a>
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a90:	e145      	b.n	8002d1e <socket+0x2b6>
	switch(protocol)
 8002a92:	79bb      	ldrb	r3, [r7, #6]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d005      	beq.n	8002aa4 <socket+0x3c>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	dd11      	ble.n	8002ac0 <socket+0x58>
 8002a9c:	3b02      	subs	r3, #2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d80e      	bhi.n	8002ac0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002aa2:	e011      	b.n	8002ac8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002aa4:	f107 030c 	add.w	r3, r7, #12
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002ab0:	f7fe f962 	bl	8000d78 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <socket+0x5e>
 8002aba:	f06f 0302 	mvn.w	r3, #2
 8002abe:	e12e      	b.n	8002d1e <socket+0x2b6>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002ac0:	f06f 0304 	mvn.w	r3, #4
 8002ac4:	e12b      	b.n	8002d1e <socket+0x2b6>
	    break;
 8002ac6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <socket+0x70>
 8002ad2:	f06f 0305 	mvn.w	r3, #5
 8002ad6:	e122      	b.n	8002d1e <socket+0x2b6>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d028      	beq.n	8002b30 <socket+0xc8>
	{
   	switch(protocol)
 8002ade:	79bb      	ldrb	r3, [r7, #6]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d002      	beq.n	8002aea <socket+0x82>
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d008      	beq.n	8002afa <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002ae8:	e022      	b.n	8002b30 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d11a      	bne.n	8002b2a <socket+0xc2>
 8002af4:	f06f 0305 	mvn.w	r3, #5
 8002af8:	e111      	b.n	8002d1e <socket+0x2b6>
   	      if(flag & SF_IGMP_VER2)
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	db02      	blt.n	8002b12 <socket+0xaa>
 8002b0c:	f06f 0305 	mvn.w	r3, #5
 8002b10:	e105      	b.n	8002d1e <socket+0x2b6>
      	      if(flag & SF_UNI_BLOCK)
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db04      	blt.n	8002b2e <socket+0xc6>
 8002b24:	f06f 0305 	mvn.w	r3, #5
 8002b28:	e0f9      	b.n	8002d1e <socket+0x2b6>
   	      break;
 8002b2a:	bf00      	nop
 8002b2c:	e000      	b.n	8002b30 <socket+0xc8>
   	      break;
 8002b2e:	bf00      	nop
   	}
   }
	// ----------
	wiz_NetInfo check;
	wizchip_getnetinfo(&check);
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 fca3 	bl	8004480 <wizchip_getnetinfo>
	printf("IP configuree : %d.%d.%d.%d\r\n", check.ip[0], check.ip[1], check.ip[2], check.ip[3]);
 8002b3a:	7dbb      	ldrb	r3, [r7, #22]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	461a      	mov	r2, r3
 8002b42:	7e3b      	ldrb	r3, [r7, #24]
 8002b44:	4618      	mov	r0, r3
 8002b46:	7e7b      	ldrb	r3, [r7, #25]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4876      	ldr	r0, [pc, #472]	@ (8002d28 <socket+0x2c0>)
 8002b4e:	f004 fdc1 	bl	80076d4 <iprintf>
	// ----------

	close(sn);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f8f3 	bl	8002d40 <close>

	// ----------
	wizchip_getnetinfo(&check);
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f001 fc8e 	bl	8004480 <wizchip_getnetinfo>
	printf("IP configuree : %d.%d.%d.%d\r\n", check.ip[0], check.ip[1], check.ip[2], check.ip[3]);
 8002b64:	7dbb      	ldrb	r3, [r7, #22]
 8002b66:	4619      	mov	r1, r3
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	7e3b      	ldrb	r3, [r7, #24]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	7e7b      	ldrb	r3, [r7, #25]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	4603      	mov	r3, r0
 8002b76:	486c      	ldr	r0, [pc, #432]	@ (8002d28 <socket+0x2c0>)
 8002b78:	f004 fdac 	bl	80076d4 <iprintf>

	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	3301      	adds	r3, #1
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4618      	mov	r0, r3
 8002b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b8a:	f023 030f 	bic.w	r3, r3, #15
 8002b8e:	b25a      	sxtb	r2, r3
 8002b90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	b25b      	sxtb	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7fe f89e 	bl	8000cdc <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002ba0:	88bb      	ldrh	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d110      	bne.n	8002bc8 <socket+0x160>
	{
	   port = sock_any_port++;
 8002ba6:	4b61      	ldr	r3, [pc, #388]	@ (8002d2c <socket+0x2c4>)
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	b291      	uxth	r1, r2
 8002bae:	4a5f      	ldr	r2, [pc, #380]	@ (8002d2c <socket+0x2c4>)
 8002bb0:	8011      	strh	r1, [r2, #0]
 8002bb2:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8002d2c <socket+0x2c4>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d103      	bne.n	8002bc8 <socket+0x160>
 8002bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8002d2c <socket+0x2c4>)
 8002bc2:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002bc6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	3301      	adds	r3, #1
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	88bb      	ldrh	r3, [r7, #4]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f7fe f87b 	bl	8000cdc <WIZCHIP_WRITE>
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	3301      	adds	r3, #1
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	88bb      	ldrh	r3, [r7, #4]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f7fe f86e 	bl	8000cdc <WIZCHIP_WRITE>

   // ----------
   	wizchip_getnetinfo(&check);
 8002c00:	f107 0310 	add.w	r3, r7, #16
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 fc3b 	bl	8004480 <wizchip_getnetinfo>
   	printf("IP configuree : %d.%d.%d.%d\r\n", check.ip[0], check.ip[1], check.ip[2], check.ip[3]);
 8002c0a:	7dbb      	ldrb	r3, [r7, #22]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	461a      	mov	r2, r3
 8002c12:	7e3b      	ldrb	r3, [r7, #24]
 8002c14:	4618      	mov	r0, r3
 8002c16:	7e7b      	ldrb	r3, [r7, #25]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4842      	ldr	r0, [pc, #264]	@ (8002d28 <socket+0x2c0>)
 8002c1e:	f004 fd59 	bl	80076d4 <iprintf>
   	// ----------

   setSn_CR(sn,Sn_CR_OPEN);
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	3301      	adds	r3, #1
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe f853 	bl	8000cdc <WIZCHIP_WRITE>

   // ----------
   	wizchip_getnetinfo(&check);
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 fc20 	bl	8004480 <wizchip_getnetinfo>
   	printf("IP configuree : %d.%d.%d.%d\r\n", check.ip[0], check.ip[1], check.ip[2], check.ip[3]);
 8002c40:	7dbb      	ldrb	r3, [r7, #22]
 8002c42:	4619      	mov	r1, r3
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	461a      	mov	r2, r3
 8002c48:	7e3b      	ldrb	r3, [r7, #24]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	7e7b      	ldrb	r3, [r7, #25]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	4603      	mov	r3, r0
 8002c52:	4835      	ldr	r0, [pc, #212]	@ (8002d28 <socket+0x2c0>)
 8002c54:	f004 fd3e 	bl	80076d4 <iprintf>
   	// ----------

   while(getSn_CR(sn));
 8002c58:	bf00      	nop
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	3301      	adds	r3, #1
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd ffec 	bl	8000c44 <WIZCHIP_READ>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f3      	bne.n	8002c5a <socket+0x1f2>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2201      	movs	r2, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	4b2b      	ldr	r3, [pc, #172]	@ (8002d30 <socket+0x2c8>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	4013      	ands	r3, r2
 8002c88:	b21b      	sxth	r3, r3
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <socket+0x2c8>)
 8002c8e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	f003 0201 	and.w	r2, r3, #1
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	b21a      	sxth	r2, r3
 8002c9e:	4b24      	ldr	r3, [pc, #144]	@ (8002d30 <socket+0x2c8>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	b21b      	sxth	r3, r3
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	4b21      	ldr	r3, [pc, #132]	@ (8002d30 <socket+0x2c8>)
 8002cac:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	b21a      	sxth	r2, r3
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <socket+0x2cc>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b21b      	sxth	r3, r3
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	b21b      	sxth	r3, r3
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <socket+0x2cc>)
 8002cca:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	4a1a      	ldr	r2, [pc, #104]	@ (8002d38 <socket+0x2d0>)
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	@ (8002d3c <socket+0x2d4>)
 8002cda:	2100      	movs	r1, #0
 8002cdc:	54d1      	strb	r1, [r2, r3]
   //

   // ----------
   	wizchip_getnetinfo(&check);
 8002cde:	f107 0310 	add.w	r3, r7, #16
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 fbcc 	bl	8004480 <wizchip_getnetinfo>
   	printf("IP configuree : %d.%d.%d.%d\r\n", check.ip[0], check.ip[1], check.ip[2], check.ip[3]);
 8002ce8:	7dbb      	ldrb	r3, [r7, #22]
 8002cea:	4619      	mov	r1, r3
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	7e3b      	ldrb	r3, [r7, #24]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	7e7b      	ldrb	r3, [r7, #25]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	480b      	ldr	r0, [pc, #44]	@ (8002d28 <socket+0x2c0>)
 8002cfc:	f004 fcea 	bl	80076d4 <iprintf>
   	// ----------

   while(getSn_SR(sn) == SOCK_CLOSED);
 8002d00:	bf00      	nop
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	3301      	adds	r3, #1
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd ff98 	bl	8000c44 <WIZCHIP_READ>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f3      	beq.n	8002d02 <socket+0x29a>
   return (int8_t)sn;
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002d1e:	4618      	mov	r0, r3
 8002d20:	372c      	adds	r7, #44	@ 0x2c
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	08008874 	.word	0x08008874
 8002d2c:	2000003c 	.word	0x2000003c
 8002d30:	20000212 	.word	0x20000212
 8002d34:	20000214 	.word	0x20000214
 8002d38:	20000218 	.word	0x20000218
 8002d3c:	20000228 	.word	0x20000228

08002d40 <close>:

int8_t close(uint8_t sn)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d902      	bls.n	8002d56 <close+0x16>
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
 8002d54:	e055      	b.n	8002e02 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d62:	2110      	movs	r1, #16
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd ffb9 	bl	8000cdc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002d6a:	bf00      	nop
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	3301      	adds	r3, #1
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd ff63 	bl	8000c44 <WIZCHIP_READ>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f3      	bne.n	8002d6c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3301      	adds	r3, #1
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002d90:	211f      	movs	r1, #31
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd ffa2 	bl	8000cdc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	b21b      	sxth	r3, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	b21a      	sxth	r2, r3
 8002da6:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <close+0xcc>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b21b      	sxth	r3, r3
 8002dac:	4013      	ands	r3, r2
 8002dae:	b21b      	sxth	r3, r3
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <close+0xcc>)
 8002db4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	2201      	movs	r2, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <close+0xd0>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b21b      	sxth	r3, r3
 8002dca:	4013      	ands	r3, r2
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <close+0xd0>)
 8002dd2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8002e14 <close+0xd4>)
 8002dd8:	2100      	movs	r1, #0
 8002dda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e18 <close+0xd8>)
 8002de2:	2100      	movs	r1, #0
 8002de4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002de6:	bf00      	nop
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	3301      	adds	r3, #1
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd ff25 	bl	8000c44 <WIZCHIP_READ>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f3      	bne.n	8002de8 <close+0xa8>
	return SOCK_OK;
 8002e00:	2301      	movs	r3, #1
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000212 	.word	0x20000212
 8002e10:	20000214 	.word	0x20000214
 8002e14:	20000218 	.word	0x20000218
 8002e18:	20000228 	.word	0x20000228

08002e1c <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	4603      	mov	r3, r0
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d902      	bls.n	8002e42 <sendto+0x26>
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e40:	e11a      	b.n	8003078 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	3301      	adds	r3, #1
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fefa 	bl	8000c44 <WIZCHIP_READ>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b02      	subs	r3, #2
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d902      	bls.n	8002e62 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002e5c:	f06f 0304 	mvn.w	r3, #4
 8002e60:	e10a      	b.n	8003078 <sendto+0x25c>
         break;
 8002e62:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002e64:	89bb      	ldrh	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <sendto+0x54>
 8002e6a:	f06f 030d 	mvn.w	r3, #13
 8002e6e:	e103      	b.n	8003078 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	3201      	adds	r2, #1
 8002e7e:	7812      	ldrb	r2, [r2, #0]
 8002e80:	4413      	add	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	3202      	adds	r2, #2
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	3203      	adds	r2, #3
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10e      	bne.n	8002ec4 <sendto+0xa8>
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	3301      	adds	r3, #1
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fec8 	bl	8000c44 <WIZCHIP_READ>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d002      	beq.n	8002ec4 <sendto+0xa8>
 8002ebe:	f06f 030b 	mvn.w	r3, #11
 8002ec2:	e0d9      	b.n	8003078 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002ec4:	8c3b      	ldrh	r3, [r7, #32]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10e      	bne.n	8002ee8 <sendto+0xcc>
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	3301      	adds	r3, #1
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd feb6 	bl	8000c44 <WIZCHIP_READ>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d002      	beq.n	8002ee8 <sendto+0xcc>
 8002ee2:	f06f 030a 	mvn.w	r3, #10
 8002ee6:	e0c7      	b.n	8003078 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	3301      	adds	r3, #1
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fea5 	bl	8000c44 <WIZCHIP_READ>
 8002efa:	4603      	mov	r3, r0
 8002efc:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b42      	cmp	r3, #66	@ 0x42
 8002f02:	d008      	beq.n	8002f16 <sendto+0xfa>
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b22      	cmp	r3, #34	@ 0x22
 8002f08:	d005      	beq.n	8002f16 <sendto+0xfa>
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	2b32      	cmp	r3, #50	@ 0x32
 8002f0e:	d002      	beq.n	8002f16 <sendto+0xfa>
 8002f10:	f06f 0306 	mvn.w	r3, #6
 8002f14:	e0b0      	b.n	8003078 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002f22:	2204      	movs	r2, #4
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd ff86 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	3301      	adds	r3, #1
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f38:	461a      	mov	r2, r3
 8002f3a:	8c3b      	ldrh	r3, [r7, #32]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	4619      	mov	r1, r3
 8002f44:	4610      	mov	r0, r2
 8002f46:	f7fd fec9 	bl	8000cdc <WIZCHIP_WRITE>
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	3301      	adds	r3, #1
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8002f56:	461a      	mov	r2, r3
 8002f58:	8c3b      	ldrh	r3, [r7, #32]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f7fd febc 	bl	8000cdc <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	3301      	adds	r3, #1
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fe67 	bl	8000c44 <WIZCHIP_READ>
 8002f76:	4603      	mov	r3, r0
 8002f78:	029b      	lsls	r3, r3, #10
 8002f7a:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002f7c:	89ba      	ldrh	r2, [r7, #12]
 8002f7e:	8abb      	ldrh	r3, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d901      	bls.n	8002f88 <sendto+0x16c>
 8002f84:	8abb      	ldrh	r3, [r7, #20]
 8002f86:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd ffb4 	bl	8000ef8 <getSn_TX_FSR>
 8002f90:	4603      	mov	r3, r0
 8002f92:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	3301      	adds	r3, #1
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd fe4f 	bl	8000c44 <WIZCHIP_READ>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <sendto+0x196>
 8002fac:	f06f 0303 	mvn.w	r3, #3
 8002fb0:	e062      	b.n	8003078 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002fb2:	4b33      	ldr	r3, [pc, #204]	@ (8003080 <sendto+0x264>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	fa42 f303 	asr.w	r3, r2, r3
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <sendto+0x1b6>
 8002fc6:	89ba      	ldrh	r2, [r7, #12]
 8002fc8:	8abb      	ldrh	r3, [r7, #20]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d901      	bls.n	8002fd2 <sendto+0x1b6>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e052      	b.n	8003078 <sendto+0x25c>
      if(len <= freesize) break;
 8002fd2:	89ba      	ldrh	r2, [r7, #12]
 8002fd4:	8abb      	ldrh	r3, [r7, #20]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d900      	bls.n	8002fdc <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8002fda:	e7d5      	b.n	8002f88 <sendto+0x16c>
      if(len <= freesize) break;
 8002fdc:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8002fde:	89ba      	ldrh	r2, [r7, #12]
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe f819 	bl	800101c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	3301      	adds	r3, #1
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ff6:	2120      	movs	r1, #32
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fe6f 	bl	8000cdc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002ffe:	bf00      	nop
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	3301      	adds	r3, #1
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fe19 	bl	8000c44 <WIZCHIP_READ>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f3      	bne.n	8003000 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	3301      	adds	r3, #1
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fe0d 	bl	8000c44 <WIZCHIP_READ>
 800302a:	4603      	mov	r3, r0
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3301      	adds	r3, #1
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003048:	2110      	movs	r1, #16
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fe46 	bl	8000cdc <WIZCHIP_WRITE>
         break;
 8003050:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003052:	89bb      	ldrh	r3, [r7, #12]
 8003054:	e010      	b.n	8003078 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0db      	beq.n	8003018 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3301      	adds	r3, #1
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800306c:	2108      	movs	r1, #8
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd fe34 	bl	8000cdc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8003074:	f06f 030c 	mvn.w	r3, #12
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000212 	.word	0x20000212

08003084 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	4603      	mov	r3, r0
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	4613      	mov	r3, r2
 8003094:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8003096:	2300      	movs	r3, #0
 8003098:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d902      	bls.n	80030a6 <recvfrom+0x22>
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295
 80030a4:	e1d2      	b.n	800344c <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	3301      	adds	r3, #1
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fdc8 	bl	8000c44 <WIZCHIP_READ>
 80030b4:	4603      	mov	r3, r0
 80030b6:	777b      	strb	r3, [r7, #29]
 80030b8:	7f7b      	ldrb	r3, [r7, #29]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b02      	subs	r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d902      	bls.n	80030ca <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80030c4:	f06f 0304 	mvn.w	r3, #4
 80030c8:	e1c0      	b.n	800344c <recvfrom+0x3c8>
         break;
 80030ca:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80030cc:	89bb      	ldrh	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <recvfrom+0x54>
 80030d2:	f06f 030d 	mvn.w	r3, #13
 80030d6:	e1b9      	b.n	800344c <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	4a87      	ldr	r2, [pc, #540]	@ (80032f8 <recvfrom+0x274>)
 80030dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d128      	bne.n	8003136 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd ff4f 	bl	8000f8a <getSn_RX_RSR>
 80030ec:	4603      	mov	r3, r0
 80030ee:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3301      	adds	r3, #1
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fda1 	bl	8000c44 <WIZCHIP_READ>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <recvfrom+0x8a>
 8003108:	f06f 0303 	mvn.w	r3, #3
 800310c:	e19e      	b.n	800344c <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800310e:	4b7b      	ldr	r3, [pc, #492]	@ (80032fc <recvfrom+0x278>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	fa42 f303 	asr.w	r3, r2, r3
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <recvfrom+0xa8>
 8003122:	8bfb      	ldrh	r3, [r7, #30]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <recvfrom+0xa8>
 8003128:	2300      	movs	r3, #0
 800312a:	e18f      	b.n	800344c <recvfrom+0x3c8>
         if(pack_len != 0) break;
 800312c:	8bfb      	ldrh	r3, [r7, #30]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d100      	bne.n	8003134 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8003132:	e7d7      	b.n	80030e4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003134:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8003136:	7f7b      	ldrb	r3, [r7, #29]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	2b04      	cmp	r3, #4
 800313e:	d078      	beq.n	8003232 <recvfrom+0x1ae>
 8003140:	2b04      	cmp	r3, #4
 8003142:	f300 8140 	bgt.w	80033c6 <recvfrom+0x342>
 8003146:	2b02      	cmp	r3, #2
 8003148:	d003      	beq.n	8003152 <recvfrom+0xce>
 800314a:	2b03      	cmp	r3, #3
 800314c:	f000 80da 	beq.w	8003304 <recvfrom+0x280>
 8003150:	e139      	b.n	80033c6 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	4a68      	ldr	r2, [pc, #416]	@ (80032f8 <recvfrom+0x274>)
 8003156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d151      	bne.n	8003202 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 800315e:	f107 0114 	add.w	r1, r7, #20
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2208      	movs	r2, #8
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd ffb2 	bl	80010d0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	3301      	adds	r3, #1
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003178:	2140      	movs	r1, #64	@ 0x40
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd fdae 	bl	8000cdc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003180:	bf00      	nop
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	3301      	adds	r3, #1
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd fd58 	bl	8000c44 <WIZCHIP_READ>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f3      	bne.n	8003182 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800319a:	7d3a      	ldrb	r2, [r7, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3301      	adds	r3, #1
 80031a4:	7d7a      	ldrb	r2, [r7, #21]
 80031a6:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3302      	adds	r3, #2
 80031ac:	7dba      	ldrb	r2, [r7, #22]
 80031ae:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3303      	adds	r3, #3
 80031b4:	7dfa      	ldrb	r2, [r7, #23]
 80031b6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80031b8:	7e3b      	ldrb	r3, [r7, #24]
 80031ba:	461a      	mov	r2, r3
 80031bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031be:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	7e7a      	ldrb	r2, [r7, #25]
 80031ca:	4413      	add	r3, r2
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d0:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80031d2:	7eba      	ldrb	r2, [r7, #26]
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	4611      	mov	r1, r2
 80031d8:	4a47      	ldr	r2, [pc, #284]	@ (80032f8 <recvfrom+0x274>)
 80031da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	4a45      	ldr	r2, [pc, #276]	@ (80032f8 <recvfrom+0x274>)
 80031e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	7efb      	ldrb	r3, [r7, #27]
 80031ec:	4619      	mov	r1, r3
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	440a      	add	r2, r1
 80031f2:	b291      	uxth	r1, r2
 80031f4:	4a40      	ldr	r2, [pc, #256]	@ (80032f8 <recvfrom+0x274>)
 80031f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	4a40      	ldr	r2, [pc, #256]	@ (8003300 <recvfrom+0x27c>)
 80031fe:	2180      	movs	r1, #128	@ 0x80
 8003200:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	4a3c      	ldr	r2, [pc, #240]	@ (80032f8 <recvfrom+0x274>)
 8003206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800320a:	89ba      	ldrh	r2, [r7, #12]
 800320c:	429a      	cmp	r2, r3
 800320e:	d202      	bcs.n	8003216 <recvfrom+0x192>
 8003210:	89bb      	ldrh	r3, [r7, #12]
 8003212:	83fb      	strh	r3, [r7, #30]
 8003214:	e004      	b.n	8003220 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	4a37      	ldr	r2, [pc, #220]	@ (80032f8 <recvfrom+0x274>)
 800321a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800321e:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8003220:	8bfb      	ldrh	r3, [r7, #30]
 8003222:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003224:	8bfa      	ldrh	r2, [r7, #30]
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd ff50 	bl	80010d0 <wiz_recv_data>
			break;
 8003230:	e0d5      	b.n	80033de <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	4a30      	ldr	r2, [pc, #192]	@ (80032f8 <recvfrom+0x274>)
 8003236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d145      	bne.n	80032ca <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 800323e:	f107 0114 	add.w	r1, r7, #20
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2202      	movs	r2, #2
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd ff42 	bl	80010d0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3301      	adds	r3, #1
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003258:	2140      	movs	r1, #64	@ 0x40
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd fd3e 	bl	8000cdc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003260:	bf00      	nop
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	3301      	adds	r3, #1
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd fce8 	bl	8000c44 <WIZCHIP_READ>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f3      	bne.n	8003262 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800327a:	7d3a      	ldrb	r2, [r7, #20]
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <recvfrom+0x274>)
 8003282:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	4a1b      	ldr	r2, [pc, #108]	@ (80032f8 <recvfrom+0x274>)
 800328a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	b29b      	uxth	r3, r3
 8003292:	7d7a      	ldrb	r2, [r7, #21]
 8003294:	4413      	add	r3, r2
 8003296:	b29a      	uxth	r2, r3
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	3a02      	subs	r2, #2
 800329c:	b291      	uxth	r1, r2
 800329e:	4a16      	ldr	r2, [pc, #88]	@ (80032f8 <recvfrom+0x274>)
 80032a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <recvfrom+0x274>)
 80032a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ac:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d906      	bls.n	80032c2 <recvfrom+0x23e>
   			{
   			   close(sn);
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fd42 	bl	8002d40 <close>
   			   return SOCKFATAL_PACKLEN;
 80032bc:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 80032c0:	e0c4      	b.n	800344c <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003300 <recvfrom+0x27c>)
 80032c6:	2180      	movs	r1, #128	@ 0x80
 80032c8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	4a0a      	ldr	r2, [pc, #40]	@ (80032f8 <recvfrom+0x274>)
 80032ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d2:	89ba      	ldrh	r2, [r7, #12]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d202      	bcs.n	80032de <recvfrom+0x25a>
 80032d8:	89bb      	ldrh	r3, [r7, #12]
 80032da:	83fb      	strh	r3, [r7, #30]
 80032dc:	e004      	b.n	80032e8 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	4a05      	ldr	r2, [pc, #20]	@ (80032f8 <recvfrom+0x274>)
 80032e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032e6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80032e8:	8bfa      	ldrh	r2, [r7, #30]
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd feee 	bl	80010d0 <wiz_recv_data>
		   break;
 80032f4:	e073      	b.n	80033de <recvfrom+0x35a>
 80032f6:	bf00      	nop
 80032f8:	20000218 	.word	0x20000218
 80032fc:	20000212 	.word	0x20000212
 8003300:	20000228 	.word	0x20000228
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	4a53      	ldr	r2, [pc, #332]	@ (8003454 <recvfrom+0x3d0>)
 8003308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d144      	bne.n	800339a <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8003310:	f107 0114 	add.w	r1, r7, #20
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2206      	movs	r2, #6
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fed9 	bl	80010d0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	3301      	adds	r3, #1
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800332a:	2140      	movs	r1, #64	@ 0x40
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd fcd5 	bl	8000cdc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003332:	bf00      	nop
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	3301      	adds	r3, #1
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd fc7f 	bl	8000c44 <WIZCHIP_READ>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f3      	bne.n	8003334 <recvfrom+0x2b0>
   			addr[0] = head[0];
 800334c:	7d3a      	ldrb	r2, [r7, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3301      	adds	r3, #1
 8003356:	7d7a      	ldrb	r2, [r7, #21]
 8003358:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3302      	adds	r3, #2
 800335e:	7dba      	ldrb	r2, [r7, #22]
 8003360:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3303      	adds	r3, #3
 8003366:	7dfa      	ldrb	r2, [r7, #23]
 8003368:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800336a:	7e3a      	ldrb	r2, [r7, #24]
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	4611      	mov	r1, r2
 8003370:	4a38      	ldr	r2, [pc, #224]	@ (8003454 <recvfrom+0x3d0>)
 8003372:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	4a36      	ldr	r2, [pc, #216]	@ (8003454 <recvfrom+0x3d0>)
 800337a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	b29a      	uxth	r2, r3
 8003382:	7e7b      	ldrb	r3, [r7, #25]
 8003384:	4619      	mov	r1, r3
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	440a      	add	r2, r1
 800338a:	b291      	uxth	r1, r2
 800338c:	4a31      	ldr	r2, [pc, #196]	@ (8003454 <recvfrom+0x3d0>)
 800338e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	4a30      	ldr	r2, [pc, #192]	@ (8003458 <recvfrom+0x3d4>)
 8003396:	2180      	movs	r1, #128	@ 0x80
 8003398:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	4a2d      	ldr	r2, [pc, #180]	@ (8003454 <recvfrom+0x3d0>)
 800339e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a2:	89ba      	ldrh	r2, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d202      	bcs.n	80033ae <recvfrom+0x32a>
 80033a8:	89bb      	ldrh	r3, [r7, #12]
 80033aa:	83fb      	strh	r3, [r7, #30]
 80033ac:	e004      	b.n	80033b8 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	4a28      	ldr	r2, [pc, #160]	@ (8003454 <recvfrom+0x3d0>)
 80033b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033b6:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80033b8:	8bfa      	ldrh	r2, [r7, #30]
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd fe86 	bl	80010d0 <wiz_recv_data>
			break;
 80033c4:	e00b      	b.n	80033de <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80033c6:	8bfa      	ldrh	r2, [r7, #30]
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fed9 	bl	8001184 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	491f      	ldr	r1, [pc, #124]	@ (8003454 <recvfrom+0x3d0>)
 80033d6:	8bfa      	ldrh	r2, [r7, #30]
 80033d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80033dc:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	3301      	adds	r3, #1
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80033ea:	2140      	movs	r1, #64	@ 0x40
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd fc75 	bl	8000cdc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80033f2:	bf00      	nop
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	3301      	adds	r3, #1
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fc1f 	bl	8000c44 <WIZCHIP_READ>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f3      	bne.n	80033f4 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	4a11      	ldr	r2, [pc, #68]	@ (8003454 <recvfrom+0x3d0>)
 8003410:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	8bfa      	ldrh	r2, [r7, #30]
 8003418:	1a8a      	subs	r2, r1, r2
 800341a:	b291      	uxth	r1, r2
 800341c:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <recvfrom+0x3d0>)
 800341e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	4a0b      	ldr	r2, [pc, #44]	@ (8003454 <recvfrom+0x3d0>)
 8003426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <recvfrom+0x3d4>)
 8003432:	5cd2      	ldrb	r2, [r2, r3]
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	b2d1      	uxtb	r1, r2
 800343c:	4a06      	ldr	r2, [pc, #24]	@ (8003458 <recvfrom+0x3d4>)
 800343e:	54d1      	strb	r1, [r2, r3]
 8003440:	e003      	b.n	800344a <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	4a04      	ldr	r2, [pc, #16]	@ (8003458 <recvfrom+0x3d4>)
 8003446:	2100      	movs	r1, #0
 8003448:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800344a:	8bfb      	ldrh	r3, [r7, #30]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000218 	.word	0x20000218
 8003458:	20000228 	.word	0x20000228

0800345c <dynamic_host_configuration>:
 * @brief Configures the W5500 using DHCP for dynamic IP assignment.
 * @param mac Source MAC address
 * @retval None
 */
void dynamic_host_configuration(uint8_t mac[6])
{
 800345c:	b580      	push	{r7, lr}
 800345e:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 8003462:	af00      	add	r7, sp, #0
 8003464:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8003468:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800346c:	6018      	str	r0, [r3, #0]
	uint8_t dhcp_buffer[1024];

    wiz_NetInfo net_info = {
 800346e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8003472:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8003476:	461a      	mov	r2, r3
 8003478:	2300      	movs	r3, #0
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	6053      	str	r3, [r2, #4]
 800347e:	6093      	str	r3, [r2, #8]
 8003480:	60d3      	str	r3, [r2, #12]
 8003482:	6113      	str	r3, [r2, #16]
 8003484:	f8c2 3013 	str.w	r3, [r2, #19]
        .mac  = {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]},  // Set MAC address
 8003488:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800348c:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	781a      	ldrb	r2, [r3, #0]
    wiz_NetInfo net_info = {
 8003494:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8003498:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80034a2:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	785a      	ldrb	r2, [r3, #1]
 80034aa:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80034ae:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80034b2:	705a      	strb	r2, [r3, #1]
 80034b4:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80034b8:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	789a      	ldrb	r2, [r3, #2]
 80034c0:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80034c4:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80034c8:	709a      	strb	r2, [r3, #2]
 80034ca:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80034ce:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	78da      	ldrb	r2, [r3, #3]
 80034d6:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80034da:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80034de:	70da      	strb	r2, [r3, #3]
 80034e0:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80034e4:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	791a      	ldrb	r2, [r3, #4]
 80034ec:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80034f0:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80034f4:	711a      	strb	r2, [r3, #4]
 80034f6:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80034fa:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	795a      	ldrb	r2, [r3, #5]
 8003502:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8003506:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 800350a:	715a      	strb	r2, [r3, #5]
 800350c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8003510:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8003514:	2202      	movs	r2, #2
 8003516:	759a      	strb	r2, [r3, #22]
        .dhcp = NETINFO_DHCP                                      // Enable DHCP mode
    };

    printf("Setting up dynamic host configuration...\r\n");
 8003518:	4826      	ldr	r0, [pc, #152]	@ (80035b4 <dynamic_host_configuration+0x158>)
 800351a:	f004 f943 	bl	80077a4 <puts>


    // don't buffer the output of printf
    setbuf(stdout, NULL);
 800351e:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <dynamic_host_configuration+0x15c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f004 f944 	bl	80077b4 <setbuf>


    // Set the MAC address before using DHCP
    setSHAR(net_info.mac);
 800352c:	f107 0308 	add.w	r3, r7, #8
 8003530:	2206      	movs	r2, #6
 8003532:	4619      	mov	r1, r3
 8003534:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003538:	f7fd fc7e 	bl	8000e38 <WIZCHIP_WRITE_BUF>

    // Initialize DHCP
    DHCP_init(DHCP_SOCKET, dhcp_buffer);
 800353c:	f107 0320 	add.w	r3, r7, #32
 8003540:	4619      	mov	r1, r3
 8003542:	2000      	movs	r0, #0
 8003544:	f7ff f94c 	bl	80027e0 <DHCP_init>

    // Register DHCP callback functions if needed
    reg_dhcp_cbfunc(callback_ip_assigned, callback_ip_assigned, callback_ip_conflict);
 8003548:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <dynamic_host_configuration+0x160>)
 800354a:	491d      	ldr	r1, [pc, #116]	@ (80035c0 <dynamic_host_configuration+0x164>)
 800354c:	481c      	ldr	r0, [pc, #112]	@ (80035c0 <dynamic_host_configuration+0x164>)
 800354e:	f7fd fea5 	bl	800129c <reg_dhcp_cbfunc>

    // Run DHCP process in a loop until IP is assigned
    while ((!ip_assigned)) {
 8003552:	e001      	b.n	8003558 <dynamic_host_configuration+0xfc>
        DHCP_run();
 8003554:	f7fe ff8c 	bl	8002470 <DHCP_run>
    while ((!ip_assigned)) {
 8003558:	4b1a      	ldr	r3, [pc, #104]	@ (80035c4 <dynamic_host_configuration+0x168>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f083 0301 	eor.w	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f5      	bne.n	8003554 <dynamic_host_configuration+0xf8>
    }

    // Retrieve IP, gateway, subnet mask, and DNS from DHCP
    getIPfromDHCP(net_info.ip);
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	3306      	adds	r3, #6
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f9e0 	bl	8002934 <getIPfromDHCP>
    getGWfromDHCP(net_info.gw);
 8003574:	f107 0308 	add.w	r3, r7, #8
 8003578:	330e      	adds	r3, #14
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f9fa 	bl	8002974 <getGWfromDHCP>
    getSNfromDHCP(net_info.sn);
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	330a      	adds	r3, #10
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fa14 	bl	80029b4 <getSNfromDHCP>
    getDNSfromDHCP(net_info.dns);
 800358c:	f107 0308 	add.w	r3, r7, #8
 8003590:	3312      	adds	r3, #18
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fa2e 	bl	80029f4 <getDNSfromDHCP>

    // Set network information obtained from DHCP
    wizchip_setnetinfo(&net_info);
 8003598:	f107 0308 	add.w	r3, r7, #8
 800359c:	4618      	mov	r0, r3
 800359e:	f000 ff2f 	bl	8004400 <wizchip_setnetinfo>

    printf("Dynamic IP configuration is done successfully.\r\n");
 80035a2:	4809      	ldr	r0, [pc, #36]	@ (80035c8 <dynamic_host_configuration+0x16c>)
 80035a4:	f004 f8fe 	bl	80077a4 <puts>
}
 80035a8:	bf00      	nop
 80035aa:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	080088f0 	.word	0x080088f0
 80035b8:	20000080 	.word	0x20000080
 80035bc:	080035e9 	.word	0x080035e9
 80035c0:	080035cd 	.word	0x080035cd
 80035c4:	20000230 	.word	0x20000230
 80035c8:	0800891c 	.word	0x0800891c

080035cc <callback_ip_assigned>:


void callback_ip_assigned()
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
    printf("DHCP: IP assigned\n");
 80035d0:	4803      	ldr	r0, [pc, #12]	@ (80035e0 <callback_ip_assigned+0x14>)
 80035d2:	f004 f8e7 	bl	80077a4 <puts>
    ip_assigned = true;
 80035d6:	4b03      	ldr	r3, [pc, #12]	@ (80035e4 <callback_ip_assigned+0x18>)
 80035d8:	2201      	movs	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	0800894c 	.word	0x0800894c
 80035e4:	20000230 	.word	0x20000230

080035e8 <callback_ip_conflict>:
{
    printf("DHCP: IP renewed\n");
}

void callback_ip_conflict()
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
    printf("DHCP: IP conflict detected\n");
 80035ec:	4802      	ldr	r0, [pc, #8]	@ (80035f8 <callback_ip_conflict+0x10>)
 80035ee:	f004 f8d9 	bl	80077a4 <puts>
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	08008974 	.word	0x08008974

080035fc <check_cable_presence>:
 *
 * This function continuously checks the status of the PHY link until the Ethernet cable is connected.
 *
 * @return void
 */
void check_cable_presence() {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
    uint8_t phy_status;
    int error_status;

    printf("\r\nChecking ethernet cable presence ...\r\n");
 8003602:	4815      	ldr	r0, [pc, #84]	@ (8003658 <check_cable_presence+0x5c>)
 8003604:	f004 f8ce 	bl	80077a4 <puts>

    do {
        // Get the PHY link status
        error_status = ctlwizchip(CW_GET_PHYLINK, (void*)&phy_status);
 8003608:	1cfb      	adds	r3, r7, #3
 800360a:	4619      	mov	r1, r3
 800360c:	200f      	movs	r0, #15
 800360e:	f000 fb1d 	bl	8003c4c <ctlwizchip>
 8003612:	4603      	mov	r3, r0
 8003614:	607b      	str	r3, [r7, #4]

        if (error_status == -1) {
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d103      	bne.n	8003626 <check_cable_presence+0x2a>
            printf("Failed to get PHY link info.\r\nTrying again...\r\n");
 800361e:	480f      	ldr	r0, [pc, #60]	@ (800365c <check_cable_presence+0x60>)
 8003620:	f004 f8c0 	bl	80077a4 <puts>
            continue;
 8003624:	e009      	b.n	800363a <check_cable_presence+0x3e>
        }

        // Check if the cable is not connected
        if (phy_status == PHY_LINK_OFF) {
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d106      	bne.n	800363a <check_cable_presence+0x3e>
            printf("Cable is not connected.\r\n");
 800362c:	480c      	ldr	r0, [pc, #48]	@ (8003660 <check_cable_presence+0x64>)
 800362e:	f004 f8b9 	bl	80077a4 <puts>
            HAL_Delay(1500);
 8003632:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003636:	f001 f875 	bl	8004724 <HAL_Delay>
        }
    } while (error_status == -1 || phy_status == PHY_LINK_OFF);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d0e2      	beq.n	8003608 <check_cable_presence+0xc>
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0df      	beq.n	8003608 <check_cable_presence+0xc>

    printf("Cable is connected.\r\n");
 8003648:	4806      	ldr	r0, [pc, #24]	@ (8003664 <check_cable_presence+0x68>)
 800364a:	f004 f8ab 	bl	80077a4 <puts>
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	08008990 	.word	0x08008990
 800365c:	080089b8 	.word	0x080089b8
 8003660:	080089e8 	.word	0x080089e8
 8003664:	08008a04 	.word	0x08008a04

08003668 <check_phy_status>:
 *
 * This function retrieves and prints the PHY link status and configuration, including mode, speed, and duplex settings.
 *
 * @return void
 */
void check_phy_status() {
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
    uint8_t phy_status;

    // Get the PHY link status
    if (ctlwizchip(CW_GET_PHYLINK, (void*)&phy_status) == -1) {
 800366e:	1dfb      	adds	r3, r7, #7
 8003670:	4619      	mov	r1, r3
 8003672:	200f      	movs	r0, #15
 8003674:	f000 faea 	bl	8003c4c <ctlwizchip>
 8003678:	4603      	mov	r3, r0
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367e:	d103      	bne.n	8003688 <check_phy_status+0x20>
        printf("Failed to get PHY link status.\r\n");
 8003680:	4838      	ldr	r0, [pc, #224]	@ (8003764 <check_phy_status+0xfc>)
 8003682:	f004 f88f 	bl	80077a4 <puts>
        return;
 8003686:	e06a      	b.n	800375e <check_phy_status+0xf6>
    }

    // Print the PHY link status
    if (phy_status == PHY_LINK_ON) {
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d103      	bne.n	8003696 <check_phy_status+0x2e>
        printf("PHY Link is ON.\r\n");
 800368e:	4836      	ldr	r0, [pc, #216]	@ (8003768 <check_phy_status+0x100>)
 8003690:	f004 f888 	bl	80077a4 <puts>
 8003694:	e002      	b.n	800369c <check_phy_status+0x34>
    } else {
        printf("PHY Link is OFF.\r\n");
 8003696:	4835      	ldr	r0, [pc, #212]	@ (800376c <check_phy_status+0x104>)
 8003698:	f004 f884 	bl	80077a4 <puts>
    }

    // Get the PHY configuration (optional, for more detailed information)
    wiz_PhyConf phy_conf;
    if (ctlwizchip(CW_GET_PHYCONF, (void*)&phy_conf) == -1) {
 800369c:	463b      	mov	r3, r7
 800369e:	4619      	mov	r1, r3
 80036a0:	200b      	movs	r0, #11
 80036a2:	f000 fad3 	bl	8003c4c <ctlwizchip>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d103      	bne.n	80036b6 <check_phy_status+0x4e>
        printf("Failed to get PHY configuration.\r\n");
 80036ae:	4830      	ldr	r0, [pc, #192]	@ (8003770 <check_phy_status+0x108>)
 80036b0:	f004 f878 	bl	80077a4 <puts>
        return;
 80036b4:	e053      	b.n	800375e <check_phy_status+0xf6>
    }

    // Print the PHY configuration
    printf("PHY Mode: ");
 80036b6:	482f      	ldr	r0, [pc, #188]	@ (8003774 <check_phy_status+0x10c>)
 80036b8:	f004 f80c 	bl	80076d4 <iprintf>
    switch (phy_conf.by) {
 80036bc:	783b      	ldrb	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <check_phy_status+0x60>
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d004      	beq.n	80036d0 <check_phy_status+0x68>
 80036c6:	e007      	b.n	80036d8 <check_phy_status+0x70>
        case PHY_CONFBY_HW:
            printf("Configured by hardware.\r\n");
 80036c8:	482b      	ldr	r0, [pc, #172]	@ (8003778 <check_phy_status+0x110>)
 80036ca:	f004 f86b 	bl	80077a4 <puts>
            break;
 80036ce:	e007      	b.n	80036e0 <check_phy_status+0x78>
        case PHY_CONFBY_SW:
            printf("Configured by software.\r\n");
 80036d0:	482a      	ldr	r0, [pc, #168]	@ (800377c <check_phy_status+0x114>)
 80036d2:	f004 f867 	bl	80077a4 <puts>
            break;
 80036d6:	e003      	b.n	80036e0 <check_phy_status+0x78>
        default:
            printf("Unknown.\r\n");
 80036d8:	4829      	ldr	r0, [pc, #164]	@ (8003780 <check_phy_status+0x118>)
 80036da:	f004 f863 	bl	80077a4 <puts>
            break;
 80036de:	bf00      	nop
    }

    printf("PHY Speed: ");
 80036e0:	4828      	ldr	r0, [pc, #160]	@ (8003784 <check_phy_status+0x11c>)
 80036e2:	f003 fff7 	bl	80076d4 <iprintf>
    switch (phy_conf.speed) {
 80036e6:	78bb      	ldrb	r3, [r7, #2]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <check_phy_status+0x8a>
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d004      	beq.n	80036fa <check_phy_status+0x92>
 80036f0:	e007      	b.n	8003702 <check_phy_status+0x9a>
        case PHY_SPEED_10:
            printf("10 Mbps.\r\n");
 80036f2:	4825      	ldr	r0, [pc, #148]	@ (8003788 <check_phy_status+0x120>)
 80036f4:	f004 f856 	bl	80077a4 <puts>
            break;
 80036f8:	e007      	b.n	800370a <check_phy_status+0xa2>
        case PHY_SPEED_100:
            printf("100 Mbps.\r\n");
 80036fa:	4824      	ldr	r0, [pc, #144]	@ (800378c <check_phy_status+0x124>)
 80036fc:	f004 f852 	bl	80077a4 <puts>
            break;
 8003700:	e003      	b.n	800370a <check_phy_status+0xa2>
        default:
            printf("Unknown.\r\n");
 8003702:	481f      	ldr	r0, [pc, #124]	@ (8003780 <check_phy_status+0x118>)
 8003704:	f004 f84e 	bl	80077a4 <puts>
            break;
 8003708:	bf00      	nop
    }

    printf("PHY Duplex: ");
 800370a:	4821      	ldr	r0, [pc, #132]	@ (8003790 <check_phy_status+0x128>)
 800370c:	f003 ffe2 	bl	80076d4 <iprintf>
    switch (phy_conf.duplex) {
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <check_phy_status+0xb4>
 8003716:	2b01      	cmp	r3, #1
 8003718:	d004      	beq.n	8003724 <check_phy_status+0xbc>
 800371a:	e007      	b.n	800372c <check_phy_status+0xc4>
        case PHY_DUPLEX_HALF:
            printf("Half duplex.\r\n");
 800371c:	481d      	ldr	r0, [pc, #116]	@ (8003794 <check_phy_status+0x12c>)
 800371e:	f004 f841 	bl	80077a4 <puts>
            break;
 8003722:	e007      	b.n	8003734 <check_phy_status+0xcc>
        case PHY_DUPLEX_FULL:
            printf("Full duplex.\r\n");
 8003724:	481c      	ldr	r0, [pc, #112]	@ (8003798 <check_phy_status+0x130>)
 8003726:	f004 f83d 	bl	80077a4 <puts>
            break;
 800372a:	e003      	b.n	8003734 <check_phy_status+0xcc>
        default:
            printf("Unknown.\r\n");
 800372c:	4814      	ldr	r0, [pc, #80]	@ (8003780 <check_phy_status+0x118>)
 800372e:	f004 f839 	bl	80077a4 <puts>
            break;
 8003732:	bf00      	nop
    }

    // Print the PHY negotiation mode
    printf("PHY Negotiation Mode: ");
 8003734:	4819      	ldr	r0, [pc, #100]	@ (800379c <check_phy_status+0x134>)
 8003736:	f003 ffcd 	bl	80076d4 <iprintf>
    switch (phy_conf.mode) {
 800373a:	787b      	ldrb	r3, [r7, #1]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <check_phy_status+0xde>
 8003740:	2b01      	cmp	r3, #1
 8003742:	d004      	beq.n	800374e <check_phy_status+0xe6>
 8003744:	e007      	b.n	8003756 <check_phy_status+0xee>
        case PHY_MODE_MANUAL:
            printf("Manual.\r\n");
 8003746:	4816      	ldr	r0, [pc, #88]	@ (80037a0 <check_phy_status+0x138>)
 8003748:	f004 f82c 	bl	80077a4 <puts>
            break;
 800374c:	e007      	b.n	800375e <check_phy_status+0xf6>
        case PHY_MODE_AUTONEGO:
            printf("Auto-negotiation.\r\n");
 800374e:	4815      	ldr	r0, [pc, #84]	@ (80037a4 <check_phy_status+0x13c>)
 8003750:	f004 f828 	bl	80077a4 <puts>
            break;
 8003754:	e003      	b.n	800375e <check_phy_status+0xf6>
        default:
            printf("Unknown.\r\n");
 8003756:	480a      	ldr	r0, [pc, #40]	@ (8003780 <check_phy_status+0x118>)
 8003758:	f004 f824 	bl	80077a4 <puts>
            break;
 800375c:	bf00      	nop
    }
}
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	08008a1c 	.word	0x08008a1c
 8003768:	08008a3c 	.word	0x08008a3c
 800376c:	08008a50 	.word	0x08008a50
 8003770:	08008a64 	.word	0x08008a64
 8003774:	08008a88 	.word	0x08008a88
 8003778:	08008a94 	.word	0x08008a94
 800377c:	08008ab0 	.word	0x08008ab0
 8003780:	08008acc 	.word	0x08008acc
 8003784:	08008ad8 	.word	0x08008ad8
 8003788:	08008ae4 	.word	0x08008ae4
 800378c:	08008af0 	.word	0x08008af0
 8003790:	08008afc 	.word	0x08008afc
 8003794:	08008b0c 	.word	0x08008b0c
 8003798:	08008b1c 	.word	0x08008b1c
 800379c:	08008b2c 	.word	0x08008b2c
 80037a0:	08008b44 	.word	0x08008b44
 80037a4:	08008b50 	.word	0x08008b50

080037a8 <print_current_host_configuration>:
 * This function retrieves the current network configuration from the WIZnet chip
 * and prints the MAC address, IP address, subnet mask, gateway, and DNS server.
 *
 * @return void
 */
void print_current_host_configuration() {
 80037a8:	b5b0      	push	{r4, r5, r7, lr}
 80037aa:	b08a      	sub	sp, #40	@ 0x28
 80037ac:	af04      	add	r7, sp, #16
    wiz_NetInfo current_net_info;

    // Retrieve the current network information from the WIZnet chip
    ctlnetwork(CN_GET_NETINFO, (void*)&current_net_info);
 80037ae:	463b      	mov	r3, r7
 80037b0:	4619      	mov	r1, r3
 80037b2:	2001      	movs	r0, #1
 80037b4:	f000 fb2a 	bl	8003e0c <ctlnetwork>

    // Print the MAC address
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 80037b8:	783b      	ldrb	r3, [r7, #0]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80037ba:	4618      	mov	r0, r3
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 80037bc:	787b      	ldrb	r3, [r7, #1]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80037be:	461c      	mov	r4, r3
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 80037c0:	78bb      	ldrb	r3, [r7, #2]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80037c2:	461d      	mov	r5, r3
           current_net_info.mac[3], current_net_info.mac[4], current_net_info.mac[5]);
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	793a      	ldrb	r2, [r7, #4]
 80037c8:	7979      	ldrb	r1, [r7, #5]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80037ca:	9102      	str	r1, [sp, #8]
 80037cc:	9201      	str	r2, [sp, #4]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	462b      	mov	r3, r5
 80037d2:	4622      	mov	r2, r4
 80037d4:	4601      	mov	r1, r0
 80037d6:	481b      	ldr	r0, [pc, #108]	@ (8003844 <print_current_host_configuration+0x9c>)
 80037d8:	f003 ff7c 	bl	80076d4 <iprintf>

    // Print the IP address
    printf("IP: %d.%d.%d.%d\r\n",
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 80037dc:	79bb      	ldrb	r3, [r7, #6]
    printf("IP: %d.%d.%d.%d\r\n",
 80037de:	4619      	mov	r1, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 80037e0:	79fb      	ldrb	r3, [r7, #7]
    printf("IP: %d.%d.%d.%d\r\n",
 80037e2:	461a      	mov	r2, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 80037e4:	7a3b      	ldrb	r3, [r7, #8]
    printf("IP: %d.%d.%d.%d\r\n",
 80037e6:	4618      	mov	r0, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 80037e8:	7a7b      	ldrb	r3, [r7, #9]
    printf("IP: %d.%d.%d.%d\r\n",
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	4603      	mov	r3, r0
 80037ee:	4816      	ldr	r0, [pc, #88]	@ (8003848 <print_current_host_configuration+0xa0>)
 80037f0:	f003 ff70 	bl	80076d4 <iprintf>

    // Print the subnet mask
    printf("SN: %d.%d.%d.%d\r\n",
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80037f4:	7abb      	ldrb	r3, [r7, #10]
    printf("SN: %d.%d.%d.%d\r\n",
 80037f6:	4619      	mov	r1, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80037f8:	7afb      	ldrb	r3, [r7, #11]
    printf("SN: %d.%d.%d.%d\r\n",
 80037fa:	461a      	mov	r2, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80037fc:	7b3b      	ldrb	r3, [r7, #12]
    printf("SN: %d.%d.%d.%d\r\n",
 80037fe:	4618      	mov	r0, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 8003800:	7b7b      	ldrb	r3, [r7, #13]
    printf("SN: %d.%d.%d.%d\r\n",
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4603      	mov	r3, r0
 8003806:	4811      	ldr	r0, [pc, #68]	@ (800384c <print_current_host_configuration+0xa4>)
 8003808:	f003 ff64 	bl	80076d4 <iprintf>

    // Print the gateway address
    printf("GW: %d.%d.%d.%d\r\n",
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 800380c:	7bbb      	ldrb	r3, [r7, #14]
    printf("GW: %d.%d.%d.%d\r\n",
 800380e:	4619      	mov	r1, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 8003810:	7bfb      	ldrb	r3, [r7, #15]
    printf("GW: %d.%d.%d.%d\r\n",
 8003812:	461a      	mov	r2, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 8003814:	7c3b      	ldrb	r3, [r7, #16]
    printf("GW: %d.%d.%d.%d\r\n",
 8003816:	4618      	mov	r0, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 8003818:	7c7b      	ldrb	r3, [r7, #17]
    printf("GW: %d.%d.%d.%d\r\n",
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	4603      	mov	r3, r0
 800381e:	480c      	ldr	r0, [pc, #48]	@ (8003850 <print_current_host_configuration+0xa8>)
 8003820:	f003 ff58 	bl	80076d4 <iprintf>

    // Print the DNS server address
    printf("DNS: %d.%d.%d.%d\r\n",
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8003824:	7cbb      	ldrb	r3, [r7, #18]
    printf("DNS: %d.%d.%d.%d\r\n",
 8003826:	4619      	mov	r1, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8003828:	7cfb      	ldrb	r3, [r7, #19]
    printf("DNS: %d.%d.%d.%d\r\n",
 800382a:	461a      	mov	r2, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 800382c:	7d3b      	ldrb	r3, [r7, #20]
    printf("DNS: %d.%d.%d.%d\r\n",
 800382e:	4618      	mov	r0, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8003830:	7d7b      	ldrb	r3, [r7, #21]
    printf("DNS: %d.%d.%d.%d\r\n",
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	4603      	mov	r3, r0
 8003836:	4807      	ldr	r0, [pc, #28]	@ (8003854 <print_current_host_configuration+0xac>)
 8003838:	f003 ff4c 	bl	80076d4 <iprintf>
}
 800383c:	bf00      	nop
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bdb0      	pop	{r4, r5, r7, pc}
 8003844:	08008b64 	.word	0x08008b64
 8003848:	08008b8c 	.word	0x08008b8c
 800384c:	08008ba0 	.word	0x08008ba0
 8003850:	08008bb4 	.word	0x08008bb4
 8003854:	08008bc8 	.word	0x08008bc8

08003858 <SPIReadWrite>:
 *@brief Helper driver to send and receive one byte through SPI
 *@param data   : 1 byte data to transmit
 *@return		: 1 byte data which is received
 */
uint8_t SPIReadWrite(uint8_t data)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
	 * the SPI_CR2 register is set.
	 */

	// check TXE(tx empty buffer) bit of the status register(SR),
	// and wait until the tx buffer becomes empty
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8003862:	bf00      	nop
 8003864:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <SPIReadWrite+0x4c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b02      	cmp	r3, #2
 8003870:	d1f8      	bne.n	8003864 <SPIReadWrite+0xc>



	// write the data to the data register to be sent
	*(__IO uint8_t*)&hspi1.Instance->DR = data;
 8003872:	4b0c      	ldr	r3, [pc, #48]	@ (80038a4 <SPIReadWrite+0x4c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	330c      	adds	r3, #12
 8003878:	79fa      	ldrb	r2, [r7, #7]
 800387a:	701a      	strb	r2, [r3, #0]
	 *	 * and the RXNE flag is set
	 */

	// wait until the data from the slave is received,
	// and the RXNE flag is set
	while((hspi1.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 800387c:	bf00      	nop
 800387e:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <SPIReadWrite+0x4c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d1f8      	bne.n	800387e <SPIReadWrite+0x26>


	// return the received byte
	return 	(*(__IO uint8_t*)&hspi1.Instance->DR);
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <SPIReadWrite+0x4c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	200000ec 	.word	0x200000ec

080038a8 <wizchip_deselect>:

/**
 *@brief Helper driver to deselect wizchip
 */
void wizchip_deselect()
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_SET);
 80038ac:	2201      	movs	r2, #1
 80038ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038b2:	4802      	ldr	r0, [pc, #8]	@ (80038bc <wizchip_deselect+0x14>)
 80038b4:	f001 f9ea 	bl	8004c8c <HAL_GPIO_WritePin>
}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	48000400 	.word	0x48000400

080038c0 <wizchip_select>:

/**
 *@brief Helper driver to select wizchip
 */
void wizchip_select()
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_RESET);
 80038c4:	2200      	movs	r2, #0
 80038c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038ca:	4802      	ldr	r0, [pc, #8]	@ (80038d4 <wizchip_select+0x14>)
 80038cc:	f001 f9de 	bl	8004c8c <HAL_GPIO_WritePin>
}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	48000400 	.word	0x48000400

080038d8 <wizchip_read>:
/**
 *@brief Helper driver to read one byte through SPI
 *@return		: 1 byte data which is received
 */
uint8_t wizchip_read()
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
	// pass a dummy variable and read from the spi
	return SPIReadWrite(0x00);
 80038dc:	2000      	movs	r0, #0
 80038de:	f7ff ffbb 	bl	8003858 <SPIReadWrite>
 80038e2:	4603      	mov	r3, r0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <wizchip_write>:
/**
 *@brief Helper driver to send one byte through SPI
 *@param data   : 1 byte data to transmit
 */
void wizchip_write(uint8_t data)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(data);
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ffaf 	bl	8003858 <SPIReadWrite>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <wizchip_read_burst>:
 *@brief Helper driver to read burst of bytes through SPI
 *@param buff   : buffer to put the received data
 *@param len    : number of bytes to read
 */
void wizchip_read_burst(uint8_t* buff, uint16_t len)
{
 8003902:	b590      	push	{r4, r7, lr}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e009      	b.n	8003928 <wizchip_read_burst+0x26>
	{
		buff[i] = wizchip_read();
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	18d4      	adds	r4, r2, r3
 800391a:	f7ff ffdd 	bl	80038d8 <wizchip_read>
 800391e:	4603      	mov	r3, r0
 8003920:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3301      	adds	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	887b      	ldrh	r3, [r7, #2]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	dbf1      	blt.n	8003914 <wizchip_read_burst+0x12>
	}

}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	bd90      	pop	{r4, r7, pc}

0800393a <wizchip_write_burst>:
 *@brief Helper driver to read burst of bytes through SPI
 *@param data   : array containing data to be sent
 *@param len    : number of bytes to send
 */
void wizchip_write_burst(uint8_t* data, uint16_t len)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e009      	b.n	8003960 <wizchip_write_burst+0x26>
	{
		wizchip_write(data[i]);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ffc7 	bl	80038e8 <wizchip_write>
	for (int i = 0; i < len; i++)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	429a      	cmp	r2, r3
 8003966:	dbf1      	blt.n	800394c <wizchip_write_burst+0x12>
	}
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <w5500_pins_init>:
/**
 *@brief initializer of PA0(RESET) and SCS(PA1)
 */

void w5500_pins_init()
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397a:	1d3b      	adds	r3, r7, #4
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]


	// enable GPIO clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003988:	4b0f      	ldr	r3, [pc, #60]	@ (80039c8 <w5500_pins_init+0x54>)
 800398a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398c:	4a0e      	ldr	r2, [pc, #56]	@ (80039c8 <w5500_pins_init+0x54>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003994:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <w5500_pins_init+0x54>)
 8003996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	683b      	ldr	r3, [r7, #0]

	// configuring RESET and SCS as outputs
	GPIO_InitStruct.Pin = RESET_PIN | SCS_PIN;
 80039a0:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80039a4:	607b      	str	r3, [r7, #4]

	// push pull(high if 1 and low if 0)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a6:	2301      	movs	r3, #1
 80039a8:	60bb      	str	r3, [r7, #8]

	// output is NOPULL
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]

	// mark these pins fast
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039ae:	2302      	movs	r3, #2
 80039b0:	613b      	str	r3, [r7, #16]


	// initialize the pins
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b2:	1d3b      	adds	r3, r7, #4
 80039b4:	4619      	mov	r1, r3
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039ba:	f000 ffbd 	bl	8004938 <HAL_GPIO_Init>
}
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000

080039cc <w5500_init>:

void w5500_init(wiz_NetInfo *net_info)
{
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	// the available size of w5500 is 32KB
	// w5500 supports 8 independents sockets simultaneously
	// here 2KB is allocated for
	// each of the transmit and receive buffer of each socket
	uint8_t memory_for_each_socket[2][8] =
 80039d4:	4b21      	ldr	r3, [pc, #132]	@ (8003a5c <w5500_init+0x90>)
 80039d6:	f107 0408 	add.w	r4, r7, #8
 80039da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//uint8_t tmp = 0xFF;


	// initialize RESET and SCS pins
	w5500_pins_init();
 80039e0:	f7ff ffc8 	bl	8003974 <w5500_pins_init>

	// first deselect the chip(by setting SCS pin)
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_SET);
 80039e4:	2201      	movs	r2, #1
 80039e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039ea:	481d      	ldr	r0, [pc, #116]	@ (8003a60 <w5500_init+0x94>)
 80039ec:	f001 f94e 	bl	8004c8c <HAL_GPIO_WritePin>


	// hard reset the wiznet chip by clearing RESET
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 80039f0:	2200      	movs	r2, #0
 80039f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039f6:	481b      	ldr	r0, [pc, #108]	@ (8003a64 <w5500_init+0x98>)
 80039f8:	f001 f948 	bl	8004c8c <HAL_GPIO_WritePin>

	// busy wait for a while and keep the RESET pin 0
	//while(tmp--);
	HAL_Delay(1000);
 80039fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a00:	f000 fe90 	bl	8004724 <HAL_Delay>


	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8003a04:	2201      	movs	r2, #1
 8003a06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a0a:	4816      	ldr	r0, [pc, #88]	@ (8003a64 <w5500_init+0x98>)
 8003a0c:	f001 f93e 	bl	8004c8c <HAL_GPIO_WritePin>

	// assign the helper drivers to complete the driver

	// callback functions for selecting and deselecting the chip
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8003a10:	4915      	ldr	r1, [pc, #84]	@ (8003a68 <w5500_init+0x9c>)
 8003a12:	4816      	ldr	r0, [pc, #88]	@ (8003a6c <w5500_init+0xa0>)
 8003a14:	f000 f89c 	bl	8003b50 <reg_wizchip_cs_cbfunc>

	// callback functions for reading and writing bytes of data
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8003a18:	4915      	ldr	r1, [pc, #84]	@ (8003a70 <w5500_init+0xa4>)
 8003a1a:	4816      	ldr	r0, [pc, #88]	@ (8003a74 <w5500_init+0xa8>)
 8003a1c:	f000 f8be 	bl	8003b9c <reg_wizchip_spi_cbfunc>

	// callback functions for reading and writing burst of data
	reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 8003a20:	4915      	ldr	r1, [pc, #84]	@ (8003a78 <w5500_init+0xac>)
 8003a22:	4816      	ldr	r0, [pc, #88]	@ (8003a7c <w5500_init+0xb0>)
 8003a24:	f000 f8e6 	bl	8003bf4 <reg_wizchip_spiburst_cbfunc>


	// allocate the specified memory for each socket
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)memory_for_each_socket) == -1)
 8003a28:	f107 0308 	add.w	r3, r7, #8
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f000 f90c 	bl	8003c4c <ctlwizchip>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d104      	bne.n	8003a46 <w5500_init+0x7a>
	{
		printf("WIZCHIP initialization failed\r\n");
 8003a3c:	4810      	ldr	r0, [pc, #64]	@ (8003a80 <w5500_init+0xb4>)
 8003a3e:	f003 feb1 	bl	80077a4 <puts>
		while(1);
 8003a42:	bf00      	nop
 8003a44:	e7fd      	b.n	8003a42 <w5500_init+0x76>
	}

	ctlwizchip(CN_SET_NETINFO, net_info);
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f000 f8ff 	bl	8003c4c <ctlwizchip>
	printf("WIZCHIP initialization done successfully\r\n");
 8003a4e:	480d      	ldr	r0, [pc, #52]	@ (8003a84 <w5500_init+0xb8>)
 8003a50:	f003 fea8 	bl	80077a4 <puts>
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd90      	pop	{r4, r7, pc}
 8003a5c:	08008c28 	.word	0x08008c28
 8003a60:	48000400 	.word	0x48000400
 8003a64:	48000800 	.word	0x48000800
 8003a68:	080038a9 	.word	0x080038a9
 8003a6c:	080038c1 	.word	0x080038c1
 8003a70:	080038e9 	.word	0x080038e9
 8003a74:	080038d9 	.word	0x080038d9
 8003a78:	0800393b 	.word	0x0800393b
 8003a7c:	08003903 	.word	0x08003903
 8003a80:	08008bdc 	.word	0x08008bdc
 8003a84:	08008bfc 	.word	0x08008bfc

08003a88 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	70fb      	strb	r3, [r7, #3]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	2300      	movs	r3, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	807b      	strh	r3, [r7, #2]
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	807b      	strh	r3, [r7, #2]
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <reg_wizchip_cs_cbfunc+0x16>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003b66:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <reg_wizchip_cs_cbfunc+0x40>)
 8003b68:	4a0a      	ldr	r2, [pc, #40]	@ (8003b94 <reg_wizchip_cs_cbfunc+0x44>)
 8003b6a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003b6c:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <reg_wizchip_cs_cbfunc+0x40>)
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b98 <reg_wizchip_cs_cbfunc+0x48>)
 8003b70:	619a      	str	r2, [r3, #24]
 8003b72:	e006      	b.n	8003b82 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003b74:	4a06      	ldr	r2, [pc, #24]	@ (8003b90 <reg_wizchip_cs_cbfunc+0x40>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003b7a:	4a05      	ldr	r2, [pc, #20]	@ (8003b90 <reg_wizchip_cs_cbfunc+0x40>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	6193      	str	r3, [r2, #24]
   }
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000040 	.word	0x20000040
 8003b94:	08003aa5 	.word	0x08003aa5
 8003b98:	08003ab3 	.word	0x08003ab3

08003b9c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003ba6:	bf00      	nop
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8003be8 <reg_wizchip_spi_cbfunc+0x4c>)
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f9      	beq.n	8003ba8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <reg_wizchip_spi_cbfunc+0x24>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <reg_wizchip_spi_cbfunc+0x4c>)
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <reg_wizchip_spi_cbfunc+0x50>)
 8003bc4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <reg_wizchip_spi_cbfunc+0x4c>)
 8003bc8:	4a09      	ldr	r2, [pc, #36]	@ (8003bf0 <reg_wizchip_spi_cbfunc+0x54>)
 8003bca:	621a      	str	r2, [r3, #32]
 8003bcc:	e006      	b.n	8003bdc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003bce:	4a06      	ldr	r2, [pc, #24]	@ (8003be8 <reg_wizchip_spi_cbfunc+0x4c>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003bd4:	4a04      	ldr	r2, [pc, #16]	@ (8003be8 <reg_wizchip_spi_cbfunc+0x4c>)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6213      	str	r3, [r2, #32]
   }
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	20000040 	.word	0x20000040
 8003bec:	08003af9 	.word	0x08003af9
 8003bf0:	08003b09 	.word	0x08003b09

08003bf4 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003bfe:	bf00      	nop
 8003c00:	4b0f      	ldr	r3, [pc, #60]	@ (8003c40 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f9      	beq.n	8003c00 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <reg_wizchip_spiburst_cbfunc+0x24>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003c18:	4b09      	ldr	r3, [pc, #36]	@ (8003c40 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c44 <reg_wizchip_spiburst_cbfunc+0x50>)
 8003c1c:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003c1e:	4b08      	ldr	r3, [pc, #32]	@ (8003c40 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003c20:	4a09      	ldr	r2, [pc, #36]	@ (8003c48 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003c22:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c24:	e006      	b.n	8003c34 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003c26:	4a06      	ldr	r2, [pc, #24]	@ (8003c40 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003c2c:	4a04      	ldr	r2, [pc, #16]	@ (8003c40 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	20000040 	.word	0x20000040
 8003c44:	08003b1f 	.word	0x08003b1f
 8003c48:	08003b37 	.word	0x08003b37

08003c4c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	f200 80c5 	bhi.w	8003df6 <ctlwizchip+0x1aa>
 8003c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <ctlwizchip+0x28>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003cb5 	.word	0x08003cb5
 8003c78:	08003cbb 	.word	0x08003cbb
 8003c7c:	08003ce7 	.word	0x08003ce7
 8003c80:	08003cdb 	.word	0x08003cdb
 8003c84:	08003cf5 	.word	0x08003cf5
 8003c88:	08003d01 	.word	0x08003d01
 8003c8c:	08003d0f 	.word	0x08003d0f
 8003c90:	08003d35 	.word	0x08003d35
 8003c94:	08003d57 	.word	0x08003d57
 8003c98:	08003d9b 	.word	0x08003d9b
 8003c9c:	08003da1 	.word	0x08003da1
 8003ca0:	08003da9 	.word	0x08003da9
 8003ca4:	08003dfd 	.word	0x08003dfd
 8003ca8:	08003db1 	.word	0x08003db1
 8003cac:	08003dbf 	.word	0x08003dbf
 8003cb0:	08003ddb 	.word	0x08003ddb
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003cb4:	f000 f8e8 	bl	8003e88 <wizchip_sw_reset>
         break;
 8003cb8:	e0a1      	b.n	8003dfe <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f925 	bl	8003f20 <wizchip_init>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	e092      	b.n	8003e00 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f9aa 	bl	8004038 <wizchip_clrinterrupt>
         break;
 8003ce4:	e08b      	b.n	8003dfe <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003ce6:	f000 f9db 	bl	80040a0 <wizchip_getinterrupt>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	801a      	strh	r2, [r3, #0]
         break;
 8003cf2:	e084      	b.n	8003dfe <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f9f6 	bl	80040ea <wizchip_setinterruptmask>
         break;         
 8003cfe:	e07e      	b.n	8003dfe <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003d00:	f000 fa0e 	bl	8004120 <wizchip_getinterruptmask>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	801a      	strh	r2, [r3, #0]
         break;
 8003d0c:	e077      	b.n	8003dfe <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003d1e:	f7fc ffdd 	bl	8000cdc <WIZCHIP_WRITE>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003d2e:	f7fc ffd5 	bl	8000cdc <WIZCHIP_WRITE>
         break;
 8003d32:	e064      	b.n	8003dfe <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003d34:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003d38:	f7fc ff84 	bl	8000c44 <WIZCHIP_READ>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	b29c      	uxth	r4, r3
 8003d42:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003d46:	f7fc ff7d 	bl	8000c44 <WIZCHIP_READ>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4423      	add	r3, r4
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	801a      	strh	r2, [r3, #0]
         break;
 8003d54:	e053      	b.n	8003dfe <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003d56:	4b2c      	ldr	r3, [pc, #176]	@ (8003e08 <ctlwizchip+0x1bc>)
 8003d58:	789a      	ldrb	r2, [r3, #2]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <ctlwizchip+0x1bc>)
 8003d64:	78d2      	ldrb	r2, [r2, #3]
 8003d66:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	4a26      	ldr	r2, [pc, #152]	@ (8003e08 <ctlwizchip+0x1bc>)
 8003d6e:	7912      	ldrb	r2, [r2, #4]
 8003d70:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	3303      	adds	r3, #3
 8003d76:	4a24      	ldr	r2, [pc, #144]	@ (8003e08 <ctlwizchip+0x1bc>)
 8003d78:	7952      	ldrb	r2, [r2, #5]
 8003d7a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4a21      	ldr	r2, [pc, #132]	@ (8003e08 <ctlwizchip+0x1bc>)
 8003d82:	7992      	ldrb	r2, [r2, #6]
 8003d84:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	3305      	adds	r3, #5
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e08 <ctlwizchip+0x1bc>)
 8003d8c:	79d2      	ldrb	r2, [r2, #7]
 8003d8e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	3306      	adds	r3, #6
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]
         break;
 8003d98:	e031      	b.n	8003dfe <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003d9a:	f000 fa13 	bl	80041c4 <wizphy_reset>
         break;
 8003d9e:	e02e      	b.n	8003dfe <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003da0:	6838      	ldr	r0, [r7, #0]
 8003da2:	f000 fa36 	bl	8004212 <wizphy_setphyconf>
         break;
 8003da6:	e02a      	b.n	8003dfe <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003da8:	6838      	ldr	r0, [r7, #0]
 8003daa:	f000 fa75 	bl	8004298 <wizphy_getphyconf>
         break;
 8003dae:	e026      	b.n	8003dfe <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fad9 	bl	800436c <wizphy_setphypmode>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	e020      	b.n	8003e00 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003dbe:	f000 f9e8 	bl	8004192 <wizphy_getphypmode>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	2bff      	cmp	r3, #255	@ 0xff
 8003dca:	d102      	bne.n	8003dd2 <ctlwizchip+0x186>
 8003dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd0:	e016      	b.n	8003e00 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	7dfa      	ldrb	r2, [r7, #23]
 8003dd6:	701a      	strb	r2, [r3, #0]
         break;
 8003dd8:	e011      	b.n	8003dfe <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003dda:	f000 f9c4 	bl	8004166 <wizphy_getphylink>
 8003dde:	4603      	mov	r3, r0
 8003de0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	2bff      	cmp	r3, #255	@ 0xff
 8003de6:	d102      	bne.n	8003dee <ctlwizchip+0x1a2>
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dec:	e008      	b.n	8003e00 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	7dfa      	ldrb	r2, [r7, #23]
 8003df2:	701a      	strb	r2, [r3, #0]
         break;
 8003df4:	e003      	b.n	8003dfe <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfa:	e001      	b.n	8003e00 <ctlwizchip+0x1b4>
         break;
 8003dfc:	bf00      	nop
   }
   return 0;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd90      	pop	{r4, r7, pc}
 8003e08:	20000040 	.word	0x20000040

08003e0c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d82c      	bhi.n	8003e78 <ctlnetwork+0x6c>
 8003e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <ctlnetwork+0x18>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e3d 	.word	0x08003e3d
 8003e28:	08003e45 	.word	0x08003e45
 8003e2c:	08003e4d 	.word	0x08003e4d
 8003e30:	08003e5b 	.word	0x08003e5b
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003e71 	.word	0x08003e71
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003e3c:	6838      	ldr	r0, [r7, #0]
 8003e3e:	f000 fadf 	bl	8004400 <wizchip_setnetinfo>
         break;
 8003e42:	e01c      	b.n	8003e7e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003e44:	6838      	ldr	r0, [r7, #0]
 8003e46:	f000 fb1b 	bl	8004480 <wizchip_getnetinfo>
         break;
 8003e4a:	e018      	b.n	8003e7e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb55 	bl	8004500 <wizchip_setnetmode>
 8003e56:	4603      	mov	r3, r0
 8003e58:	e012      	b.n	8003e80 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003e5a:	f000 fb73 	bl	8004544 <wizchip_getnetmode>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	461a      	mov	r2, r3
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	701a      	strb	r2, [r3, #0]
         break;
 8003e66:	e00a      	b.n	8003e7e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003e68:	6838      	ldr	r0, [r7, #0]
 8003e6a:	f000 fb73 	bl	8004554 <wizchip_settimeout>
         break;
 8003e6e:	e006      	b.n	8003e7e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003e70:	6838      	ldr	r0, [r7, #0]
 8003e72:	f000 fb90 	bl	8004596 <wizchip_gettimeout>
         break;
 8003e76:	e002      	b.n	8003e7e <ctlnetwork+0x72>
      default:
         return -1;
 8003e78:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7c:	e000      	b.n	8003e80 <ctlnetwork+0x74>
   }
   return 0;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003e8e:	1d3b      	adds	r3, r7, #4
 8003e90:	2206      	movs	r2, #6
 8003e92:	4619      	mov	r1, r3
 8003e94:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003e98:	f7fc ff6e 	bl	8000d78 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003e9c:	f107 0314 	add.w	r3, r7, #20
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003ea8:	f7fc ff66 	bl	8000d78 <WIZCHIP_READ_BUF>
 8003eac:	f107 0310 	add.w	r3, r7, #16
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003eb8:	f7fc ff5e 	bl	8000d78 <WIZCHIP_READ_BUF>
 8003ebc:	f107 030c 	add.w	r3, r7, #12
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003ec8:	f7fc ff56 	bl	8000d78 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003ecc:	2180      	movs	r1, #128	@ 0x80
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f7fc ff04 	bl	8000cdc <WIZCHIP_WRITE>
   getMR(); // for delay
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7fc feb5 	bl	8000c44 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	2206      	movs	r2, #6
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003ee4:	f7fc ffa8 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003ee8:	f107 0314 	add.w	r3, r7, #20
 8003eec:	2204      	movs	r2, #4
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003ef4:	f7fc ffa0 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003ef8:	f107 0310 	add.w	r3, r7, #16
 8003efc:	2204      	movs	r2, #4
 8003efe:	4619      	mov	r1, r3
 8003f00:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003f04:	f7fc ff98 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003f14:	f7fc ff90 	bl	8000e38 <WIZCHIP_WRITE_BUF>
}
 8003f18:	bf00      	nop
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003f2e:	f7ff ffab 	bl	8003e88 <wizchip_sw_reset>
   if(txsize)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d03b      	beq.n	8003fb0 <wizchip_init+0x90>
   {
      tmp = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	e015      	b.n	8003f6e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	7bbb      	ldrb	r3, [r7, #14]
 8003f4e:	4413      	add	r3, r2
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	dd02      	ble.n	8003f62 <wizchip_init+0x42>
 8003f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f60:	e066      	b.n	8004030 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	3301      	adds	r3, #1
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	73fb      	strb	r3, [r7, #15]
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f72:	2b07      	cmp	r3, #7
 8003f74:	dde5      	ble.n	8003f42 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	e015      	b.n	8003fa8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	3301      	adds	r3, #1
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	4619      	mov	r1, r3
 8003f98:	f7fc fea0 	bl	8000cdc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	73fb      	strb	r3, [r7, #15]
 8003fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fac:	2b07      	cmp	r3, #7
 8003fae:	dde5      	ble.n	8003f7c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d03b      	beq.n	800402e <wizchip_init+0x10e>
   {
      tmp = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	e015      	b.n	8003fec <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	7bbb      	ldrb	r3, [r7, #14]
 8003fcc:	4413      	add	r3, r2
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	dd02      	ble.n	8003fe0 <wizchip_init+0xc0>
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295
 8003fde:	e027      	b.n	8004030 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	73fb      	strb	r3, [r7, #15]
 8003fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff0:	2b07      	cmp	r3, #7
 8003ff2:	dde5      	ble.n	8003fc0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e015      	b.n	8004026 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	3301      	adds	r3, #1
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004008:	4618      	mov	r0, r3
 800400a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	4413      	add	r3, r2
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	4619      	mov	r1, r3
 8004016:	f7fc fe61 	bl	8000cdc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800401a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	3301      	adds	r3, #1
 8004022:	b2db      	uxtb	r3, r3
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800402a:	2b07      	cmp	r3, #7
 800402c:	dde5      	ble.n	8003ffa <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	b29b      	uxth	r3, r3
 800404c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	f023 030f 	bic.w	r3, r3, #15
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4619      	mov	r1, r3
 8004058:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 800405c:	f7fc fe3e 	bl	8000cdc <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e014      	b.n	8004090 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8004066:	7bba      	ldrb	r2, [r7, #14]
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	fa42 f303 	asr.w	r3, r2, r3
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <wizchip_clrinterrupt+0x52>
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	3301      	adds	r3, #1
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004082:	211f      	movs	r1, #31
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fe29 	bl	8000cdc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	3301      	adds	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b07      	cmp	r3, #7
 8004094:	d9e7      	bls.n	8004066 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80040b2:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80040b6:	f7fc fdc5 	bl	8000c44 <WIZCHIP_READ>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f023 030f 	bic.w	r3, r3, #15
 80040c0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80040c2:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80040c6:	f7fc fdbd 	bl	8000c44 <WIZCHIP_READ>
 80040ca:	4603      	mov	r3, r0
 80040cc:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80040ce:	79bb      	ldrb	r3, [r7, #6]
 80040d0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80040d2:	88bb      	ldrh	r3, [r7, #4]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	4413      	add	r3, r2
 80040de:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80040e0:	88bb      	ldrh	r3, [r7, #4]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	4603      	mov	r3, r0
 80040f2:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	4619      	mov	r1, r3
 8004104:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004108:	f7fc fde8 	bl	8000cdc <WIZCHIP_WRITE>
   setSIMR(simr);
 800410c:	7bbb      	ldrb	r3, [r7, #14]
 800410e:	4619      	mov	r1, r3
 8004110:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004114:	f7fc fde2 	bl	8000cdc <WIZCHIP_WRITE>
#endif   
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8004132:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004136:	f7fc fd85 	bl	8000c44 <WIZCHIP_READ>
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800413e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004142:	f7fc fd7f 	bl	8000c44 <WIZCHIP_READ>
 8004146:	4603      	mov	r3, r0
 8004148:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800414a:	79bb      	ldrb	r3, [r7, #6]
 800414c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800414e:	88bb      	ldrh	r3, [r7, #4]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	b29a      	uxth	r2, r3
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	b29b      	uxth	r3, r3
 8004158:	4413      	add	r3, r2
 800415a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800415c:	88bb      	ldrh	r3, [r7, #4]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800416c:	2300      	movs	r3, #0
 800416e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004170:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004174:	f7fc fd66 	bl	8000c44 <WIZCHIP_READ>
 8004178:	4603      	mov	r3, r0
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8004182:	2301      	movs	r3, #1
 8004184:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800419c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80041a0:	f7fc fd50 	bl	8000c44 <WIZCHIP_READ>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041aa:	2b30      	cmp	r3, #48	@ 0x30
 80041ac:	d102      	bne.n	80041b4 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80041ae:	2301      	movs	r3, #1
 80041b0:	71fb      	strb	r3, [r7, #7]
 80041b2:	e001      	b.n	80041b8 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80041b4:	2300      	movs	r3, #0
 80041b6:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80041b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80041ca:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80041ce:	f7fc fd39 	bl	8000c44 <WIZCHIP_READ>
 80041d2:	4603      	mov	r3, r0
 80041d4:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041dc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	4619      	mov	r1, r3
 80041e2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80041e6:	f7fc fd79 	bl	8000cdc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80041ea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80041ee:	f7fc fd29 	bl	8000c44 <WIZCHIP_READ>
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041fc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	4619      	mov	r1, r3
 8004202:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004206:	f7fc fd69 	bl	8000cdc <WIZCHIP_WRITE>
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d104      	bne.n	8004230 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800422c:	73fb      	strb	r3, [r7, #15]
 800422e:	e003      	b.n	8004238 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004236:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	785b      	ldrb	r3, [r3, #1]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d104      	bne.n	800424a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	e019      	b.n	800427e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d10d      	bne.n	800426e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	789b      	ldrb	r3, [r3, #2]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d104      	bne.n	8004264 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	f043 0318 	orr.w	r3, r3, #24
 8004260:	73fb      	strb	r3, [r7, #15]
 8004262:	e00c      	b.n	800427e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	f043 0308 	orr.w	r3, r3, #8
 800426a:	73fb      	strb	r3, [r7, #15]
 800426c:	e007      	b.n	800427e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	789b      	ldrb	r3, [r3, #2]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d103      	bne.n	800427e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	f043 0310 	orr.w	r3, r3, #16
 800427c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	4619      	mov	r1, r3
 8004282:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004286:	f7fc fd29 	bl	8000cdc <WIZCHIP_WRITE>
   wizphy_reset();
 800428a:	f7ff ff9b 	bl	80041c4 <wizphy_reset>
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80042a4:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80042a8:	f7fc fccc 	bl	8000c44 <WIZCHIP_READ>
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	119b      	asrs	r3, r3, #6
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d001      	beq.n	80042ce <wizphy_getphyconf+0x36>
 80042ca:	2b38      	cmp	r3, #56	@ 0x38
 80042cc:	d103      	bne.n	80042d6 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	705a      	strb	r2, [r3, #1]
         break;
 80042d4:	e003      	b.n	80042de <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	705a      	strb	r2, [r3, #1]
         break;
 80042dc:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042e4:	3b10      	subs	r3, #16
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	bf8c      	ite	hi
 80042ea:	2201      	movhi	r2, #1
 80042ec:	2200      	movls	r2, #0
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	2a00      	cmp	r2, #0
 80042f2:	d10f      	bne.n	8004314 <wizphy_getphyconf+0x7c>
 80042f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004364 <wizphy_getphyconf+0xcc>)
 80042f6:	fa22 f303 	lsr.w	r3, r2, r3
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bf14      	ite	ne
 8004302:	2301      	movne	r3, #1
 8004304:	2300      	moveq	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	709a      	strb	r2, [r3, #2]
         break;
 8004312:	e003      	b.n	800431c <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	709a      	strb	r2, [r3, #2]
         break;
 800431a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004322:	3b08      	subs	r3, #8
 8004324:	2b18      	cmp	r3, #24
 8004326:	bf8c      	ite	hi
 8004328:	2201      	movhi	r2, #1
 800432a:	2200      	movls	r2, #0
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	2a00      	cmp	r2, #0
 8004330:	d10f      	bne.n	8004352 <wizphy_getphyconf+0xba>
 8004332:	4a0d      	ldr	r2, [pc, #52]	@ (8004368 <wizphy_getphyconf+0xd0>)
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	70da      	strb	r2, [r3, #3]
         break;
 8004350:	e003      	b.n	800435a <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	70da      	strb	r2, [r3, #3]
         break;
 8004358:	bf00      	nop
   }
}
 800435a:	bf00      	nop
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	00010101 	.word	0x00010101
 8004368:	01010001 	.word	0x01010001

0800436c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800437a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800437e:	f7fc fc61 	bl	8000c44 <WIZCHIP_READ>
 8004382:	4603      	mov	r3, r0
 8004384:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <wizphy_setphypmode+0x2a>
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
 8004394:	e030      	b.n	80043f8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800439c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d104      	bne.n	80043ae <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e003      	b.n	80043b6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80043b4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	4619      	mov	r1, r3
 80043ba:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80043be:	f7fc fc8d 	bl	8000cdc <WIZCHIP_WRITE>
   wizphy_reset();
 80043c2:	f7ff feff 	bl	80041c4 <wizphy_reset>
   tmp = getPHYCFGR();
 80043c6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80043ca:	f7fc fc3b 	bl	8000c44 <WIZCHIP_READ>
 80043ce:	4603      	mov	r3, r0
 80043d0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d106      	bne.n	80043e6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <wizphy_setphypmode+0x88>
 80043e2:	2300      	movs	r3, #0
 80043e4:	e008      	b.n	80043f8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <wizphy_setphypmode+0x88>
 80043f0:	2300      	movs	r3, #0
 80043f2:	e001      	b.n	80043f8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80043f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2206      	movs	r2, #6
 800440c:	4619      	mov	r1, r3
 800440e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004412:	f7fc fd11 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	330e      	adds	r3, #14
 800441a:	2204      	movs	r2, #4
 800441c:	4619      	mov	r1, r3
 800441e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004422:	f7fc fd09 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	330a      	adds	r3, #10
 800442a:	2204      	movs	r2, #4
 800442c:	4619      	mov	r1, r3
 800442e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004432:	f7fc fd01 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3306      	adds	r3, #6
 800443a:	2204      	movs	r2, #4
 800443c:	4619      	mov	r1, r3
 800443e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004442:	f7fc fcf9 	bl	8000e38 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7c9a      	ldrb	r2, [r3, #18]
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <wizchip_setnetinfo+0x78>)
 800444c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	7cda      	ldrb	r2, [r3, #19]
 8004452:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <wizchip_setnetinfo+0x78>)
 8004454:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	7d1a      	ldrb	r2, [r3, #20]
 800445a:	4b07      	ldr	r3, [pc, #28]	@ (8004478 <wizchip_setnetinfo+0x78>)
 800445c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7d5a      	ldrb	r2, [r3, #21]
 8004462:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <wizchip_setnetinfo+0x78>)
 8004464:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7d9a      	ldrb	r2, [r3, #22]
 800446a:	4b04      	ldr	r3, [pc, #16]	@ (800447c <wizchip_setnetinfo+0x7c>)
 800446c:	701a      	strb	r2, [r3, #0]
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000234 	.word	0x20000234
 800447c:	20000238 	.word	0x20000238

08004480 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2206      	movs	r2, #6
 800448c:	4619      	mov	r1, r3
 800448e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004492:	f7fc fc71 	bl	8000d78 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	330e      	adds	r3, #14
 800449a:	2204      	movs	r2, #4
 800449c:	4619      	mov	r1, r3
 800449e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80044a2:	f7fc fc69 	bl	8000d78 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	330a      	adds	r3, #10
 80044aa:	2204      	movs	r2, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80044b2:	f7fc fc61 	bl	8000d78 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3306      	adds	r3, #6
 80044ba:	2204      	movs	r2, #4
 80044bc:	4619      	mov	r1, r3
 80044be:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80044c2:	f7fc fc59 	bl	8000d78 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80044c6:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <wizchip_getnetinfo+0x78>)
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80044ce:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <wizchip_getnetinfo+0x78>)
 80044d0:	785a      	ldrb	r2, [r3, #1]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80044d6:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <wizchip_getnetinfo+0x78>)
 80044d8:	789a      	ldrb	r2, [r3, #2]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80044de:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <wizchip_getnetinfo+0x78>)
 80044e0:	78da      	ldrb	r2, [r3, #3]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80044e6:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <wizchip_getnetinfo+0x7c>)
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	759a      	strb	r2, [r3, #22]
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000234 	.word	0x20000234
 80044fc:	20000238 	.word	0x20000238

08004500 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <wizchip_setnetmode+0x1e>
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
 800451c:	e00e      	b.n	800453c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800451e:	2000      	movs	r0, #0
 8004520:	f7fc fb90 	bl	8000c44 <WIZCHIP_READ>
 8004524:	4603      	mov	r3, r0
 8004526:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	4313      	orrs	r3, r2
 800452e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	4619      	mov	r1, r3
 8004534:	2000      	movs	r0, #0
 8004536:	f7fc fbd1 	bl	8000cdc <WIZCHIP_WRITE>
   return 0;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004548:	2000      	movs	r0, #0
 800454a:	f7fc fb7b 	bl	8000c44 <WIZCHIP_READ>
 800454e:	4603      	mov	r3, r0
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}

08004554 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004566:	f7fc fbb9 	bl	8000cdc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	885b      	ldrh	r3, [r3, #2]
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	b29b      	uxth	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	4619      	mov	r1, r3
 8004576:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800457a:	f7fc fbaf 	bl	8000cdc <WIZCHIP_WRITE>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	885b      	ldrh	r3, [r3, #2]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	4619      	mov	r1, r3
 8004586:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800458a:	f7fc fba7 	bl	8000cdc <WIZCHIP_WRITE>
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8004596:	b590      	push	{r4, r7, lr}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800459e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80045a2:	f7fc fb4f 	bl	8000c44 <WIZCHIP_READ>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80045ae:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80045b2:	f7fc fb47 	bl	8000c44 <WIZCHIP_READ>
 80045b6:	4603      	mov	r3, r0
 80045b8:	021b      	lsls	r3, r3, #8
 80045ba:	b29c      	uxth	r4, r3
 80045bc:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80045c0:	f7fc fb40 	bl	8000c44 <WIZCHIP_READ>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4423      	add	r3, r4
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	805a      	strh	r2, [r3, #2]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd90      	pop	{r4, r7, pc}
	...

080045d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80045d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004610 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80045dc:	f7fc fa94 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045e0:	480c      	ldr	r0, [pc, #48]	@ (8004614 <LoopForever+0x6>)
  ldr r1, =_edata
 80045e2:	490d      	ldr	r1, [pc, #52]	@ (8004618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045e4:	4a0d      	ldr	r2, [pc, #52]	@ (800461c <LoopForever+0xe>)
  movs r3, #0
 80045e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045e8:	e002      	b.n	80045f0 <LoopCopyDataInit>

080045ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045ee:	3304      	adds	r3, #4

080045f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045f4:	d3f9      	bcc.n	80045ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004624 <LoopForever+0x16>)
  movs r3, #0
 80045fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045fc:	e001      	b.n	8004602 <LoopFillZerobss>

080045fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004600:	3204      	adds	r2, #4

08004602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004604:	d3fb      	bcc.n	80045fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004606:	f003 fabd 	bl	8007b84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800460a:	f7fc f821 	bl	8000650 <main>

0800460e <LoopForever>:

LoopForever:
    b LoopForever
 800460e:	e7fe      	b.n	800460e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004610:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004618:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800461c:	08008cc4 	.word	0x08008cc4
  ldr r2, =_sbss
 8004620:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8004624:	2000038c 	.word	0x2000038c

08004628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004628:	e7fe      	b.n	8004628 <ADC1_2_IRQHandler>
	...

0800462c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004636:	4b0c      	ldr	r3, [pc, #48]	@ (8004668 <HAL_Init+0x3c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a0b      	ldr	r2, [pc, #44]	@ (8004668 <HAL_Init+0x3c>)
 800463c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004640:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004642:	2003      	movs	r0, #3
 8004644:	f000 f944 	bl	80048d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004648:	2000      	movs	r0, #0
 800464a:	f000 f80f 	bl	800466c <HAL_InitTick>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	71fb      	strb	r3, [r7, #7]
 8004658:	e001      	b.n	800465e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800465a:	f7fc f95f 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800465e:	79fb      	ldrb	r3, [r7, #7]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40022000 	.word	0x40022000

0800466c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004678:	4b17      	ldr	r3, [pc, #92]	@ (80046d8 <HAL_InitTick+0x6c>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d023      	beq.n	80046c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004680:	4b16      	ldr	r3, [pc, #88]	@ (80046dc <HAL_InitTick+0x70>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <HAL_InitTick+0x6c>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	4619      	mov	r1, r3
 800468a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800468e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f941 	bl	800491e <HAL_SYSTICK_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b0f      	cmp	r3, #15
 80046a6:	d809      	bhi.n	80046bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046a8:	2200      	movs	r2, #0
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	f000 f919 	bl	80048e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046b4:	4a0a      	ldr	r2, [pc, #40]	@ (80046e0 <HAL_InitTick+0x74>)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e007      	b.n	80046cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
 80046c0:	e004      	b.n	80046cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e001      	b.n	80046cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000070 	.word	0x20000070
 80046dc:	2000001c 	.word	0x2000001c
 80046e0:	2000006c 	.word	0x2000006c

080046e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046e8:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <HAL_IncTick+0x20>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <HAL_IncTick+0x24>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4413      	add	r3, r2
 80046f4:	4a04      	ldr	r2, [pc, #16]	@ (8004708 <HAL_IncTick+0x24>)
 80046f6:	6013      	str	r3, [r2, #0]
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000070 	.word	0x20000070
 8004708:	2000023c 	.word	0x2000023c

0800470c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  return uwTick;
 8004710:	4b03      	ldr	r3, [pc, #12]	@ (8004720 <HAL_GetTick+0x14>)
 8004712:	681b      	ldr	r3, [r3, #0]
}
 8004714:	4618      	mov	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	2000023c 	.word	0x2000023c

08004724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800472c:	f7ff ffee 	bl	800470c <HAL_GetTick>
 8004730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473c:	d005      	beq.n	800474a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800473e:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <HAL_Delay+0x44>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800474a:	bf00      	nop
 800474c:	f7ff ffde 	bl	800470c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	429a      	cmp	r2, r3
 800475a:	d8f7      	bhi.n	800474c <HAL_Delay+0x28>
  {
  }
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000070 	.word	0x20000070

0800476c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800477c:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <__NVIC_SetPriorityGrouping+0x44>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004788:	4013      	ands	r3, r2
 800478a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800479c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800479e:	4a04      	ldr	r2, [pc, #16]	@ (80047b0 <__NVIC_SetPriorityGrouping+0x44>)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	60d3      	str	r3, [r2, #12]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b8:	4b04      	ldr	r3, [pc, #16]	@ (80047cc <__NVIC_GetPriorityGrouping+0x18>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	f003 0307 	and.w	r3, r3, #7
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000ed00 	.word	0xe000ed00

080047d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	db0a      	blt.n	80047fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	490c      	ldr	r1, [pc, #48]	@ (800481c <__NVIC_SetPriority+0x4c>)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	0112      	lsls	r2, r2, #4
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	440b      	add	r3, r1
 80047f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047f8:	e00a      	b.n	8004810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	4908      	ldr	r1, [pc, #32]	@ (8004820 <__NVIC_SetPriority+0x50>)
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	3b04      	subs	r3, #4
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	440b      	add	r3, r1
 800480e:	761a      	strb	r2, [r3, #24]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	e000e100 	.word	0xe000e100
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004824:	b480      	push	{r7}
 8004826:	b089      	sub	sp, #36	@ 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f1c3 0307 	rsb	r3, r3, #7
 800483e:	2b04      	cmp	r3, #4
 8004840:	bf28      	it	cs
 8004842:	2304      	movcs	r3, #4
 8004844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	3304      	adds	r3, #4
 800484a:	2b06      	cmp	r3, #6
 800484c:	d902      	bls.n	8004854 <NVIC_EncodePriority+0x30>
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3b03      	subs	r3, #3
 8004852:	e000      	b.n	8004856 <NVIC_EncodePriority+0x32>
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004858:	f04f 32ff 	mov.w	r2, #4294967295
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43da      	mvns	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	401a      	ands	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800486c:	f04f 31ff 	mov.w	r1, #4294967295
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	fa01 f303 	lsl.w	r3, r1, r3
 8004876:	43d9      	mvns	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800487c:	4313      	orrs	r3, r2
         );
}
 800487e:	4618      	mov	r0, r3
 8004880:	3724      	adds	r7, #36	@ 0x24
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800489c:	d301      	bcc.n	80048a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800489e:	2301      	movs	r3, #1
 80048a0:	e00f      	b.n	80048c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048a2:	4a0a      	ldr	r2, [pc, #40]	@ (80048cc <SysTick_Config+0x40>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048aa:	210f      	movs	r1, #15
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	f7ff ff8e 	bl	80047d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048b4:	4b05      	ldr	r3, [pc, #20]	@ (80048cc <SysTick_Config+0x40>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ba:	4b04      	ldr	r3, [pc, #16]	@ (80048cc <SysTick_Config+0x40>)
 80048bc:	2207      	movs	r2, #7
 80048be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	e000e010 	.word	0xe000e010

080048d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ff47 	bl	800476c <__NVIC_SetPriorityGrouping>
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b086      	sub	sp, #24
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	4603      	mov	r3, r0
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048f8:	f7ff ff5c 	bl	80047b4 <__NVIC_GetPriorityGrouping>
 80048fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f7ff ff8e 	bl	8004824 <NVIC_EncodePriority>
 8004908:	4602      	mov	r2, r0
 800490a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff ff5d 	bl	80047d0 <__NVIC_SetPriority>
}
 8004916:	bf00      	nop
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff ffb0 	bl	800488c <SysTick_Config>
 800492c:	4603      	mov	r3, r0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004946:	e17f      	b.n	8004c48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	2101      	movs	r1, #1
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	4013      	ands	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8171 	beq.w	8004c42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d005      	beq.n	8004978 <HAL_GPIO_Init+0x40>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d130      	bne.n	80049da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	2203      	movs	r2, #3
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4013      	ands	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049ae:	2201      	movs	r2, #1
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4013      	ands	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	091b      	lsrs	r3, r3, #4
 80049c4:	f003 0201 	and.w	r2, r3, #1
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d118      	bne.n	8004a18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80049ec:	2201      	movs	r2, #1
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4013      	ands	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	08db      	lsrs	r3, r3, #3
 8004a02:	f003 0201 	and.w	r2, r3, #1
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d017      	beq.n	8004a54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	2203      	movs	r2, #3
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d123      	bne.n	8004aa8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	08da      	lsrs	r2, r3, #3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3208      	adds	r2, #8
 8004a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	220f      	movs	r2, #15
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4013      	ands	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	08da      	lsrs	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3208      	adds	r2, #8
 8004aa2:	6939      	ldr	r1, [r7, #16]
 8004aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 0203 	and.w	r2, r3, #3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80ac 	beq.w	8004c42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aea:	4b5f      	ldr	r3, [pc, #380]	@ (8004c68 <HAL_GPIO_Init+0x330>)
 8004aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aee:	4a5e      	ldr	r2, [pc, #376]	@ (8004c68 <HAL_GPIO_Init+0x330>)
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	6613      	str	r3, [r2, #96]	@ 0x60
 8004af6:	4b5c      	ldr	r3, [pc, #368]	@ (8004c68 <HAL_GPIO_Init+0x330>)
 8004af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b02:	4a5a      	ldr	r2, [pc, #360]	@ (8004c6c <HAL_GPIO_Init+0x334>)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	089b      	lsrs	r3, r3, #2
 8004b08:	3302      	adds	r3, #2
 8004b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	220f      	movs	r2, #15
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4013      	ands	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b2c:	d025      	beq.n	8004b7a <HAL_GPIO_Init+0x242>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a4f      	ldr	r2, [pc, #316]	@ (8004c70 <HAL_GPIO_Init+0x338>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01f      	beq.n	8004b76 <HAL_GPIO_Init+0x23e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a4e      	ldr	r2, [pc, #312]	@ (8004c74 <HAL_GPIO_Init+0x33c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d019      	beq.n	8004b72 <HAL_GPIO_Init+0x23a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a4d      	ldr	r2, [pc, #308]	@ (8004c78 <HAL_GPIO_Init+0x340>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <HAL_GPIO_Init+0x236>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a4c      	ldr	r2, [pc, #304]	@ (8004c7c <HAL_GPIO_Init+0x344>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00d      	beq.n	8004b6a <HAL_GPIO_Init+0x232>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a4b      	ldr	r2, [pc, #300]	@ (8004c80 <HAL_GPIO_Init+0x348>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <HAL_GPIO_Init+0x22e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a4a      	ldr	r2, [pc, #296]	@ (8004c84 <HAL_GPIO_Init+0x34c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d101      	bne.n	8004b62 <HAL_GPIO_Init+0x22a>
 8004b5e:	2306      	movs	r3, #6
 8004b60:	e00c      	b.n	8004b7c <HAL_GPIO_Init+0x244>
 8004b62:	2307      	movs	r3, #7
 8004b64:	e00a      	b.n	8004b7c <HAL_GPIO_Init+0x244>
 8004b66:	2305      	movs	r3, #5
 8004b68:	e008      	b.n	8004b7c <HAL_GPIO_Init+0x244>
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	e006      	b.n	8004b7c <HAL_GPIO_Init+0x244>
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e004      	b.n	8004b7c <HAL_GPIO_Init+0x244>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e002      	b.n	8004b7c <HAL_GPIO_Init+0x244>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <HAL_GPIO_Init+0x244>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	f002 0203 	and.w	r2, r2, #3
 8004b82:	0092      	lsls	r2, r2, #2
 8004b84:	4093      	lsls	r3, r2
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b8c:	4937      	ldr	r1, [pc, #220]	@ (8004c6c <HAL_GPIO_Init+0x334>)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	089b      	lsrs	r3, r3, #2
 8004b92:	3302      	adds	r3, #2
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c88 <HAL_GPIO_Init+0x350>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bbe:	4a32      	ldr	r2, [pc, #200]	@ (8004c88 <HAL_GPIO_Init+0x350>)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bc4:	4b30      	ldr	r3, [pc, #192]	@ (8004c88 <HAL_GPIO_Init+0x350>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004be8:	4a27      	ldr	r2, [pc, #156]	@ (8004c88 <HAL_GPIO_Init+0x350>)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004bee:	4b26      	ldr	r3, [pc, #152]	@ (8004c88 <HAL_GPIO_Init+0x350>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c12:	4a1d      	ldr	r2, [pc, #116]	@ (8004c88 <HAL_GPIO_Init+0x350>)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004c18:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <HAL_GPIO_Init+0x350>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4013      	ands	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c3c:	4a12      	ldr	r2, [pc, #72]	@ (8004c88 <HAL_GPIO_Init+0x350>)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	3301      	adds	r3, #1
 8004c46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f47f ae78 	bne.w	8004948 <HAL_GPIO_Init+0x10>
  }
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	48000400 	.word	0x48000400
 8004c74:	48000800 	.word	0x48000800
 8004c78:	48000c00 	.word	0x48000c00
 8004c7c:	48001000 	.word	0x48001000
 8004c80:	48001400 	.word	0x48001400
 8004c84:	48001800 	.word	0x48001800
 8004c88:	40010400 	.word	0x40010400

08004c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	807b      	strh	r3, [r7, #2]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c9c:	787b      	ldrb	r3, [r7, #1]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ca2:	887a      	ldrh	r2, [r7, #2]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ca8:	e002      	b.n	8004cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004caa:	887a      	ldrh	r2, [r7, #2]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004cc0:	4b04      	ldr	r3, [pc, #16]	@ (8004cd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40007000 	.word	0x40007000

08004cd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce6:	d130      	bne.n	8004d4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ce8:	4b23      	ldr	r3, [pc, #140]	@ (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf4:	d038      	beq.n	8004d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cf6:	4b20      	ldr	r3, [pc, #128]	@ (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d06:	4b1d      	ldr	r3, [pc, #116]	@ (8004d7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2232      	movs	r2, #50	@ 0x32
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	4a1b      	ldr	r2, [pc, #108]	@ (8004d80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	0c9b      	lsrs	r3, r3, #18
 8004d18:	3301      	adds	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d1c:	e002      	b.n	8004d24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d24:	4b14      	ldr	r3, [pc, #80]	@ (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d30:	d102      	bne.n	8004d38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f2      	bne.n	8004d1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d38:	4b0f      	ldr	r3, [pc, #60]	@ (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d44:	d110      	bne.n	8004d68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e00f      	b.n	8004d6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d56:	d007      	beq.n	8004d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d58:	4b07      	ldr	r3, [pc, #28]	@ (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d60:	4a05      	ldr	r2, [pc, #20]	@ (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	2000001c 	.word	0x2000001c
 8004d80:	431bde83 	.word	0x431bde83

08004d84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e3ca      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d96:	4b97      	ldr	r3, [pc, #604]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 030c 	and.w	r3, r3, #12
 8004d9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da0:	4b94      	ldr	r3, [pc, #592]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80e4 	beq.w	8004f80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <HAL_RCC_OscConfig+0x4a>
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b0c      	cmp	r3, #12
 8004dc2:	f040 808b 	bne.w	8004edc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	f040 8087 	bne.w	8004edc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dce:	4b89      	ldr	r3, [pc, #548]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_RCC_OscConfig+0x62>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e3a2      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	4b82      	ldr	r3, [pc, #520]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <HAL_RCC_OscConfig+0x7c>
 8004df6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dfe:	e005      	b.n	8004e0c <HAL_RCC_OscConfig+0x88>
 8004e00:	4b7c      	ldr	r3, [pc, #496]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d223      	bcs.n	8004e58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fd55 	bl	80058c4 <RCC_SetFlashLatencyFromMSIRange>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e383      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e24:	4b73      	ldr	r3, [pc, #460]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a72      	ldr	r2, [pc, #456]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e2a:	f043 0308 	orr.w	r3, r3, #8
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	4b70      	ldr	r3, [pc, #448]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	496d      	ldr	r1, [pc, #436]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e42:	4b6c      	ldr	r3, [pc, #432]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	4968      	ldr	r1, [pc, #416]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	604b      	str	r3, [r1, #4]
 8004e56:	e025      	b.n	8004ea4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e58:	4b66      	ldr	r3, [pc, #408]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a65      	ldr	r2, [pc, #404]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e5e:	f043 0308 	orr.w	r3, r3, #8
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	4b63      	ldr	r3, [pc, #396]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	4960      	ldr	r1, [pc, #384]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e76:	4b5f      	ldr	r3, [pc, #380]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	495b      	ldr	r1, [pc, #364]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fd15 	bl	80058c4 <RCC_SetFlashLatencyFromMSIRange>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e343      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ea4:	f000 fc4a 	bl	800573c <HAL_RCC_GetSysClockFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b52      	ldr	r3, [pc, #328]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	091b      	lsrs	r3, r3, #4
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	4950      	ldr	r1, [pc, #320]	@ (8004ff8 <HAL_RCC_OscConfig+0x274>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec0:	4a4e      	ldr	r2, [pc, #312]	@ (8004ffc <HAL_RCC_OscConfig+0x278>)
 8004ec2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ec4:	4b4e      	ldr	r3, [pc, #312]	@ (8005000 <HAL_RCC_OscConfig+0x27c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fbcf 	bl	800466c <HAL_InitTick>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d052      	beq.n	8004f7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	e327      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d032      	beq.n	8004f4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ee4:	4b43      	ldr	r3, [pc, #268]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a42      	ldr	r2, [pc, #264]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ef0:	f7ff fc0c 	bl	800470c <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ef8:	f7ff fc08 	bl	800470c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e310      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f0a:	4b3a      	ldr	r3, [pc, #232]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f16:	4b37      	ldr	r3, [pc, #220]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a36      	ldr	r2, [pc, #216]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f1c:	f043 0308 	orr.w	r3, r3, #8
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b34      	ldr	r3, [pc, #208]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	4931      	ldr	r1, [pc, #196]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f34:	4b2f      	ldr	r3, [pc, #188]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	492c      	ldr	r1, [pc, #176]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]
 8004f48:	e01a      	b.n	8004f80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a29      	ldr	r2, [pc, #164]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f56:	f7ff fbd9 	bl	800470c <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f5e:	f7ff fbd5 	bl	800470c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e2dd      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f70:	4b20      	ldr	r3, [pc, #128]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f0      	bne.n	8004f5e <HAL_RCC_OscConfig+0x1da>
 8004f7c:	e000      	b.n	8004f80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d074      	beq.n	8005076 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d005      	beq.n	8004f9e <HAL_RCC_OscConfig+0x21a>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b0c      	cmp	r3, #12
 8004f96:	d10e      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d10b      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d064      	beq.n	8005074 <HAL_RCC_OscConfig+0x2f0>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d160      	bne.n	8005074 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e2ba      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_OscConfig+0x24a>
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e026      	b.n	800501c <HAL_RCC_OscConfig+0x298>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fd6:	d115      	bne.n	8005004 <HAL_RCC_OscConfig+0x280>
 8004fd8:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a05      	ldr	r2, [pc, #20]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004fde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	4b03      	ldr	r3, [pc, #12]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a02      	ldr	r2, [pc, #8]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	e014      	b.n	800501c <HAL_RCC_OscConfig+0x298>
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	08008c38 	.word	0x08008c38
 8004ffc:	2000001c 	.word	0x2000001c
 8005000:	2000006c 	.word	0x2000006c
 8005004:	4ba0      	ldr	r3, [pc, #640]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a9f      	ldr	r2, [pc, #636]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 800500a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	4b9d      	ldr	r3, [pc, #628]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a9c      	ldr	r2, [pc, #624]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005016:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800501a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d013      	beq.n	800504c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7ff fb72 	bl	800470c <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800502c:	f7ff fb6e 	bl	800470c <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b64      	cmp	r3, #100	@ 0x64
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e276      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800503e:	4b92      	ldr	r3, [pc, #584]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x2a8>
 800504a:	e014      	b.n	8005076 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7ff fb5e 	bl	800470c <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005054:	f7ff fb5a 	bl	800470c <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b64      	cmp	r3, #100	@ 0x64
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e262      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005066:	4b88      	ldr	r3, [pc, #544]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x2d0>
 8005072:	e000      	b.n	8005076 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d060      	beq.n	8005144 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b04      	cmp	r3, #4
 8005086:	d005      	beq.n	8005094 <HAL_RCC_OscConfig+0x310>
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b0c      	cmp	r3, #12
 800508c:	d119      	bne.n	80050c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d116      	bne.n	80050c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005094:	4b7c      	ldr	r3, [pc, #496]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_OscConfig+0x328>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e23f      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ac:	4b76      	ldr	r3, [pc, #472]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	061b      	lsls	r3, r3, #24
 80050ba:	4973      	ldr	r1, [pc, #460]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050c0:	e040      	b.n	8005144 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d023      	beq.n	8005112 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a6e      	ldr	r2, [pc, #440]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d6:	f7ff fb19 	bl	800470c <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050de:	f7ff fb15 	bl	800470c <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e21d      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f0:	4b65      	ldr	r3, [pc, #404]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fc:	4b62      	ldr	r3, [pc, #392]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	061b      	lsls	r3, r3, #24
 800510a:	495f      	ldr	r1, [pc, #380]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 800510c:	4313      	orrs	r3, r2
 800510e:	604b      	str	r3, [r1, #4]
 8005110:	e018      	b.n	8005144 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005112:	4b5d      	ldr	r3, [pc, #372]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a5c      	ldr	r2, [pc, #368]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800511c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511e:	f7ff faf5 	bl	800470c <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005126:	f7ff faf1 	bl	800470c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e1f9      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005138:	4b53      	ldr	r3, [pc, #332]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f0      	bne.n	8005126 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d03c      	beq.n	80051ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01c      	beq.n	8005192 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005158:	4b4b      	ldr	r3, [pc, #300]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 800515a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800515e:	4a4a      	ldr	r2, [pc, #296]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005168:	f7ff fad0 	bl	800470c <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005170:	f7ff facc 	bl	800470c <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e1d4      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005182:	4b41      	ldr	r3, [pc, #260]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005184:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0ef      	beq.n	8005170 <HAL_RCC_OscConfig+0x3ec>
 8005190:	e01b      	b.n	80051ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005192:	4b3d      	ldr	r3, [pc, #244]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005198:	4a3b      	ldr	r2, [pc, #236]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a2:	f7ff fab3 	bl	800470c <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051aa:	f7ff faaf 	bl	800470c <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e1b7      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051bc:	4b32      	ldr	r3, [pc, #200]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80051be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ef      	bne.n	80051aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80a6 	beq.w	8005324 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d8:	2300      	movs	r3, #0
 80051da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10d      	bne.n	8005204 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e8:	4b27      	ldr	r3, [pc, #156]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ec:	4a26      	ldr	r2, [pc, #152]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80051ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80051f4:	4b24      	ldr	r3, [pc, #144]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 80051f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005200:	2301      	movs	r3, #1
 8005202:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005204:	4b21      	ldr	r3, [pc, #132]	@ (800528c <HAL_RCC_OscConfig+0x508>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d118      	bne.n	8005242 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005210:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <HAL_RCC_OscConfig+0x508>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1d      	ldr	r2, [pc, #116]	@ (800528c <HAL_RCC_OscConfig+0x508>)
 8005216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800521a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800521c:	f7ff fa76 	bl	800470c <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005224:	f7ff fa72 	bl	800470c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e17a      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005236:	4b15      	ldr	r3, [pc, #84]	@ (800528c <HAL_RCC_OscConfig+0x508>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d108      	bne.n	800525c <HAL_RCC_OscConfig+0x4d8>
 800524a:	4b0f      	ldr	r3, [pc, #60]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	4a0d      	ldr	r2, [pc, #52]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800525a:	e029      	b.n	80052b0 <HAL_RCC_OscConfig+0x52c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b05      	cmp	r3, #5
 8005262:	d115      	bne.n	8005290 <HAL_RCC_OscConfig+0x50c>
 8005264:	4b08      	ldr	r3, [pc, #32]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526a:	4a07      	ldr	r2, [pc, #28]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 800526c:	f043 0304 	orr.w	r3, r3, #4
 8005270:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005274:	4b04      	ldr	r3, [pc, #16]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527a:	4a03      	ldr	r2, [pc, #12]	@ (8005288 <HAL_RCC_OscConfig+0x504>)
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005284:	e014      	b.n	80052b0 <HAL_RCC_OscConfig+0x52c>
 8005286:	bf00      	nop
 8005288:	40021000 	.word	0x40021000
 800528c:	40007000 	.word	0x40007000
 8005290:	4b9c      	ldr	r3, [pc, #624]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005296:	4a9b      	ldr	r2, [pc, #620]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052a0:	4b98      	ldr	r3, [pc, #608]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a6:	4a97      	ldr	r2, [pc, #604]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80052a8:	f023 0304 	bic.w	r3, r3, #4
 80052ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d016      	beq.n	80052e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7ff fa28 	bl	800470c <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c0:	f7ff fa24 	bl	800470c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e12a      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d6:	4b8b      	ldr	r3, [pc, #556]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0ed      	beq.n	80052c0 <HAL_RCC_OscConfig+0x53c>
 80052e4:	e015      	b.n	8005312 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e6:	f7ff fa11 	bl	800470c <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052ec:	e00a      	b.n	8005304 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7ff fa0d 	bl	800470c <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e113      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005304:	4b7f      	ldr	r3, [pc, #508]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1ed      	bne.n	80052ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005312:	7ffb      	ldrb	r3, [r7, #31]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d105      	bne.n	8005324 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005318:	4b7a      	ldr	r3, [pc, #488]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 800531a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531c:	4a79      	ldr	r2, [pc, #484]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 800531e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005322:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80fe 	beq.w	800552a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005332:	2b02      	cmp	r3, #2
 8005334:	f040 80d0 	bne.w	80054d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005338:	4b72      	ldr	r3, [pc, #456]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f003 0203 	and.w	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005348:	429a      	cmp	r2, r3
 800534a:	d130      	bne.n	80053ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	3b01      	subs	r3, #1
 8005358:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d127      	bne.n	80053ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005368:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d11f      	bne.n	80053ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005378:	2a07      	cmp	r2, #7
 800537a:	bf14      	ite	ne
 800537c:	2201      	movne	r2, #1
 800537e:	2200      	moveq	r2, #0
 8005380:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005382:	4293      	cmp	r3, r2
 8005384:	d113      	bne.n	80053ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	3b01      	subs	r3, #1
 8005394:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005396:	429a      	cmp	r2, r3
 8005398:	d109      	bne.n	80053ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	3b01      	subs	r3, #1
 80053a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d06e      	beq.n	800548c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d069      	beq.n	8005488 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053b4:	4b53      	ldr	r3, [pc, #332]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d105      	bne.n	80053cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053c0:	4b50      	ldr	r3, [pc, #320]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0ad      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053d0:	4b4c      	ldr	r3, [pc, #304]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a4b      	ldr	r2, [pc, #300]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80053d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053dc:	f7ff f996 	bl	800470c <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e4:	f7ff f992 	bl	800470c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e09a      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f6:	4b43      	ldr	r3, [pc, #268]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005402:	4b40      	ldr	r3, [pc, #256]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	4b40      	ldr	r3, [pc, #256]	@ (8005508 <HAL_RCC_OscConfig+0x784>)
 8005408:	4013      	ands	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005412:	3a01      	subs	r2, #1
 8005414:	0112      	lsls	r2, r2, #4
 8005416:	4311      	orrs	r1, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800541c:	0212      	lsls	r2, r2, #8
 800541e:	4311      	orrs	r1, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005424:	0852      	lsrs	r2, r2, #1
 8005426:	3a01      	subs	r2, #1
 8005428:	0552      	lsls	r2, r2, #21
 800542a:	4311      	orrs	r1, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005430:	0852      	lsrs	r2, r2, #1
 8005432:	3a01      	subs	r2, #1
 8005434:	0652      	lsls	r2, r2, #25
 8005436:	4311      	orrs	r1, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800543c:	0912      	lsrs	r2, r2, #4
 800543e:	0452      	lsls	r2, r2, #17
 8005440:	430a      	orrs	r2, r1
 8005442:	4930      	ldr	r1, [pc, #192]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 8005444:	4313      	orrs	r3, r2
 8005446:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005448:	4b2e      	ldr	r3, [pc, #184]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2d      	ldr	r2, [pc, #180]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 800544e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005452:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005454:	4b2b      	ldr	r3, [pc, #172]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4a2a      	ldr	r2, [pc, #168]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 800545a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800545e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005460:	f7ff f954 	bl	800470c <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005468:	f7ff f950 	bl	800470c <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e058      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800547a:	4b22      	ldr	r3, [pc, #136]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005486:	e050      	b.n	800552a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e04f      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800548c:	4b1d      	ldr	r3, [pc, #116]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d148      	bne.n	800552a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005498:	4b1a      	ldr	r3, [pc, #104]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a19      	ldr	r2, [pc, #100]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 800549e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054a4:	4b17      	ldr	r3, [pc, #92]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a16      	ldr	r2, [pc, #88]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80054aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054b0:	f7ff f92c 	bl	800470c <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b8:	f7ff f928 	bl	800470c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e030      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x734>
 80054d6:	e028      	b.n	800552a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b0c      	cmp	r3, #12
 80054dc:	d023      	beq.n	8005526 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054de:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a08      	ldr	r2, [pc, #32]	@ (8005504 <HAL_RCC_OscConfig+0x780>)
 80054e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ea:	f7ff f90f 	bl	800470c <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f0:	e00c      	b.n	800550c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f2:	f7ff f90b 	bl	800470c <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d905      	bls.n	800550c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e013      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
 8005504:	40021000 	.word	0x40021000
 8005508:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800550c:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <HAL_RCC_OscConfig+0x7b0>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1ec      	bne.n	80054f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <HAL_RCC_OscConfig+0x7b0>)
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	4905      	ldr	r1, [pc, #20]	@ (8005534 <HAL_RCC_OscConfig+0x7b0>)
 800551e:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <HAL_RCC_OscConfig+0x7b4>)
 8005520:	4013      	ands	r3, r2
 8005522:	60cb      	str	r3, [r1, #12]
 8005524:	e001      	b.n	800552a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40021000 	.word	0x40021000
 8005538:	feeefffc 	.word	0xfeeefffc

0800553c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0e7      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005550:	4b75      	ldr	r3, [pc, #468]	@ (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d910      	bls.n	8005580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	4b72      	ldr	r3, [pc, #456]	@ (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 0207 	bic.w	r2, r3, #7
 8005566:	4970      	ldr	r1, [pc, #448]	@ (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4313      	orrs	r3, r2
 800556c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556e:	4b6e      	ldr	r3, [pc, #440]	@ (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0cf      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d010      	beq.n	80055ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	4b66      	ldr	r3, [pc, #408]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005598:	429a      	cmp	r2, r3
 800559a:	d908      	bls.n	80055ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800559c:	4b63      	ldr	r3, [pc, #396]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4960      	ldr	r1, [pc, #384]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d04c      	beq.n	8005654 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d107      	bne.n	80055d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c2:	4b5a      	ldr	r3, [pc, #360]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d121      	bne.n	8005612 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0a6      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d107      	bne.n	80055ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055da:	4b54      	ldr	r3, [pc, #336]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d115      	bne.n	8005612 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e09a      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055f2:	4b4e      	ldr	r3, [pc, #312]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e08e      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005602:	4b4a      	ldr	r3, [pc, #296]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e086      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005612:	4b46      	ldr	r3, [pc, #280]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4943      	ldr	r1, [pc, #268]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005620:	4313      	orrs	r3, r2
 8005622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005624:	f7ff f872 	bl	800470c <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7ff f86e 	bl	800470c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e06e      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b3a      	ldr	r3, [pc, #232]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 020c 	and.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d1eb      	bne.n	800562c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d010      	beq.n	8005682 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	4b31      	ldr	r3, [pc, #196]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800566c:	429a      	cmp	r2, r3
 800566e:	d208      	bcs.n	8005682 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005670:	4b2e      	ldr	r3, [pc, #184]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	492b      	ldr	r1, [pc, #172]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005682:	4b29      	ldr	r3, [pc, #164]	@ (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d210      	bcs.n	80056b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005690:	4b25      	ldr	r3, [pc, #148]	@ (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 0207 	bic.w	r2, r3, #7
 8005698:	4923      	ldr	r1, [pc, #140]	@ (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	4313      	orrs	r3, r2
 800569e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a0:	4b21      	ldr	r3, [pc, #132]	@ (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d001      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e036      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056be:	4b1b      	ldr	r3, [pc, #108]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	4918      	ldr	r1, [pc, #96]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d009      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056dc:	4b13      	ldr	r3, [pc, #76]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4910      	ldr	r1, [pc, #64]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056f0:	f000 f824 	bl	800573c <HAL_RCC_GetSysClockFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b0d      	ldr	r3, [pc, #52]	@ (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	490b      	ldr	r1, [pc, #44]	@ (8005730 <HAL_RCC_ClockConfig+0x1f4>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	4a09      	ldr	r2, [pc, #36]	@ (8005734 <HAL_RCC_ClockConfig+0x1f8>)
 800570e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005710:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <HAL_RCC_ClockConfig+0x1fc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe ffa9 	bl	800466c <HAL_InitTick>
 800571a:	4603      	mov	r3, r0
 800571c:	72fb      	strb	r3, [r7, #11]

  return status;
 800571e:	7afb      	ldrb	r3, [r7, #11]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40022000 	.word	0x40022000
 800572c:	40021000 	.word	0x40021000
 8005730:	08008c38 	.word	0x08008c38
 8005734:	2000001c 	.word	0x2000001c
 8005738:	2000006c 	.word	0x2000006c

0800573c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800573c:	b480      	push	{r7}
 800573e:	b089      	sub	sp, #36	@ 0x24
 8005740:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	2300      	movs	r3, #0
 8005748:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800574a:	4b3e      	ldr	r3, [pc, #248]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005754:	4b3b      	ldr	r3, [pc, #236]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0x34>
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b0c      	cmp	r3, #12
 8005768:	d121      	bne.n	80057ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11e      	bne.n	80057ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005770:	4b34      	ldr	r3, [pc, #208]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800577c:	4b31      	ldr	r3, [pc, #196]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 800577e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	e005      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800578c:	4b2d      	ldr	r3, [pc, #180]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005798:	4a2b      	ldr	r2, [pc, #172]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x10c>)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10d      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057ac:	e00a      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d102      	bne.n	80057ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057b4:	4b25      	ldr	r3, [pc, #148]	@ (800584c <HAL_RCC_GetSysClockFreq+0x110>)
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	e004      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057c0:	4b23      	ldr	r3, [pc, #140]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x114>)
 80057c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	d134      	bne.n	8005834 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d003      	beq.n	80057e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d003      	beq.n	80057e8 <HAL_RCC_GetSysClockFreq+0xac>
 80057e0:	e005      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057e2:	4b1a      	ldr	r3, [pc, #104]	@ (800584c <HAL_RCC_GetSysClockFreq+0x110>)
 80057e4:	617b      	str	r3, [r7, #20]
      break;
 80057e6:	e005      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057e8:	4b19      	ldr	r3, [pc, #100]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x114>)
 80057ea:	617b      	str	r3, [r7, #20]
      break;
 80057ec:	e002      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	617b      	str	r3, [r7, #20]
      break;
 80057f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057f4:	4b13      	ldr	r3, [pc, #76]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	091b      	lsrs	r3, r3, #4
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	3301      	adds	r3, #1
 8005800:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005802:	4b10      	ldr	r3, [pc, #64]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	0a1b      	lsrs	r3, r3, #8
 8005808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	fb03 f202 	mul.w	r2, r3, r2
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800581a:	4b0a      	ldr	r3, [pc, #40]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	0e5b      	lsrs	r3, r3, #25
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	3301      	adds	r3, #1
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005834:	69bb      	ldr	r3, [r7, #24]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3724      	adds	r7, #36	@ 0x24
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40021000 	.word	0x40021000
 8005848:	08008c50 	.word	0x08008c50
 800584c:	00f42400 	.word	0x00f42400
 8005850:	007a1200 	.word	0x007a1200

08005854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005858:	4b03      	ldr	r3, [pc, #12]	@ (8005868 <HAL_RCC_GetHCLKFreq+0x14>)
 800585a:	681b      	ldr	r3, [r3, #0]
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	2000001c 	.word	0x2000001c

0800586c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005870:	f7ff fff0 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4904      	ldr	r1, [pc, #16]	@ (8005894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40021000 	.word	0x40021000
 8005894:	08008c48 	.word	0x08008c48

08005898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800589c:	f7ff ffda 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 80058a0:	4602      	mov	r2, r0
 80058a2:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	0adb      	lsrs	r3, r3, #11
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	4904      	ldr	r1, [pc, #16]	@ (80058c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40021000 	.word	0x40021000
 80058c0:	08008c48 	.word	0x08008c48

080058c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80058d0:	4b2a      	ldr	r3, [pc, #168]	@ (800597c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058dc:	f7ff f9ee 	bl	8004cbc <HAL_PWREx_GetVoltageRange>
 80058e0:	6178      	str	r0, [r7, #20]
 80058e2:	e014      	b.n	800590e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058e4:	4b25      	ldr	r3, [pc, #148]	@ (800597c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e8:	4a24      	ldr	r2, [pc, #144]	@ (800597c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80058f0:	4b22      	ldr	r3, [pc, #136]	@ (800597c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058fc:	f7ff f9de 	bl	8004cbc <HAL_PWREx_GetVoltageRange>
 8005900:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005902:	4b1e      	ldr	r3, [pc, #120]	@ (800597c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005906:	4a1d      	ldr	r2, [pc, #116]	@ (800597c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800590c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005914:	d10b      	bne.n	800592e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b80      	cmp	r3, #128	@ 0x80
 800591a:	d919      	bls.n	8005950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005920:	d902      	bls.n	8005928 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005922:	2302      	movs	r3, #2
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	e013      	b.n	8005950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005928:	2301      	movs	r3, #1
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	e010      	b.n	8005950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b80      	cmp	r3, #128	@ 0x80
 8005932:	d902      	bls.n	800593a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005934:	2303      	movs	r3, #3
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	e00a      	b.n	8005950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b80      	cmp	r3, #128	@ 0x80
 800593e:	d102      	bne.n	8005946 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005940:	2302      	movs	r3, #2
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	e004      	b.n	8005950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b70      	cmp	r3, #112	@ 0x70
 800594a:	d101      	bne.n	8005950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800594c:	2301      	movs	r3, #1
 800594e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f023 0207 	bic.w	r2, r3, #7
 8005958:	4909      	ldr	r1, [pc, #36]	@ (8005980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005960:	4b07      	ldr	r3, [pc, #28]	@ (8005980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	429a      	cmp	r2, r3
 800596c:	d001      	beq.n	8005972 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40021000 	.word	0x40021000
 8005980:	40022000 	.word	0x40022000

08005984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800598c:	2300      	movs	r3, #0
 800598e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005990:	2300      	movs	r3, #0
 8005992:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800599c:	2b00      	cmp	r3, #0
 800599e:	d041      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80059a8:	d02a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80059aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80059ae:	d824      	bhi.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059b4:	d008      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80059b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059ba:	d81e      	bhi.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80059c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059c4:	d010      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059c6:	e018      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059c8:	4b86      	ldr	r3, [pc, #536]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a85      	ldr	r2, [pc, #532]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059d4:	e015      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3304      	adds	r3, #4
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fabb 	bl	8005f58 <RCCEx_PLLSAI1_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059e6:	e00c      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3320      	adds	r3, #32
 80059ec:	2100      	movs	r1, #0
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fba6 	bl	8006140 <RCCEx_PLLSAI2_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	74fb      	strb	r3, [r7, #19]
      break;
 80059fe:	e000      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a02:	7cfb      	ldrb	r3, [r7, #19]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a08:	4b76      	ldr	r3, [pc, #472]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a16:	4973      	ldr	r1, [pc, #460]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005a1e:	e001      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	7cfb      	ldrb	r3, [r7, #19]
 8005a22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d041      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a38:	d02a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005a3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a3e:	d824      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a44:	d008      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a4a:	d81e      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a54:	d010      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a56:	e018      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a58:	4b62      	ldr	r3, [pc, #392]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4a61      	ldr	r2, [pc, #388]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a64:	e015      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fa73 	bl	8005f58 <RCCEx_PLLSAI1_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a76:	e00c      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3320      	adds	r3, #32
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fb5e 	bl	8006140 <RCCEx_PLLSAI2_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a88:	e003      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	74fb      	strb	r3, [r7, #19]
      break;
 8005a8e:	e000      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a92:	7cfb      	ldrb	r3, [r7, #19]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a98:	4b52      	ldr	r3, [pc, #328]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005aa6:	494f      	ldr	r1, [pc, #316]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005aae:	e001      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab0:	7cfb      	ldrb	r3, [r7, #19]
 8005ab2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80a0 	beq.w	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ac6:	4b47      	ldr	r3, [pc, #284]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00d      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005adc:	4b41      	ldr	r3, [pc, #260]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae0:	4a40      	ldr	r2, [pc, #256]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005af4:	2301      	movs	r3, #1
 8005af6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005af8:	4b3b      	ldr	r3, [pc, #236]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a3a      	ldr	r2, [pc, #232]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b04:	f7fe fe02 	bl	800470c <HAL_GetTick>
 8005b08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b0a:	e009      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b0c:	f7fe fdfe 	bl	800470c <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d902      	bls.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	74fb      	strb	r3, [r7, #19]
        break;
 8005b1e:	e005      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b20:	4b31      	ldr	r3, [pc, #196]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ef      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005b2c:	7cfb      	ldrb	r3, [r7, #19]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d15c      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b32:	4b2c      	ldr	r3, [pc, #176]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01f      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d019      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b50:	4b24      	ldr	r3, [pc, #144]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b5c:	4b21      	ldr	r3, [pc, #132]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b62:	4a20      	ldr	r2, [pc, #128]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b72:	4a1c      	ldr	r2, [pc, #112]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b7c:	4a19      	ldr	r2, [pc, #100]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8e:	f7fe fdbd 	bl	800470c <HAL_GetTick>
 8005b92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b94:	e00b      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b96:	f7fe fdb9 	bl	800470c <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d902      	bls.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	74fb      	strb	r3, [r7, #19]
            break;
 8005bac:	e006      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bae:	4b0d      	ldr	r3, [pc, #52]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0ec      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005bbc:	7cfb      	ldrb	r3, [r7, #19]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bc2:	4b08      	ldr	r3, [pc, #32]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bd2:	4904      	ldr	r1, [pc, #16]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005bda:	e009      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bdc:	7cfb      	ldrb	r3, [r7, #19]
 8005bde:	74bb      	strb	r3, [r7, #18]
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005be2:	bf00      	nop
 8005be4:	40021000 	.word	0x40021000
 8005be8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
 8005bee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bf0:	7c7b      	ldrb	r3, [r7, #17]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d105      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf6:	4b9e      	ldr	r3, [pc, #632]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfa:	4a9d      	ldr	r2, [pc, #628]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c0e:	4b98      	ldr	r3, [pc, #608]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c14:	f023 0203 	bic.w	r2, r3, #3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1c:	4994      	ldr	r1, [pc, #592]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c30:	4b8f      	ldr	r3, [pc, #572]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c36:	f023 020c 	bic.w	r2, r3, #12
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3e:	498c      	ldr	r1, [pc, #560]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c52:	4b87      	ldr	r3, [pc, #540]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	4983      	ldr	r1, [pc, #524]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c74:	4b7e      	ldr	r3, [pc, #504]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c82:	497b      	ldr	r1, [pc, #492]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c96:	4b76      	ldr	r3, [pc, #472]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca4:	4972      	ldr	r1, [pc, #456]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cb8:	4b6d      	ldr	r3, [pc, #436]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc6:	496a      	ldr	r1, [pc, #424]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cda:	4b65      	ldr	r3, [pc, #404]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce8:	4961      	ldr	r1, [pc, #388]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cfc:	4b5c      	ldr	r3, [pc, #368]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0a:	4959      	ldr	r1, [pc, #356]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d1e:	4b54      	ldr	r3, [pc, #336]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d24:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2c:	4950      	ldr	r1, [pc, #320]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d40:	4b4b      	ldr	r3, [pc, #300]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d46:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4e:	4948      	ldr	r1, [pc, #288]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d62:	4b43      	ldr	r3, [pc, #268]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d70:	493f      	ldr	r1, [pc, #252]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d028      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d84:	4b3a      	ldr	r3, [pc, #232]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d92:	4937      	ldr	r1, [pc, #220]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005da2:	d106      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005da4:	4b32      	ldr	r3, [pc, #200]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a31      	ldr	r2, [pc, #196]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dae:	60d3      	str	r3, [r2, #12]
 8005db0:	e011      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dba:	d10c      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f8c8 	bl	8005f58 <RCCEx_PLLSAI1_Config>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005dcc:	7cfb      	ldrb	r3, [r7, #19]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005dd2:	7cfb      	ldrb	r3, [r7, #19]
 8005dd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d028      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005de2:	4b23      	ldr	r3, [pc, #140]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df0:	491f      	ldr	r1, [pc, #124]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e00:	d106      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e02:	4b1b      	ldr	r3, [pc, #108]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4a1a      	ldr	r2, [pc, #104]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e0c:	60d3      	str	r3, [r2, #12]
 8005e0e:	e011      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e18:	d10c      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	2101      	movs	r1, #1
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 f899 	bl	8005f58 <RCCEx_PLLSAI1_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e2a:	7cfb      	ldrb	r3, [r7, #19]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005e30:	7cfb      	ldrb	r3, [r7, #19]
 8005e32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d02b      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e40:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e4e:	4908      	ldr	r1, [pc, #32]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e5e:	d109      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e60:	4b03      	ldr	r3, [pc, #12]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a02      	ldr	r2, [pc, #8]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e6a:	60d3      	str	r3, [r2, #12]
 8005e6c:	e014      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005e6e:	bf00      	nop
 8005e70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e7c:	d10c      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3304      	adds	r3, #4
 8005e82:	2101      	movs	r1, #1
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 f867 	bl	8005f58 <RCCEx_PLLSAI1_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e8e:	7cfb      	ldrb	r3, [r7, #19]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005e94:	7cfb      	ldrb	r3, [r7, #19]
 8005e96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d02f      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eaa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005eb2:	4928      	ldr	r1, [pc, #160]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ebe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ec2:	d10d      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	2102      	movs	r1, #2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 f844 	bl	8005f58 <RCCEx_PLLSAI1_Config>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ed4:	7cfb      	ldrb	r3, [r7, #19]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d014      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005eda:	7cfb      	ldrb	r3, [r7, #19]
 8005edc:	74bb      	strb	r3, [r7, #18]
 8005ede:	e011      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ee8:	d10c      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3320      	adds	r3, #32
 8005eee:	2102      	movs	r1, #2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 f925 	bl	8006140 <RCCEx_PLLSAI2_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005efa:	7cfb      	ldrb	r3, [r7, #19]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f00:	7cfb      	ldrb	r3, [r7, #19]
 8005f02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f10:	4b10      	ldr	r3, [pc, #64]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f16:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f1e:	490d      	ldr	r1, [pc, #52]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f32:	4b08      	ldr	r3, [pc, #32]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f38:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f42:	4904      	ldr	r1, [pc, #16]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40021000 	.word	0x40021000

08005f58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f66:	4b75      	ldr	r3, [pc, #468]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d018      	beq.n	8005fa4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f72:	4b72      	ldr	r3, [pc, #456]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f003 0203 	and.w	r2, r3, #3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d10d      	bne.n	8005f9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
       ||
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f8a:	4b6c      	ldr	r3, [pc, #432]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	091b      	lsrs	r3, r3, #4
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
       ||
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d047      	beq.n	800602e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	73fb      	strb	r3, [r7, #15]
 8005fa2:	e044      	b.n	800602e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d018      	beq.n	8005fde <RCCEx_PLLSAI1_Config+0x86>
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d825      	bhi.n	8005ffc <RCCEx_PLLSAI1_Config+0xa4>
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d002      	beq.n	8005fba <RCCEx_PLLSAI1_Config+0x62>
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d009      	beq.n	8005fcc <RCCEx_PLLSAI1_Config+0x74>
 8005fb8:	e020      	b.n	8005ffc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fba:	4b60      	ldr	r3, [pc, #384]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d11d      	bne.n	8006002 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fca:	e01a      	b.n	8006002 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fcc:	4b5b      	ldr	r3, [pc, #364]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d116      	bne.n	8006006 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fdc:	e013      	b.n	8006006 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fde:	4b57      	ldr	r3, [pc, #348]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10f      	bne.n	800600a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fea:	4b54      	ldr	r3, [pc, #336]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ffa:	e006      	b.n	800600a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8006000:	e004      	b.n	800600c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006002:	bf00      	nop
 8006004:	e002      	b.n	800600c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800600a:	bf00      	nop
    }

    if(status == HAL_OK)
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10d      	bne.n	800602e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006012:	4b4a      	ldr	r3, [pc, #296]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6819      	ldr	r1, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	3b01      	subs	r3, #1
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	430b      	orrs	r3, r1
 8006028:	4944      	ldr	r1, [pc, #272]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 800602a:	4313      	orrs	r3, r2
 800602c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d17d      	bne.n	8006130 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006034:	4b41      	ldr	r3, [pc, #260]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a40      	ldr	r2, [pc, #256]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 800603a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800603e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006040:	f7fe fb64 	bl	800470c <HAL_GetTick>
 8006044:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006046:	e009      	b.n	800605c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006048:	f7fe fb60 	bl	800470c <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d902      	bls.n	800605c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	73fb      	strb	r3, [r7, #15]
        break;
 800605a:	e005      	b.n	8006068 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800605c:	4b37      	ldr	r3, [pc, #220]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1ef      	bne.n	8006048 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d160      	bne.n	8006130 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d111      	bne.n	8006098 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006074:	4b31      	ldr	r3, [pc, #196]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800607c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6892      	ldr	r2, [r2, #8]
 8006084:	0211      	lsls	r1, r2, #8
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	68d2      	ldr	r2, [r2, #12]
 800608a:	0912      	lsrs	r2, r2, #4
 800608c:	0452      	lsls	r2, r2, #17
 800608e:	430a      	orrs	r2, r1
 8006090:	492a      	ldr	r1, [pc, #168]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006092:	4313      	orrs	r3, r2
 8006094:	610b      	str	r3, [r1, #16]
 8006096:	e027      	b.n	80060e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d112      	bne.n	80060c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800609e:	4b27      	ldr	r3, [pc, #156]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80060a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6892      	ldr	r2, [r2, #8]
 80060ae:	0211      	lsls	r1, r2, #8
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6912      	ldr	r2, [r2, #16]
 80060b4:	0852      	lsrs	r2, r2, #1
 80060b6:	3a01      	subs	r2, #1
 80060b8:	0552      	lsls	r2, r2, #21
 80060ba:	430a      	orrs	r2, r1
 80060bc:	491f      	ldr	r1, [pc, #124]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	610b      	str	r3, [r1, #16]
 80060c2:	e011      	b.n	80060e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060c4:	4b1d      	ldr	r3, [pc, #116]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80060cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6892      	ldr	r2, [r2, #8]
 80060d4:	0211      	lsls	r1, r2, #8
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6952      	ldr	r2, [r2, #20]
 80060da:	0852      	lsrs	r2, r2, #1
 80060dc:	3a01      	subs	r2, #1
 80060de:	0652      	lsls	r2, r2, #25
 80060e0:	430a      	orrs	r2, r1
 80060e2:	4916      	ldr	r1, [pc, #88]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060e8:	4b14      	ldr	r3, [pc, #80]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a13      	ldr	r2, [pc, #76]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f4:	f7fe fb0a 	bl	800470c <HAL_GetTick>
 80060f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060fa:	e009      	b.n	8006110 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060fc:	f7fe fb06 	bl	800470c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d902      	bls.n	8006110 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	73fb      	strb	r3, [r7, #15]
          break;
 800610e:	e005      	b.n	800611c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006110:	4b0a      	ldr	r3, [pc, #40]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0ef      	beq.n	80060fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006122:	4b06      	ldr	r3, [pc, #24]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	4904      	ldr	r1, [pc, #16]	@ (800613c <RCCEx_PLLSAI1_Config+0x1e4>)
 800612c:	4313      	orrs	r3, r2
 800612e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40021000 	.word	0x40021000

08006140 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800614e:	4b6a      	ldr	r3, [pc, #424]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d018      	beq.n	800618c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800615a:	4b67      	ldr	r3, [pc, #412]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f003 0203 	and.w	r2, r3, #3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d10d      	bne.n	8006186 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
       ||
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006172:	4b61      	ldr	r3, [pc, #388]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
       ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d047      	beq.n	8006216 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	73fb      	strb	r3, [r7, #15]
 800618a:	e044      	b.n	8006216 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b03      	cmp	r3, #3
 8006192:	d018      	beq.n	80061c6 <RCCEx_PLLSAI2_Config+0x86>
 8006194:	2b03      	cmp	r3, #3
 8006196:	d825      	bhi.n	80061e4 <RCCEx_PLLSAI2_Config+0xa4>
 8006198:	2b01      	cmp	r3, #1
 800619a:	d002      	beq.n	80061a2 <RCCEx_PLLSAI2_Config+0x62>
 800619c:	2b02      	cmp	r3, #2
 800619e:	d009      	beq.n	80061b4 <RCCEx_PLLSAI2_Config+0x74>
 80061a0:	e020      	b.n	80061e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061a2:	4b55      	ldr	r3, [pc, #340]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d11d      	bne.n	80061ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061b2:	e01a      	b.n	80061ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061b4:	4b50      	ldr	r3, [pc, #320]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d116      	bne.n	80061ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061c4:	e013      	b.n	80061ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061c6:	4b4c      	ldr	r3, [pc, #304]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10f      	bne.n	80061f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061d2:	4b49      	ldr	r3, [pc, #292]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061e2:	e006      	b.n	80061f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
      break;
 80061e8:	e004      	b.n	80061f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061ea:	bf00      	nop
 80061ec:	e002      	b.n	80061f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061ee:	bf00      	nop
 80061f0:	e000      	b.n	80061f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10d      	bne.n	8006216 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061fa:	4b3f      	ldr	r3, [pc, #252]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6819      	ldr	r1, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	3b01      	subs	r3, #1
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	430b      	orrs	r3, r1
 8006210:	4939      	ldr	r1, [pc, #228]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006212:	4313      	orrs	r3, r2
 8006214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d167      	bne.n	80062ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800621c:	4b36      	ldr	r3, [pc, #216]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a35      	ldr	r2, [pc, #212]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006228:	f7fe fa70 	bl	800470c <HAL_GetTick>
 800622c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800622e:	e009      	b.n	8006244 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006230:	f7fe fa6c 	bl	800470c <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d902      	bls.n	8006244 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	73fb      	strb	r3, [r7, #15]
        break;
 8006242:	e005      	b.n	8006250 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006244:	4b2c      	ldr	r3, [pc, #176]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1ef      	bne.n	8006230 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d14a      	bne.n	80062ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d111      	bne.n	8006280 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800625c:	4b26      	ldr	r3, [pc, #152]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6892      	ldr	r2, [r2, #8]
 800626c:	0211      	lsls	r1, r2, #8
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	68d2      	ldr	r2, [r2, #12]
 8006272:	0912      	lsrs	r2, r2, #4
 8006274:	0452      	lsls	r2, r2, #17
 8006276:	430a      	orrs	r2, r1
 8006278:	491f      	ldr	r1, [pc, #124]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800627a:	4313      	orrs	r3, r2
 800627c:	614b      	str	r3, [r1, #20]
 800627e:	e011      	b.n	80062a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006280:	4b1d      	ldr	r3, [pc, #116]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006288:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6892      	ldr	r2, [r2, #8]
 8006290:	0211      	lsls	r1, r2, #8
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6912      	ldr	r2, [r2, #16]
 8006296:	0852      	lsrs	r2, r2, #1
 8006298:	3a01      	subs	r2, #1
 800629a:	0652      	lsls	r2, r2, #25
 800629c:	430a      	orrs	r2, r1
 800629e:	4916      	ldr	r1, [pc, #88]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80062a4:	4b14      	ldr	r3, [pc, #80]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a13      	ldr	r2, [pc, #76]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b0:	f7fe fa2c 	bl	800470c <HAL_GetTick>
 80062b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062b6:	e009      	b.n	80062cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062b8:	f7fe fa28 	bl	800470c <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d902      	bls.n	80062cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	73fb      	strb	r3, [r7, #15]
          break;
 80062ca:	e005      	b.n	80062d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062cc:	4b0a      	ldr	r3, [pc, #40]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ef      	beq.n	80062b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80062de:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	4904      	ldr	r1, [pc, #16]	@ (80062f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40021000 	.word	0x40021000

080062fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e095      	b.n	800643a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d108      	bne.n	8006328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800631e:	d009      	beq.n	8006334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	61da      	str	r2, [r3, #28]
 8006326:	e005      	b.n	8006334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fa faa2 	bl	8000898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800636a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006374:	d902      	bls.n	800637c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	e002      	b.n	8006382 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800637c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006380:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800638a:	d007      	beq.n	800639c <HAL_SPI_Init+0xa0>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006394:	d002      	beq.n	800639c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063de:	ea42 0103 	orr.w	r1, r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	0c1b      	lsrs	r3, r3, #16
 80063f8:	f003 0204 	and.w	r2, r3, #4
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006418:	ea42 0103 	orr.w	r1, r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b088      	sub	sp, #32
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	603b      	str	r3, [r7, #0]
 800644e:	4613      	mov	r3, r2
 8006450:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006452:	f7fe f95b 	bl	800470c <HAL_GetTick>
 8006456:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006458:	88fb      	ldrh	r3, [r7, #6]
 800645a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d001      	beq.n	800646c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006468:	2302      	movs	r3, #2
 800646a:	e15c      	b.n	8006726 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_SPI_Transmit+0x36>
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e154      	b.n	8006726 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_SPI_Transmit+0x48>
 8006486:	2302      	movs	r3, #2
 8006488:	e14d      	b.n	8006726 <HAL_SPI_Transmit+0x2e4>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2203      	movs	r2, #3
 8006496:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064dc:	d10f      	bne.n	80064fe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006508:	2b40      	cmp	r3, #64	@ 0x40
 800650a:	d007      	beq.n	800651c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800651a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006524:	d952      	bls.n	80065cc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_SPI_Transmit+0xf2>
 800652e:	8b7b      	ldrh	r3, [r7, #26]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d145      	bne.n	80065c0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006538:	881a      	ldrh	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006544:	1c9a      	adds	r2, r3, #2
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006558:	e032      	b.n	80065c0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b02      	cmp	r3, #2
 8006566:	d112      	bne.n	800658e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	881a      	ldrh	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006578:	1c9a      	adds	r2, r3, #2
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800658c:	e018      	b.n	80065c0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800658e:	f7fe f8bd 	bl	800470c <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d803      	bhi.n	80065a6 <HAL_SPI_Transmit+0x164>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d102      	bne.n	80065ac <HAL_SPI_Transmit+0x16a>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e0b2      	b.n	8006726 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1c7      	bne.n	800655a <HAL_SPI_Transmit+0x118>
 80065ca:	e083      	b.n	80066d4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_SPI_Transmit+0x198>
 80065d4:	8b7b      	ldrh	r3, [r7, #26]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d177      	bne.n	80066ca <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d912      	bls.n	800660a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e8:	881a      	ldrh	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f4:	1c9a      	adds	r2, r3, #2
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b02      	subs	r3, #2
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006608:	e05f      	b.n	80066ca <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	330c      	adds	r3, #12
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006630:	e04b      	b.n	80066ca <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b02      	cmp	r3, #2
 800663e:	d12b      	bne.n	8006698 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b01      	cmp	r3, #1
 8006648:	d912      	bls.n	8006670 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664e:	881a      	ldrh	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800665a:	1c9a      	adds	r2, r3, #2
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006664:	b29b      	uxth	r3, r3
 8006666:	3b02      	subs	r3, #2
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800666e:	e02c      	b.n	80066ca <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006696:	e018      	b.n	80066ca <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006698:	f7fe f838 	bl	800470c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d803      	bhi.n	80066b0 <HAL_SPI_Transmit+0x26e>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d102      	bne.n	80066b6 <HAL_SPI_Transmit+0x274>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e02d      	b.n	8006726 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1ae      	bne.n	8006632 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f947 	bl	800696c <SPI_EndRxTxTransaction>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e000      	b.n	8006726 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006724:	2300      	movs	r3, #0
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006740:	f7fd ffe4 	bl	800470c <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	1a9b      	subs	r3, r3, r2
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	4413      	add	r3, r2
 800674e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006750:	f7fd ffdc 	bl	800470c <HAL_GetTick>
 8006754:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006756:	4b39      	ldr	r3, [pc, #228]	@ (800683c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	015b      	lsls	r3, r3, #5
 800675c:	0d1b      	lsrs	r3, r3, #20
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	fb02 f303 	mul.w	r3, r2, r3
 8006764:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006766:	e054      	b.n	8006812 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676e:	d050      	beq.n	8006812 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006770:	f7fd ffcc 	bl	800470c <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	429a      	cmp	r2, r3
 800677e:	d902      	bls.n	8006786 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d13d      	bne.n	8006802 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006794:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800679e:	d111      	bne.n	80067c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a8:	d004      	beq.n	80067b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067b2:	d107      	bne.n	80067c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067cc:	d10f      	bne.n	80067ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e017      	b.n	8006832 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	3b01      	subs	r3, #1
 8006810:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4013      	ands	r3, r2
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	429a      	cmp	r2, r3
 8006820:	bf0c      	ite	eq
 8006822:	2301      	moveq	r3, #1
 8006824:	2300      	movne	r3, #0
 8006826:	b2db      	uxtb	r3, r3
 8006828:	461a      	mov	r2, r3
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	429a      	cmp	r2, r3
 800682e:	d19b      	bne.n	8006768 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3720      	adds	r7, #32
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	2000001c 	.word	0x2000001c

08006840 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	@ 0x28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006852:	f7fd ff5b 	bl	800470c <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	4413      	add	r3, r2
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006862:	f7fd ff53 	bl	800470c <HAL_GetTick>
 8006866:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006870:	4b3d      	ldr	r3, [pc, #244]	@ (8006968 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	00da      	lsls	r2, r3, #3
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	0d1b      	lsrs	r3, r3, #20
 8006880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006882:	fb02 f303 	mul.w	r3, r2, r3
 8006886:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006888:	e060      	b.n	800694c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006890:	d107      	bne.n	80068a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a8:	d050      	beq.n	800694c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068aa:	f7fd ff2f 	bl	800470c <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d902      	bls.n	80068c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d13d      	bne.n	800693c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80068ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068d8:	d111      	bne.n	80068fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068e2:	d004      	beq.n	80068ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ec:	d107      	bne.n	80068fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006906:	d10f      	bne.n	8006928 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006926:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e010      	b.n	800695e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	3b01      	subs	r3, #1
 800694a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	d196      	bne.n	800688a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3728      	adds	r7, #40	@ 0x28
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	2000001c 	.word	0x2000001c

0800696c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af02      	add	r7, sp, #8
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2200      	movs	r2, #0
 8006980:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff ff5b 	bl	8006840 <SPI_WaitFifoStateUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006994:	f043 0220 	orr.w	r2, r3, #32
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e027      	b.n	80069f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2200      	movs	r2, #0
 80069a8:	2180      	movs	r1, #128	@ 0x80
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fec0 	bl	8006730 <SPI_WaitFlagStateUntilTimeout>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ba:	f043 0220 	orr.w	r2, r3, #32
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e014      	b.n	80069f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7ff ff34 	bl	8006840 <SPI_WaitFifoStateUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e2:	f043 0220 	orr.w	r2, r3, #32
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e000      	b.n	80069f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e040      	b.n	8006a8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fa f8b6 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2224      	movs	r2, #36	@ 0x24
 8006a24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fb6a 	bl	8007118 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f8af 	bl	8006ba8 <UART_SetConfig>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e01b      	b.n	8006a8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fbe9 	bl	800725c <UART_CheckIdleState>
 8006a8a:	4603      	mov	r3, r0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	@ 0x28
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d177      	bne.n	8006b9c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_UART_Transmit+0x24>
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e070      	b.n	8006b9e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2221      	movs	r2, #33	@ 0x21
 8006ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aca:	f7fd fe1f 	bl	800470c <HAL_GetTick>
 8006ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	88fa      	ldrh	r2, [r7, #6]
 8006ad4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	88fa      	ldrh	r2, [r7, #6]
 8006adc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae8:	d108      	bne.n	8006afc <HAL_UART_Transmit+0x68>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	e003      	b.n	8006b04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b04:	e02f      	b.n	8006b66 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2180      	movs	r1, #128	@ 0x80
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fc4b 	bl	80073ac <UART_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e03b      	b.n	8006b9e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10b      	bne.n	8006b44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	881a      	ldrh	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b38:	b292      	uxth	r2, r2
 8006b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	3302      	adds	r3, #2
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	e007      	b.n	8006b54 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	3301      	adds	r3, #1
 8006b52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1c9      	bne.n	8006b06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2140      	movs	r1, #64	@ 0x40
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fc15 	bl	80073ac <UART_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e005      	b.n	8006b9e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bac:	b08a      	sub	sp, #40	@ 0x28
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4ba4      	ldr	r3, [pc, #656]	@ (8006e68 <UART_SetConfig+0x2c0>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	6812      	ldr	r2, [r2, #0]
 8006bde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a99      	ldr	r2, [pc, #612]	@ (8006e6c <UART_SetConfig+0x2c4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c10:	4313      	orrs	r3, r2
 8006c12:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c24:	430a      	orrs	r2, r1
 8006c26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a90      	ldr	r2, [pc, #576]	@ (8006e70 <UART_SetConfig+0x2c8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d126      	bne.n	8006c80 <UART_SetConfig+0xd8>
 8006c32:	4b90      	ldr	r3, [pc, #576]	@ (8006e74 <UART_SetConfig+0x2cc>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d81b      	bhi.n	8006c78 <UART_SetConfig+0xd0>
 8006c40:	a201      	add	r2, pc, #4	@ (adr r2, 8006c48 <UART_SetConfig+0xa0>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006c69 	.word	0x08006c69
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c71 	.word	0x08006c71
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c5e:	e116      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c66:	e112      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c6e:	e10e      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c76:	e10a      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c7e:	e106      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a7c      	ldr	r2, [pc, #496]	@ (8006e78 <UART_SetConfig+0x2d0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d138      	bne.n	8006cfc <UART_SetConfig+0x154>
 8006c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8006e74 <UART_SetConfig+0x2cc>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c90:	f003 030c 	and.w	r3, r3, #12
 8006c94:	2b0c      	cmp	r3, #12
 8006c96:	d82d      	bhi.n	8006cf4 <UART_SetConfig+0x14c>
 8006c98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca0 <UART_SetConfig+0xf8>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cd5 	.word	0x08006cd5
 8006ca4:	08006cf5 	.word	0x08006cf5
 8006ca8:	08006cf5 	.word	0x08006cf5
 8006cac:	08006cf5 	.word	0x08006cf5
 8006cb0:	08006ce5 	.word	0x08006ce5
 8006cb4:	08006cf5 	.word	0x08006cf5
 8006cb8:	08006cf5 	.word	0x08006cf5
 8006cbc:	08006cf5 	.word	0x08006cf5
 8006cc0:	08006cdd 	.word	0x08006cdd
 8006cc4:	08006cf5 	.word	0x08006cf5
 8006cc8:	08006cf5 	.word	0x08006cf5
 8006ccc:	08006cf5 	.word	0x08006cf5
 8006cd0:	08006ced 	.word	0x08006ced
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cda:	e0d8      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ce2:	e0d4      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cea:	e0d0      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cf2:	e0cc      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cfa:	e0c8      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a5e      	ldr	r2, [pc, #376]	@ (8006e7c <UART_SetConfig+0x2d4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d125      	bne.n	8006d52 <UART_SetConfig+0x1aa>
 8006d06:	4b5b      	ldr	r3, [pc, #364]	@ (8006e74 <UART_SetConfig+0x2cc>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d10:	2b30      	cmp	r3, #48	@ 0x30
 8006d12:	d016      	beq.n	8006d42 <UART_SetConfig+0x19a>
 8006d14:	2b30      	cmp	r3, #48	@ 0x30
 8006d16:	d818      	bhi.n	8006d4a <UART_SetConfig+0x1a2>
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d00a      	beq.n	8006d32 <UART_SetConfig+0x18a>
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d814      	bhi.n	8006d4a <UART_SetConfig+0x1a2>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <UART_SetConfig+0x182>
 8006d24:	2b10      	cmp	r3, #16
 8006d26:	d008      	beq.n	8006d3a <UART_SetConfig+0x192>
 8006d28:	e00f      	b.n	8006d4a <UART_SetConfig+0x1a2>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d30:	e0ad      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006d32:	2302      	movs	r3, #2
 8006d34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d38:	e0a9      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d40:	e0a5      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006d42:	2308      	movs	r3, #8
 8006d44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d48:	e0a1      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d50:	e09d      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a4a      	ldr	r2, [pc, #296]	@ (8006e80 <UART_SetConfig+0x2d8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d125      	bne.n	8006da8 <UART_SetConfig+0x200>
 8006d5c:	4b45      	ldr	r3, [pc, #276]	@ (8006e74 <UART_SetConfig+0x2cc>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d66:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d68:	d016      	beq.n	8006d98 <UART_SetConfig+0x1f0>
 8006d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d6c:	d818      	bhi.n	8006da0 <UART_SetConfig+0x1f8>
 8006d6e:	2b80      	cmp	r3, #128	@ 0x80
 8006d70:	d00a      	beq.n	8006d88 <UART_SetConfig+0x1e0>
 8006d72:	2b80      	cmp	r3, #128	@ 0x80
 8006d74:	d814      	bhi.n	8006da0 <UART_SetConfig+0x1f8>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <UART_SetConfig+0x1d8>
 8006d7a:	2b40      	cmp	r3, #64	@ 0x40
 8006d7c:	d008      	beq.n	8006d90 <UART_SetConfig+0x1e8>
 8006d7e:	e00f      	b.n	8006da0 <UART_SetConfig+0x1f8>
 8006d80:	2300      	movs	r3, #0
 8006d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d86:	e082      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d8e:	e07e      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006d90:	2304      	movs	r3, #4
 8006d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d96:	e07a      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006d98:	2308      	movs	r3, #8
 8006d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d9e:	e076      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006da0:	2310      	movs	r3, #16
 8006da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006da6:	e072      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a35      	ldr	r2, [pc, #212]	@ (8006e84 <UART_SetConfig+0x2dc>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d12a      	bne.n	8006e08 <UART_SetConfig+0x260>
 8006db2:	4b30      	ldr	r3, [pc, #192]	@ (8006e74 <UART_SetConfig+0x2cc>)
 8006db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc0:	d01a      	beq.n	8006df8 <UART_SetConfig+0x250>
 8006dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc6:	d81b      	bhi.n	8006e00 <UART_SetConfig+0x258>
 8006dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dcc:	d00c      	beq.n	8006de8 <UART_SetConfig+0x240>
 8006dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dd2:	d815      	bhi.n	8006e00 <UART_SetConfig+0x258>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <UART_SetConfig+0x238>
 8006dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ddc:	d008      	beq.n	8006df0 <UART_SetConfig+0x248>
 8006dde:	e00f      	b.n	8006e00 <UART_SetConfig+0x258>
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de6:	e052      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006de8:	2302      	movs	r3, #2
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dee:	e04e      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006df0:	2304      	movs	r3, #4
 8006df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006df6:	e04a      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dfe:	e046      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006e00:	2310      	movs	r3, #16
 8006e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e06:	e042      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a17      	ldr	r2, [pc, #92]	@ (8006e6c <UART_SetConfig+0x2c4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d13a      	bne.n	8006e88 <UART_SetConfig+0x2e0>
 8006e12:	4b18      	ldr	r3, [pc, #96]	@ (8006e74 <UART_SetConfig+0x2cc>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e20:	d01a      	beq.n	8006e58 <UART_SetConfig+0x2b0>
 8006e22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e26:	d81b      	bhi.n	8006e60 <UART_SetConfig+0x2b8>
 8006e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e2c:	d00c      	beq.n	8006e48 <UART_SetConfig+0x2a0>
 8006e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e32:	d815      	bhi.n	8006e60 <UART_SetConfig+0x2b8>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <UART_SetConfig+0x298>
 8006e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e3c:	d008      	beq.n	8006e50 <UART_SetConfig+0x2a8>
 8006e3e:	e00f      	b.n	8006e60 <UART_SetConfig+0x2b8>
 8006e40:	2300      	movs	r3, #0
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e46:	e022      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4e:	e01e      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006e50:	2304      	movs	r3, #4
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e56:	e01a      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006e58:	2308      	movs	r3, #8
 8006e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e5e:	e016      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006e60:	2310      	movs	r3, #16
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e66:	e012      	b.n	8006e8e <UART_SetConfig+0x2e6>
 8006e68:	efff69f3 	.word	0xefff69f3
 8006e6c:	40008000 	.word	0x40008000
 8006e70:	40013800 	.word	0x40013800
 8006e74:	40021000 	.word	0x40021000
 8006e78:	40004400 	.word	0x40004400
 8006e7c:	40004800 	.word	0x40004800
 8006e80:	40004c00 	.word	0x40004c00
 8006e84:	40005000 	.word	0x40005000
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a9f      	ldr	r2, [pc, #636]	@ (8007110 <UART_SetConfig+0x568>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d17a      	bne.n	8006f8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d824      	bhi.n	8006eea <UART_SetConfig+0x342>
 8006ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <UART_SetConfig+0x300>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006eeb 	.word	0x08006eeb
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08006eeb 	.word	0x08006eeb
 8006eb8:	08006edb 	.word	0x08006edb
 8006ebc:	08006eeb 	.word	0x08006eeb
 8006ec0:	08006eeb 	.word	0x08006eeb
 8006ec4:	08006eeb 	.word	0x08006eeb
 8006ec8:	08006ee3 	.word	0x08006ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ecc:	f7fe fcce 	bl	800586c <HAL_RCC_GetPCLK1Freq>
 8006ed0:	61f8      	str	r0, [r7, #28]
        break;
 8006ed2:	e010      	b.n	8006ef6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ed4:	4b8f      	ldr	r3, [pc, #572]	@ (8007114 <UART_SetConfig+0x56c>)
 8006ed6:	61fb      	str	r3, [r7, #28]
        break;
 8006ed8:	e00d      	b.n	8006ef6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eda:	f7fe fc2f 	bl	800573c <HAL_RCC_GetSysClockFreq>
 8006ede:	61f8      	str	r0, [r7, #28]
        break;
 8006ee0:	e009      	b.n	8006ef6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ee6:	61fb      	str	r3, [r7, #28]
        break;
 8006ee8:	e005      	b.n	8006ef6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ef4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80fb 	beq.w	80070f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	4413      	add	r3, r2
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d305      	bcc.n	8006f1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f14:	69fa      	ldr	r2, [r7, #28]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d903      	bls.n	8006f22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f20:	e0e8      	b.n	80070f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2200      	movs	r2, #0
 8006f26:	461c      	mov	r4, r3
 8006f28:	4615      	mov	r5, r2
 8006f2a:	f04f 0200 	mov.w	r2, #0
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	022b      	lsls	r3, r5, #8
 8006f34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f38:	0222      	lsls	r2, r4, #8
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	6849      	ldr	r1, [r1, #4]
 8006f3e:	0849      	lsrs	r1, r1, #1
 8006f40:	2000      	movs	r0, #0
 8006f42:	4688      	mov	r8, r1
 8006f44:	4681      	mov	r9, r0
 8006f46:	eb12 0a08 	adds.w	sl, r2, r8
 8006f4a:	eb43 0b09 	adc.w	fp, r3, r9
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	603b      	str	r3, [r7, #0]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f5c:	4650      	mov	r0, sl
 8006f5e:	4659      	mov	r1, fp
 8006f60:	f7f9 f986 	bl	8000270 <__aeabi_uldivmod>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4613      	mov	r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f72:	d308      	bcc.n	8006f86 <UART_SetConfig+0x3de>
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f7a:	d204      	bcs.n	8006f86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	60da      	str	r2, [r3, #12]
 8006f84:	e0b6      	b.n	80070f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f8c:	e0b2      	b.n	80070f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f96:	d15e      	bne.n	8007056 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d828      	bhi.n	8006ff2 <UART_SetConfig+0x44a>
 8006fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa8 <UART_SetConfig+0x400>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fd5 	.word	0x08006fd5
 8006fb0:	08006fdd 	.word	0x08006fdd
 8006fb4:	08006ff3 	.word	0x08006ff3
 8006fb8:	08006fe3 	.word	0x08006fe3
 8006fbc:	08006ff3 	.word	0x08006ff3
 8006fc0:	08006ff3 	.word	0x08006ff3
 8006fc4:	08006ff3 	.word	0x08006ff3
 8006fc8:	08006feb 	.word	0x08006feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fcc:	f7fe fc4e 	bl	800586c <HAL_RCC_GetPCLK1Freq>
 8006fd0:	61f8      	str	r0, [r7, #28]
        break;
 8006fd2:	e014      	b.n	8006ffe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd4:	f7fe fc60 	bl	8005898 <HAL_RCC_GetPCLK2Freq>
 8006fd8:	61f8      	str	r0, [r7, #28]
        break;
 8006fda:	e010      	b.n	8006ffe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8007114 <UART_SetConfig+0x56c>)
 8006fde:	61fb      	str	r3, [r7, #28]
        break;
 8006fe0:	e00d      	b.n	8006ffe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe2:	f7fe fbab 	bl	800573c <HAL_RCC_GetSysClockFreq>
 8006fe6:	61f8      	str	r0, [r7, #28]
        break;
 8006fe8:	e009      	b.n	8006ffe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fee:	61fb      	str	r3, [r7, #28]
        break;
 8006ff0:	e005      	b.n	8006ffe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ffc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d077      	beq.n	80070f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	005a      	lsls	r2, r3, #1
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	085b      	lsrs	r3, r3, #1
 800700e:	441a      	add	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	fbb2 f3f3 	udiv	r3, r2, r3
 8007018:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b0f      	cmp	r3, #15
 800701e:	d916      	bls.n	800704e <UART_SetConfig+0x4a6>
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007026:	d212      	bcs.n	800704e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f023 030f 	bic.w	r3, r3, #15
 8007030:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	b29b      	uxth	r3, r3
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	b29a      	uxth	r2, r3
 800703e:	8afb      	ldrh	r3, [r7, #22]
 8007040:	4313      	orrs	r3, r2
 8007042:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	8afa      	ldrh	r2, [r7, #22]
 800704a:	60da      	str	r2, [r3, #12]
 800704c:	e052      	b.n	80070f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007054:	e04e      	b.n	80070f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007056:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800705a:	2b08      	cmp	r3, #8
 800705c:	d827      	bhi.n	80070ae <UART_SetConfig+0x506>
 800705e:	a201      	add	r2, pc, #4	@ (adr r2, 8007064 <UART_SetConfig+0x4bc>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	08007089 	.word	0x08007089
 8007068:	08007091 	.word	0x08007091
 800706c:	08007099 	.word	0x08007099
 8007070:	080070af 	.word	0x080070af
 8007074:	0800709f 	.word	0x0800709f
 8007078:	080070af 	.word	0x080070af
 800707c:	080070af 	.word	0x080070af
 8007080:	080070af 	.word	0x080070af
 8007084:	080070a7 	.word	0x080070a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007088:	f7fe fbf0 	bl	800586c <HAL_RCC_GetPCLK1Freq>
 800708c:	61f8      	str	r0, [r7, #28]
        break;
 800708e:	e014      	b.n	80070ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007090:	f7fe fc02 	bl	8005898 <HAL_RCC_GetPCLK2Freq>
 8007094:	61f8      	str	r0, [r7, #28]
        break;
 8007096:	e010      	b.n	80070ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007098:	4b1e      	ldr	r3, [pc, #120]	@ (8007114 <UART_SetConfig+0x56c>)
 800709a:	61fb      	str	r3, [r7, #28]
        break;
 800709c:	e00d      	b.n	80070ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800709e:	f7fe fb4d 	bl	800573c <HAL_RCC_GetSysClockFreq>
 80070a2:	61f8      	str	r0, [r7, #28]
        break;
 80070a4:	e009      	b.n	80070ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070aa:	61fb      	str	r3, [r7, #28]
        break;
 80070ac:	e005      	b.n	80070ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070b8:	bf00      	nop
    }

    if (pclk != 0U)
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d019      	beq.n	80070f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	085a      	lsrs	r2, r3, #1
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	441a      	add	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	2b0f      	cmp	r3, #15
 80070d8:	d909      	bls.n	80070ee <UART_SetConfig+0x546>
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070e0:	d205      	bcs.n	80070ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60da      	str	r2, [r3, #12]
 80070ec:	e002      	b.n	80070f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007100:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007104:	4618      	mov	r0, r3
 8007106:	3728      	adds	r7, #40	@ 0x28
 8007108:	46bd      	mov	sp, r7
 800710a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800710e:	bf00      	nop
 8007110:	40008000 	.word	0x40008000
 8007114:	00f42400 	.word	0x00f42400

08007118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01a      	beq.n	800722e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007216:	d10a      	bne.n	800722e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	605a      	str	r2, [r3, #4]
  }
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b098      	sub	sp, #96	@ 0x60
 8007260:	af02      	add	r7, sp, #8
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800726c:	f7fd fa4e 	bl	800470c <HAL_GetTick>
 8007270:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b08      	cmp	r3, #8
 800727e:	d12e      	bne.n	80072de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007280:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007288:	2200      	movs	r2, #0
 800728a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f88c 	bl	80073ac <UART_WaitOnFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d021      	beq.n	80072de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e6      	bne.n	800729a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e062      	b.n	80073a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d149      	bne.n	8007380 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072f4:	2200      	movs	r2, #0
 80072f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f856 	bl	80073ac <UART_WaitOnFlagUntilTimeout>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d03c      	beq.n	8007380 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	623b      	str	r3, [r7, #32]
   return(result);
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800731a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007324:	633b      	str	r3, [r7, #48]	@ 0x30
 8007326:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800732a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e6      	bne.n	8007306 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3308      	adds	r3, #8
 800733e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	60fb      	str	r3, [r7, #12]
   return(result);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0301 	bic.w	r3, r3, #1
 800734e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3308      	adds	r3, #8
 8007356:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007358:	61fa      	str	r2, [r7, #28]
 800735a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	69b9      	ldr	r1, [r7, #24]
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	617b      	str	r3, [r7, #20]
   return(result);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e5      	bne.n	8007338 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2220      	movs	r2, #32
 8007370:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e011      	b.n	80073a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2220      	movs	r2, #32
 8007384:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3758      	adds	r7, #88	@ 0x58
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	4613      	mov	r3, r2
 80073ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073bc:	e04f      	b.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d04b      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c6:	f7fd f9a1 	bl	800470c <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d302      	bcc.n	80073dc <UART_WaitOnFlagUntilTimeout+0x30>
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e04e      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0304 	and.w	r3, r3, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d037      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b80      	cmp	r3, #128	@ 0x80
 80073f2:	d034      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b40      	cmp	r3, #64	@ 0x40
 80073f8:	d031      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	f003 0308 	and.w	r3, r3, #8
 8007404:	2b08      	cmp	r3, #8
 8007406:	d110      	bne.n	800742a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2208      	movs	r2, #8
 800740e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f838 	bl	8007486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2208      	movs	r2, #8
 800741a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e029      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007438:	d111      	bne.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f81e 	bl	8007486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e00f      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69da      	ldr	r2, [r3, #28]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4013      	ands	r3, r2
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	429a      	cmp	r2, r3
 800747a:	d0a0      	beq.n	80073be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007486:	b480      	push	{r7}
 8007488:	b095      	sub	sp, #84	@ 0x54
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80074ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3308      	adds	r3, #8
 80074c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f023 0301 	bic.w	r3, r3, #1
 80074d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3308      	adds	r3, #8
 80074de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e5      	bne.n	80074c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d118      	bne.n	800752e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	60bb      	str	r3, [r7, #8]
   return(result);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f023 0310 	bic.w	r3, r3, #16
 8007510:	647b      	str	r3, [r7, #68]	@ 0x44
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6979      	ldr	r1, [r7, #20]
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	613b      	str	r3, [r7, #16]
   return(result);
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e6      	bne.n	80074fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007542:	bf00      	nop
 8007544:	3754      	adds	r7, #84	@ 0x54
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <std>:
 8007550:	2300      	movs	r3, #0
 8007552:	b510      	push	{r4, lr}
 8007554:	4604      	mov	r4, r0
 8007556:	e9c0 3300 	strd	r3, r3, [r0]
 800755a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800755e:	6083      	str	r3, [r0, #8]
 8007560:	8181      	strh	r1, [r0, #12]
 8007562:	6643      	str	r3, [r0, #100]	@ 0x64
 8007564:	81c2      	strh	r2, [r0, #14]
 8007566:	6183      	str	r3, [r0, #24]
 8007568:	4619      	mov	r1, r3
 800756a:	2208      	movs	r2, #8
 800756c:	305c      	adds	r0, #92	@ 0x5c
 800756e:	f000 fab5 	bl	8007adc <memset>
 8007572:	4b0d      	ldr	r3, [pc, #52]	@ (80075a8 <std+0x58>)
 8007574:	6263      	str	r3, [r4, #36]	@ 0x24
 8007576:	4b0d      	ldr	r3, [pc, #52]	@ (80075ac <std+0x5c>)
 8007578:	62a3      	str	r3, [r4, #40]	@ 0x28
 800757a:	4b0d      	ldr	r3, [pc, #52]	@ (80075b0 <std+0x60>)
 800757c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800757e:	4b0d      	ldr	r3, [pc, #52]	@ (80075b4 <std+0x64>)
 8007580:	6323      	str	r3, [r4, #48]	@ 0x30
 8007582:	4b0d      	ldr	r3, [pc, #52]	@ (80075b8 <std+0x68>)
 8007584:	6224      	str	r4, [r4, #32]
 8007586:	429c      	cmp	r4, r3
 8007588:	d006      	beq.n	8007598 <std+0x48>
 800758a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800758e:	4294      	cmp	r4, r2
 8007590:	d002      	beq.n	8007598 <std+0x48>
 8007592:	33d0      	adds	r3, #208	@ 0xd0
 8007594:	429c      	cmp	r4, r3
 8007596:	d105      	bne.n	80075a4 <std+0x54>
 8007598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800759c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a0:	f000 bb14 	b.w	8007bcc <__retarget_lock_init_recursive>
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	bf00      	nop
 80075a8:	0800792d 	.word	0x0800792d
 80075ac:	0800794f 	.word	0x0800794f
 80075b0:	08007987 	.word	0x08007987
 80075b4:	080079ab 	.word	0x080079ab
 80075b8:	20000240 	.word	0x20000240

080075bc <stdio_exit_handler>:
 80075bc:	4a02      	ldr	r2, [pc, #8]	@ (80075c8 <stdio_exit_handler+0xc>)
 80075be:	4903      	ldr	r1, [pc, #12]	@ (80075cc <stdio_exit_handler+0x10>)
 80075c0:	4803      	ldr	r0, [pc, #12]	@ (80075d0 <stdio_exit_handler+0x14>)
 80075c2:	f000 b869 	b.w	8007698 <_fwalk_sglue>
 80075c6:	bf00      	nop
 80075c8:	20000074 	.word	0x20000074
 80075cc:	0800847d 	.word	0x0800847d
 80075d0:	20000084 	.word	0x20000084

080075d4 <cleanup_stdio>:
 80075d4:	6841      	ldr	r1, [r0, #4]
 80075d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007608 <cleanup_stdio+0x34>)
 80075d8:	4299      	cmp	r1, r3
 80075da:	b510      	push	{r4, lr}
 80075dc:	4604      	mov	r4, r0
 80075de:	d001      	beq.n	80075e4 <cleanup_stdio+0x10>
 80075e0:	f000 ff4c 	bl	800847c <_fflush_r>
 80075e4:	68a1      	ldr	r1, [r4, #8]
 80075e6:	4b09      	ldr	r3, [pc, #36]	@ (800760c <cleanup_stdio+0x38>)
 80075e8:	4299      	cmp	r1, r3
 80075ea:	d002      	beq.n	80075f2 <cleanup_stdio+0x1e>
 80075ec:	4620      	mov	r0, r4
 80075ee:	f000 ff45 	bl	800847c <_fflush_r>
 80075f2:	68e1      	ldr	r1, [r4, #12]
 80075f4:	4b06      	ldr	r3, [pc, #24]	@ (8007610 <cleanup_stdio+0x3c>)
 80075f6:	4299      	cmp	r1, r3
 80075f8:	d004      	beq.n	8007604 <cleanup_stdio+0x30>
 80075fa:	4620      	mov	r0, r4
 80075fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007600:	f000 bf3c 	b.w	800847c <_fflush_r>
 8007604:	bd10      	pop	{r4, pc}
 8007606:	bf00      	nop
 8007608:	20000240 	.word	0x20000240
 800760c:	200002a8 	.word	0x200002a8
 8007610:	20000310 	.word	0x20000310

08007614 <global_stdio_init.part.0>:
 8007614:	b510      	push	{r4, lr}
 8007616:	4b0b      	ldr	r3, [pc, #44]	@ (8007644 <global_stdio_init.part.0+0x30>)
 8007618:	4c0b      	ldr	r4, [pc, #44]	@ (8007648 <global_stdio_init.part.0+0x34>)
 800761a:	4a0c      	ldr	r2, [pc, #48]	@ (800764c <global_stdio_init.part.0+0x38>)
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	4620      	mov	r0, r4
 8007620:	2200      	movs	r2, #0
 8007622:	2104      	movs	r1, #4
 8007624:	f7ff ff94 	bl	8007550 <std>
 8007628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800762c:	2201      	movs	r2, #1
 800762e:	2109      	movs	r1, #9
 8007630:	f7ff ff8e 	bl	8007550 <std>
 8007634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007638:	2202      	movs	r2, #2
 800763a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800763e:	2112      	movs	r1, #18
 8007640:	f7ff bf86 	b.w	8007550 <std>
 8007644:	20000378 	.word	0x20000378
 8007648:	20000240 	.word	0x20000240
 800764c:	080075bd 	.word	0x080075bd

08007650 <__sfp_lock_acquire>:
 8007650:	4801      	ldr	r0, [pc, #4]	@ (8007658 <__sfp_lock_acquire+0x8>)
 8007652:	f000 babc 	b.w	8007bce <__retarget_lock_acquire_recursive>
 8007656:	bf00      	nop
 8007658:	20000381 	.word	0x20000381

0800765c <__sfp_lock_release>:
 800765c:	4801      	ldr	r0, [pc, #4]	@ (8007664 <__sfp_lock_release+0x8>)
 800765e:	f000 bab7 	b.w	8007bd0 <__retarget_lock_release_recursive>
 8007662:	bf00      	nop
 8007664:	20000381 	.word	0x20000381

08007668 <__sinit>:
 8007668:	b510      	push	{r4, lr}
 800766a:	4604      	mov	r4, r0
 800766c:	f7ff fff0 	bl	8007650 <__sfp_lock_acquire>
 8007670:	6a23      	ldr	r3, [r4, #32]
 8007672:	b11b      	cbz	r3, 800767c <__sinit+0x14>
 8007674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007678:	f7ff bff0 	b.w	800765c <__sfp_lock_release>
 800767c:	4b04      	ldr	r3, [pc, #16]	@ (8007690 <__sinit+0x28>)
 800767e:	6223      	str	r3, [r4, #32]
 8007680:	4b04      	ldr	r3, [pc, #16]	@ (8007694 <__sinit+0x2c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1f5      	bne.n	8007674 <__sinit+0xc>
 8007688:	f7ff ffc4 	bl	8007614 <global_stdio_init.part.0>
 800768c:	e7f2      	b.n	8007674 <__sinit+0xc>
 800768e:	bf00      	nop
 8007690:	080075d5 	.word	0x080075d5
 8007694:	20000378 	.word	0x20000378

08007698 <_fwalk_sglue>:
 8007698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800769c:	4607      	mov	r7, r0
 800769e:	4688      	mov	r8, r1
 80076a0:	4614      	mov	r4, r2
 80076a2:	2600      	movs	r6, #0
 80076a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076a8:	f1b9 0901 	subs.w	r9, r9, #1
 80076ac:	d505      	bpl.n	80076ba <_fwalk_sglue+0x22>
 80076ae:	6824      	ldr	r4, [r4, #0]
 80076b0:	2c00      	cmp	r4, #0
 80076b2:	d1f7      	bne.n	80076a4 <_fwalk_sglue+0xc>
 80076b4:	4630      	mov	r0, r6
 80076b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ba:	89ab      	ldrh	r3, [r5, #12]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d907      	bls.n	80076d0 <_fwalk_sglue+0x38>
 80076c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076c4:	3301      	adds	r3, #1
 80076c6:	d003      	beq.n	80076d0 <_fwalk_sglue+0x38>
 80076c8:	4629      	mov	r1, r5
 80076ca:	4638      	mov	r0, r7
 80076cc:	47c0      	blx	r8
 80076ce:	4306      	orrs	r6, r0
 80076d0:	3568      	adds	r5, #104	@ 0x68
 80076d2:	e7e9      	b.n	80076a8 <_fwalk_sglue+0x10>

080076d4 <iprintf>:
 80076d4:	b40f      	push	{r0, r1, r2, r3}
 80076d6:	b507      	push	{r0, r1, r2, lr}
 80076d8:	4906      	ldr	r1, [pc, #24]	@ (80076f4 <iprintf+0x20>)
 80076da:	ab04      	add	r3, sp, #16
 80076dc:	6808      	ldr	r0, [r1, #0]
 80076de:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e2:	6881      	ldr	r1, [r0, #8]
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	f000 fb9f 	bl	8007e28 <_vfiprintf_r>
 80076ea:	b003      	add	sp, #12
 80076ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80076f0:	b004      	add	sp, #16
 80076f2:	4770      	bx	lr
 80076f4:	20000080 	.word	0x20000080

080076f8 <_puts_r>:
 80076f8:	6a03      	ldr	r3, [r0, #32]
 80076fa:	b570      	push	{r4, r5, r6, lr}
 80076fc:	6884      	ldr	r4, [r0, #8]
 80076fe:	4605      	mov	r5, r0
 8007700:	460e      	mov	r6, r1
 8007702:	b90b      	cbnz	r3, 8007708 <_puts_r+0x10>
 8007704:	f7ff ffb0 	bl	8007668 <__sinit>
 8007708:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800770a:	07db      	lsls	r3, r3, #31
 800770c:	d405      	bmi.n	800771a <_puts_r+0x22>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	0598      	lsls	r0, r3, #22
 8007712:	d402      	bmi.n	800771a <_puts_r+0x22>
 8007714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007716:	f000 fa5a 	bl	8007bce <__retarget_lock_acquire_recursive>
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	0719      	lsls	r1, r3, #28
 800771e:	d502      	bpl.n	8007726 <_puts_r+0x2e>
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d135      	bne.n	8007792 <_puts_r+0x9a>
 8007726:	4621      	mov	r1, r4
 8007728:	4628      	mov	r0, r5
 800772a:	f000 f981 	bl	8007a30 <__swsetup_r>
 800772e:	b380      	cbz	r0, 8007792 <_puts_r+0x9a>
 8007730:	f04f 35ff 	mov.w	r5, #4294967295
 8007734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007736:	07da      	lsls	r2, r3, #31
 8007738:	d405      	bmi.n	8007746 <_puts_r+0x4e>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	059b      	lsls	r3, r3, #22
 800773e:	d402      	bmi.n	8007746 <_puts_r+0x4e>
 8007740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007742:	f000 fa45 	bl	8007bd0 <__retarget_lock_release_recursive>
 8007746:	4628      	mov	r0, r5
 8007748:	bd70      	pop	{r4, r5, r6, pc}
 800774a:	2b00      	cmp	r3, #0
 800774c:	da04      	bge.n	8007758 <_puts_r+0x60>
 800774e:	69a2      	ldr	r2, [r4, #24]
 8007750:	429a      	cmp	r2, r3
 8007752:	dc17      	bgt.n	8007784 <_puts_r+0x8c>
 8007754:	290a      	cmp	r1, #10
 8007756:	d015      	beq.n	8007784 <_puts_r+0x8c>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	6022      	str	r2, [r4, #0]
 800775e:	7019      	strb	r1, [r3, #0]
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007766:	3b01      	subs	r3, #1
 8007768:	60a3      	str	r3, [r4, #8]
 800776a:	2900      	cmp	r1, #0
 800776c:	d1ed      	bne.n	800774a <_puts_r+0x52>
 800776e:	2b00      	cmp	r3, #0
 8007770:	da11      	bge.n	8007796 <_puts_r+0x9e>
 8007772:	4622      	mov	r2, r4
 8007774:	210a      	movs	r1, #10
 8007776:	4628      	mov	r0, r5
 8007778:	f000 f91b 	bl	80079b2 <__swbuf_r>
 800777c:	3001      	adds	r0, #1
 800777e:	d0d7      	beq.n	8007730 <_puts_r+0x38>
 8007780:	250a      	movs	r5, #10
 8007782:	e7d7      	b.n	8007734 <_puts_r+0x3c>
 8007784:	4622      	mov	r2, r4
 8007786:	4628      	mov	r0, r5
 8007788:	f000 f913 	bl	80079b2 <__swbuf_r>
 800778c:	3001      	adds	r0, #1
 800778e:	d1e7      	bne.n	8007760 <_puts_r+0x68>
 8007790:	e7ce      	b.n	8007730 <_puts_r+0x38>
 8007792:	3e01      	subs	r6, #1
 8007794:	e7e4      	b.n	8007760 <_puts_r+0x68>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	6022      	str	r2, [r4, #0]
 800779c:	220a      	movs	r2, #10
 800779e:	701a      	strb	r2, [r3, #0]
 80077a0:	e7ee      	b.n	8007780 <_puts_r+0x88>
	...

080077a4 <puts>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	@ (80077b0 <puts+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f7ff bfa5 	b.w	80076f8 <_puts_r>
 80077ae:	bf00      	nop
 80077b0:	20000080 	.word	0x20000080

080077b4 <setbuf>:
 80077b4:	fab1 f281 	clz	r2, r1
 80077b8:	0952      	lsrs	r2, r2, #5
 80077ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077be:	0052      	lsls	r2, r2, #1
 80077c0:	f000 b800 	b.w	80077c4 <setvbuf>

080077c4 <setvbuf>:
 80077c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077c8:	461d      	mov	r5, r3
 80077ca:	4b57      	ldr	r3, [pc, #348]	@ (8007928 <setvbuf+0x164>)
 80077cc:	681f      	ldr	r7, [r3, #0]
 80077ce:	4604      	mov	r4, r0
 80077d0:	460e      	mov	r6, r1
 80077d2:	4690      	mov	r8, r2
 80077d4:	b127      	cbz	r7, 80077e0 <setvbuf+0x1c>
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	b913      	cbnz	r3, 80077e0 <setvbuf+0x1c>
 80077da:	4638      	mov	r0, r7
 80077dc:	f7ff ff44 	bl	8007668 <__sinit>
 80077e0:	f1b8 0f02 	cmp.w	r8, #2
 80077e4:	d006      	beq.n	80077f4 <setvbuf+0x30>
 80077e6:	f1b8 0f01 	cmp.w	r8, #1
 80077ea:	f200 809a 	bhi.w	8007922 <setvbuf+0x15e>
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	f2c0 8097 	blt.w	8007922 <setvbuf+0x15e>
 80077f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077f6:	07d9      	lsls	r1, r3, #31
 80077f8:	d405      	bmi.n	8007806 <setvbuf+0x42>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	059a      	lsls	r2, r3, #22
 80077fe:	d402      	bmi.n	8007806 <setvbuf+0x42>
 8007800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007802:	f000 f9e4 	bl	8007bce <__retarget_lock_acquire_recursive>
 8007806:	4621      	mov	r1, r4
 8007808:	4638      	mov	r0, r7
 800780a:	f000 fe37 	bl	800847c <_fflush_r>
 800780e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007810:	b141      	cbz	r1, 8007824 <setvbuf+0x60>
 8007812:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007816:	4299      	cmp	r1, r3
 8007818:	d002      	beq.n	8007820 <setvbuf+0x5c>
 800781a:	4638      	mov	r0, r7
 800781c:	f000 f9da 	bl	8007bd4 <_free_r>
 8007820:	2300      	movs	r3, #0
 8007822:	6363      	str	r3, [r4, #52]	@ 0x34
 8007824:	2300      	movs	r3, #0
 8007826:	61a3      	str	r3, [r4, #24]
 8007828:	6063      	str	r3, [r4, #4]
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	061b      	lsls	r3, r3, #24
 800782e:	d503      	bpl.n	8007838 <setvbuf+0x74>
 8007830:	6921      	ldr	r1, [r4, #16]
 8007832:	4638      	mov	r0, r7
 8007834:	f000 f9ce 	bl	8007bd4 <_free_r>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800783e:	f023 0303 	bic.w	r3, r3, #3
 8007842:	f1b8 0f02 	cmp.w	r8, #2
 8007846:	81a3      	strh	r3, [r4, #12]
 8007848:	d061      	beq.n	800790e <setvbuf+0x14a>
 800784a:	ab01      	add	r3, sp, #4
 800784c:	466a      	mov	r2, sp
 800784e:	4621      	mov	r1, r4
 8007850:	4638      	mov	r0, r7
 8007852:	f000 fe3b 	bl	80084cc <__swhatbuf_r>
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	4318      	orrs	r0, r3
 800785a:	81a0      	strh	r0, [r4, #12]
 800785c:	bb2d      	cbnz	r5, 80078aa <setvbuf+0xe6>
 800785e:	9d00      	ldr	r5, [sp, #0]
 8007860:	4628      	mov	r0, r5
 8007862:	f000 fa01 	bl	8007c68 <malloc>
 8007866:	4606      	mov	r6, r0
 8007868:	2800      	cmp	r0, #0
 800786a:	d152      	bne.n	8007912 <setvbuf+0x14e>
 800786c:	f8dd 9000 	ldr.w	r9, [sp]
 8007870:	45a9      	cmp	r9, r5
 8007872:	d140      	bne.n	80078f6 <setvbuf+0x132>
 8007874:	f04f 35ff 	mov.w	r5, #4294967295
 8007878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787c:	f043 0202 	orr.w	r2, r3, #2
 8007880:	81a2      	strh	r2, [r4, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	60a2      	str	r2, [r4, #8]
 8007886:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800788a:	6022      	str	r2, [r4, #0]
 800788c:	6122      	str	r2, [r4, #16]
 800788e:	2201      	movs	r2, #1
 8007890:	6162      	str	r2, [r4, #20]
 8007892:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007894:	07d6      	lsls	r6, r2, #31
 8007896:	d404      	bmi.n	80078a2 <setvbuf+0xde>
 8007898:	0598      	lsls	r0, r3, #22
 800789a:	d402      	bmi.n	80078a2 <setvbuf+0xde>
 800789c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800789e:	f000 f997 	bl	8007bd0 <__retarget_lock_release_recursive>
 80078a2:	4628      	mov	r0, r5
 80078a4:	b003      	add	sp, #12
 80078a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078aa:	2e00      	cmp	r6, #0
 80078ac:	d0d8      	beq.n	8007860 <setvbuf+0x9c>
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	b913      	cbnz	r3, 80078b8 <setvbuf+0xf4>
 80078b2:	4638      	mov	r0, r7
 80078b4:	f7ff fed8 	bl	8007668 <__sinit>
 80078b8:	f1b8 0f01 	cmp.w	r8, #1
 80078bc:	bf08      	it	eq
 80078be:	89a3      	ldrheq	r3, [r4, #12]
 80078c0:	6026      	str	r6, [r4, #0]
 80078c2:	bf04      	itt	eq
 80078c4:	f043 0301 	orreq.w	r3, r3, #1
 80078c8:	81a3      	strheq	r3, [r4, #12]
 80078ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ce:	f013 0208 	ands.w	r2, r3, #8
 80078d2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80078d6:	d01e      	beq.n	8007916 <setvbuf+0x152>
 80078d8:	07d9      	lsls	r1, r3, #31
 80078da:	bf41      	itttt	mi
 80078dc:	2200      	movmi	r2, #0
 80078de:	426d      	negmi	r5, r5
 80078e0:	60a2      	strmi	r2, [r4, #8]
 80078e2:	61a5      	strmi	r5, [r4, #24]
 80078e4:	bf58      	it	pl
 80078e6:	60a5      	strpl	r5, [r4, #8]
 80078e8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078ea:	07d2      	lsls	r2, r2, #31
 80078ec:	d401      	bmi.n	80078f2 <setvbuf+0x12e>
 80078ee:	059b      	lsls	r3, r3, #22
 80078f0:	d513      	bpl.n	800791a <setvbuf+0x156>
 80078f2:	2500      	movs	r5, #0
 80078f4:	e7d5      	b.n	80078a2 <setvbuf+0xde>
 80078f6:	4648      	mov	r0, r9
 80078f8:	f000 f9b6 	bl	8007c68 <malloc>
 80078fc:	4606      	mov	r6, r0
 80078fe:	2800      	cmp	r0, #0
 8007900:	d0b8      	beq.n	8007874 <setvbuf+0xb0>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	464d      	mov	r5, r9
 800790c:	e7cf      	b.n	80078ae <setvbuf+0xea>
 800790e:	2500      	movs	r5, #0
 8007910:	e7b2      	b.n	8007878 <setvbuf+0xb4>
 8007912:	46a9      	mov	r9, r5
 8007914:	e7f5      	b.n	8007902 <setvbuf+0x13e>
 8007916:	60a2      	str	r2, [r4, #8]
 8007918:	e7e6      	b.n	80078e8 <setvbuf+0x124>
 800791a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800791c:	f000 f958 	bl	8007bd0 <__retarget_lock_release_recursive>
 8007920:	e7e7      	b.n	80078f2 <setvbuf+0x12e>
 8007922:	f04f 35ff 	mov.w	r5, #4294967295
 8007926:	e7bc      	b.n	80078a2 <setvbuf+0xde>
 8007928:	20000080 	.word	0x20000080

0800792c <__sread>:
 800792c:	b510      	push	{r4, lr}
 800792e:	460c      	mov	r4, r1
 8007930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007934:	f000 f8fc 	bl	8007b30 <_read_r>
 8007938:	2800      	cmp	r0, #0
 800793a:	bfab      	itete	ge
 800793c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800793e:	89a3      	ldrhlt	r3, [r4, #12]
 8007940:	181b      	addge	r3, r3, r0
 8007942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007946:	bfac      	ite	ge
 8007948:	6563      	strge	r3, [r4, #84]	@ 0x54
 800794a:	81a3      	strhlt	r3, [r4, #12]
 800794c:	bd10      	pop	{r4, pc}

0800794e <__swrite>:
 800794e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007952:	461f      	mov	r7, r3
 8007954:	898b      	ldrh	r3, [r1, #12]
 8007956:	05db      	lsls	r3, r3, #23
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	4616      	mov	r6, r2
 800795e:	d505      	bpl.n	800796c <__swrite+0x1e>
 8007960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007964:	2302      	movs	r3, #2
 8007966:	2200      	movs	r2, #0
 8007968:	f000 f8d0 	bl	8007b0c <_lseek_r>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	4632      	mov	r2, r6
 800797a:	463b      	mov	r3, r7
 800797c:	4628      	mov	r0, r5
 800797e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007982:	f000 b8e7 	b.w	8007b54 <_write_r>

08007986 <__sseek>:
 8007986:	b510      	push	{r4, lr}
 8007988:	460c      	mov	r4, r1
 800798a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798e:	f000 f8bd 	bl	8007b0c <_lseek_r>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	bf15      	itete	ne
 8007998:	6560      	strne	r0, [r4, #84]	@ 0x54
 800799a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800799e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079a2:	81a3      	strheq	r3, [r4, #12]
 80079a4:	bf18      	it	ne
 80079a6:	81a3      	strhne	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__sclose>:
 80079aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ae:	f000 b89d 	b.w	8007aec <_close_r>

080079b2 <__swbuf_r>:
 80079b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b4:	460e      	mov	r6, r1
 80079b6:	4614      	mov	r4, r2
 80079b8:	4605      	mov	r5, r0
 80079ba:	b118      	cbz	r0, 80079c4 <__swbuf_r+0x12>
 80079bc:	6a03      	ldr	r3, [r0, #32]
 80079be:	b90b      	cbnz	r3, 80079c4 <__swbuf_r+0x12>
 80079c0:	f7ff fe52 	bl	8007668 <__sinit>
 80079c4:	69a3      	ldr	r3, [r4, #24]
 80079c6:	60a3      	str	r3, [r4, #8]
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	071a      	lsls	r2, r3, #28
 80079cc:	d501      	bpl.n	80079d2 <__swbuf_r+0x20>
 80079ce:	6923      	ldr	r3, [r4, #16]
 80079d0:	b943      	cbnz	r3, 80079e4 <__swbuf_r+0x32>
 80079d2:	4621      	mov	r1, r4
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 f82b 	bl	8007a30 <__swsetup_r>
 80079da:	b118      	cbz	r0, 80079e4 <__swbuf_r+0x32>
 80079dc:	f04f 37ff 	mov.w	r7, #4294967295
 80079e0:	4638      	mov	r0, r7
 80079e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	6922      	ldr	r2, [r4, #16]
 80079e8:	1a98      	subs	r0, r3, r2
 80079ea:	6963      	ldr	r3, [r4, #20]
 80079ec:	b2f6      	uxtb	r6, r6
 80079ee:	4283      	cmp	r3, r0
 80079f0:	4637      	mov	r7, r6
 80079f2:	dc05      	bgt.n	8007a00 <__swbuf_r+0x4e>
 80079f4:	4621      	mov	r1, r4
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 fd40 	bl	800847c <_fflush_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d1ed      	bne.n	80079dc <__swbuf_r+0x2a>
 8007a00:	68a3      	ldr	r3, [r4, #8]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	60a3      	str	r3, [r4, #8]
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	6022      	str	r2, [r4, #0]
 8007a0c:	701e      	strb	r6, [r3, #0]
 8007a0e:	6962      	ldr	r2, [r4, #20]
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d004      	beq.n	8007a20 <__swbuf_r+0x6e>
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	07db      	lsls	r3, r3, #31
 8007a1a:	d5e1      	bpl.n	80079e0 <__swbuf_r+0x2e>
 8007a1c:	2e0a      	cmp	r6, #10
 8007a1e:	d1df      	bne.n	80079e0 <__swbuf_r+0x2e>
 8007a20:	4621      	mov	r1, r4
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 fd2a 	bl	800847c <_fflush_r>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d0d9      	beq.n	80079e0 <__swbuf_r+0x2e>
 8007a2c:	e7d6      	b.n	80079dc <__swbuf_r+0x2a>
	...

08007a30 <__swsetup_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4b29      	ldr	r3, [pc, #164]	@ (8007ad8 <__swsetup_r+0xa8>)
 8007a34:	4605      	mov	r5, r0
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	460c      	mov	r4, r1
 8007a3a:	b118      	cbz	r0, 8007a44 <__swsetup_r+0x14>
 8007a3c:	6a03      	ldr	r3, [r0, #32]
 8007a3e:	b90b      	cbnz	r3, 8007a44 <__swsetup_r+0x14>
 8007a40:	f7ff fe12 	bl	8007668 <__sinit>
 8007a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a48:	0719      	lsls	r1, r3, #28
 8007a4a:	d422      	bmi.n	8007a92 <__swsetup_r+0x62>
 8007a4c:	06da      	lsls	r2, r3, #27
 8007a4e:	d407      	bmi.n	8007a60 <__swsetup_r+0x30>
 8007a50:	2209      	movs	r2, #9
 8007a52:	602a      	str	r2, [r5, #0]
 8007a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a58:	81a3      	strh	r3, [r4, #12]
 8007a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5e:	e033      	b.n	8007ac8 <__swsetup_r+0x98>
 8007a60:	0758      	lsls	r0, r3, #29
 8007a62:	d512      	bpl.n	8007a8a <__swsetup_r+0x5a>
 8007a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a66:	b141      	cbz	r1, 8007a7a <__swsetup_r+0x4a>
 8007a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a6c:	4299      	cmp	r1, r3
 8007a6e:	d002      	beq.n	8007a76 <__swsetup_r+0x46>
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 f8af 	bl	8007bd4 <_free_r>
 8007a76:	2300      	movs	r3, #0
 8007a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	2300      	movs	r3, #0
 8007a84:	6063      	str	r3, [r4, #4]
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	f043 0308 	orr.w	r3, r3, #8
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	b94b      	cbnz	r3, 8007aaa <__swsetup_r+0x7a>
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa0:	d003      	beq.n	8007aaa <__swsetup_r+0x7a>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f000 fd37 	bl	8008518 <__smakebuf_r>
 8007aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aae:	f013 0201 	ands.w	r2, r3, #1
 8007ab2:	d00a      	beq.n	8007aca <__swsetup_r+0x9a>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	60a2      	str	r2, [r4, #8]
 8007ab8:	6962      	ldr	r2, [r4, #20]
 8007aba:	4252      	negs	r2, r2
 8007abc:	61a2      	str	r2, [r4, #24]
 8007abe:	6922      	ldr	r2, [r4, #16]
 8007ac0:	b942      	cbnz	r2, 8007ad4 <__swsetup_r+0xa4>
 8007ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ac6:	d1c5      	bne.n	8007a54 <__swsetup_r+0x24>
 8007ac8:	bd38      	pop	{r3, r4, r5, pc}
 8007aca:	0799      	lsls	r1, r3, #30
 8007acc:	bf58      	it	pl
 8007ace:	6962      	ldrpl	r2, [r4, #20]
 8007ad0:	60a2      	str	r2, [r4, #8]
 8007ad2:	e7f4      	b.n	8007abe <__swsetup_r+0x8e>
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	e7f7      	b.n	8007ac8 <__swsetup_r+0x98>
 8007ad8:	20000080 	.word	0x20000080

08007adc <memset>:
 8007adc:	4402      	add	r2, r0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d100      	bne.n	8007ae6 <memset+0xa>
 8007ae4:	4770      	bx	lr
 8007ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aea:	e7f9      	b.n	8007ae0 <memset+0x4>

08007aec <_close_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d06      	ldr	r5, [pc, #24]	@ (8007b08 <_close_r+0x1c>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	602b      	str	r3, [r5, #0]
 8007af8:	f7f8 ff9c 	bl	8000a34 <_close>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_close_r+0x1a>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_close_r+0x1a>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	2000037c 	.word	0x2000037c

08007b0c <_lseek_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4d07      	ldr	r5, [pc, #28]	@ (8007b2c <_lseek_r+0x20>)
 8007b10:	4604      	mov	r4, r0
 8007b12:	4608      	mov	r0, r1
 8007b14:	4611      	mov	r1, r2
 8007b16:	2200      	movs	r2, #0
 8007b18:	602a      	str	r2, [r5, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f7f8 ffb1 	bl	8000a82 <_lseek>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d102      	bne.n	8007b2a <_lseek_r+0x1e>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	b103      	cbz	r3, 8007b2a <_lseek_r+0x1e>
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	2000037c 	.word	0x2000037c

08007b30 <_read_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d07      	ldr	r5, [pc, #28]	@ (8007b50 <_read_r+0x20>)
 8007b34:	4604      	mov	r4, r0
 8007b36:	4608      	mov	r0, r1
 8007b38:	4611      	mov	r1, r2
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	602a      	str	r2, [r5, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f7f8 ff3f 	bl	80009c2 <_read>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d102      	bne.n	8007b4e <_read_r+0x1e>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	b103      	cbz	r3, 8007b4e <_read_r+0x1e>
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	2000037c 	.word	0x2000037c

08007b54 <_write_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d07      	ldr	r5, [pc, #28]	@ (8007b74 <_write_r+0x20>)
 8007b58:	4604      	mov	r4, r0
 8007b5a:	4608      	mov	r0, r1
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	2200      	movs	r2, #0
 8007b60:	602a      	str	r2, [r5, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f7f8 ff4a 	bl	80009fc <_write>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_write_r+0x1e>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_write_r+0x1e>
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	2000037c 	.word	0x2000037c

08007b78 <__errno>:
 8007b78:	4b01      	ldr	r3, [pc, #4]	@ (8007b80 <__errno+0x8>)
 8007b7a:	6818      	ldr	r0, [r3, #0]
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	20000080 	.word	0x20000080

08007b84 <__libc_init_array>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	4d0d      	ldr	r5, [pc, #52]	@ (8007bbc <__libc_init_array+0x38>)
 8007b88:	4c0d      	ldr	r4, [pc, #52]	@ (8007bc0 <__libc_init_array+0x3c>)
 8007b8a:	1b64      	subs	r4, r4, r5
 8007b8c:	10a4      	asrs	r4, r4, #2
 8007b8e:	2600      	movs	r6, #0
 8007b90:	42a6      	cmp	r6, r4
 8007b92:	d109      	bne.n	8007ba8 <__libc_init_array+0x24>
 8007b94:	4d0b      	ldr	r5, [pc, #44]	@ (8007bc4 <__libc_init_array+0x40>)
 8007b96:	4c0c      	ldr	r4, [pc, #48]	@ (8007bc8 <__libc_init_array+0x44>)
 8007b98:	f000 fd2c 	bl	80085f4 <_init>
 8007b9c:	1b64      	subs	r4, r4, r5
 8007b9e:	10a4      	asrs	r4, r4, #2
 8007ba0:	2600      	movs	r6, #0
 8007ba2:	42a6      	cmp	r6, r4
 8007ba4:	d105      	bne.n	8007bb2 <__libc_init_array+0x2e>
 8007ba6:	bd70      	pop	{r4, r5, r6, pc}
 8007ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bac:	4798      	blx	r3
 8007bae:	3601      	adds	r6, #1
 8007bb0:	e7ee      	b.n	8007b90 <__libc_init_array+0xc>
 8007bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb6:	4798      	blx	r3
 8007bb8:	3601      	adds	r6, #1
 8007bba:	e7f2      	b.n	8007ba2 <__libc_init_array+0x1e>
 8007bbc:	08008cbc 	.word	0x08008cbc
 8007bc0:	08008cbc 	.word	0x08008cbc
 8007bc4:	08008cbc 	.word	0x08008cbc
 8007bc8:	08008cc0 	.word	0x08008cc0

08007bcc <__retarget_lock_init_recursive>:
 8007bcc:	4770      	bx	lr

08007bce <__retarget_lock_acquire_recursive>:
 8007bce:	4770      	bx	lr

08007bd0 <__retarget_lock_release_recursive>:
 8007bd0:	4770      	bx	lr
	...

08007bd4 <_free_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	d041      	beq.n	8007c60 <_free_r+0x8c>
 8007bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be0:	1f0c      	subs	r4, r1, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bfb8      	it	lt
 8007be6:	18e4      	addlt	r4, r4, r3
 8007be8:	f000 f8e8 	bl	8007dbc <__malloc_lock>
 8007bec:	4a1d      	ldr	r2, [pc, #116]	@ (8007c64 <_free_r+0x90>)
 8007bee:	6813      	ldr	r3, [r2, #0]
 8007bf0:	b933      	cbnz	r3, 8007c00 <_free_r+0x2c>
 8007bf2:	6063      	str	r3, [r4, #4]
 8007bf4:	6014      	str	r4, [r2, #0]
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bfc:	f000 b8e4 	b.w	8007dc8 <__malloc_unlock>
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	d908      	bls.n	8007c16 <_free_r+0x42>
 8007c04:	6820      	ldr	r0, [r4, #0]
 8007c06:	1821      	adds	r1, r4, r0
 8007c08:	428b      	cmp	r3, r1
 8007c0a:	bf01      	itttt	eq
 8007c0c:	6819      	ldreq	r1, [r3, #0]
 8007c0e:	685b      	ldreq	r3, [r3, #4]
 8007c10:	1809      	addeq	r1, r1, r0
 8007c12:	6021      	streq	r1, [r4, #0]
 8007c14:	e7ed      	b.n	8007bf2 <_free_r+0x1e>
 8007c16:	461a      	mov	r2, r3
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	b10b      	cbz	r3, 8007c20 <_free_r+0x4c>
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	d9fa      	bls.n	8007c16 <_free_r+0x42>
 8007c20:	6811      	ldr	r1, [r2, #0]
 8007c22:	1850      	adds	r0, r2, r1
 8007c24:	42a0      	cmp	r0, r4
 8007c26:	d10b      	bne.n	8007c40 <_free_r+0x6c>
 8007c28:	6820      	ldr	r0, [r4, #0]
 8007c2a:	4401      	add	r1, r0
 8007c2c:	1850      	adds	r0, r2, r1
 8007c2e:	4283      	cmp	r3, r0
 8007c30:	6011      	str	r1, [r2, #0]
 8007c32:	d1e0      	bne.n	8007bf6 <_free_r+0x22>
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	6053      	str	r3, [r2, #4]
 8007c3a:	4408      	add	r0, r1
 8007c3c:	6010      	str	r0, [r2, #0]
 8007c3e:	e7da      	b.n	8007bf6 <_free_r+0x22>
 8007c40:	d902      	bls.n	8007c48 <_free_r+0x74>
 8007c42:	230c      	movs	r3, #12
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	e7d6      	b.n	8007bf6 <_free_r+0x22>
 8007c48:	6820      	ldr	r0, [r4, #0]
 8007c4a:	1821      	adds	r1, r4, r0
 8007c4c:	428b      	cmp	r3, r1
 8007c4e:	bf04      	itt	eq
 8007c50:	6819      	ldreq	r1, [r3, #0]
 8007c52:	685b      	ldreq	r3, [r3, #4]
 8007c54:	6063      	str	r3, [r4, #4]
 8007c56:	bf04      	itt	eq
 8007c58:	1809      	addeq	r1, r1, r0
 8007c5a:	6021      	streq	r1, [r4, #0]
 8007c5c:	6054      	str	r4, [r2, #4]
 8007c5e:	e7ca      	b.n	8007bf6 <_free_r+0x22>
 8007c60:	bd38      	pop	{r3, r4, r5, pc}
 8007c62:	bf00      	nop
 8007c64:	20000388 	.word	0x20000388

08007c68 <malloc>:
 8007c68:	4b02      	ldr	r3, [pc, #8]	@ (8007c74 <malloc+0xc>)
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	f000 b825 	b.w	8007cbc <_malloc_r>
 8007c72:	bf00      	nop
 8007c74:	20000080 	.word	0x20000080

08007c78 <sbrk_aligned>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8007cb8 <sbrk_aligned+0x40>)
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	6831      	ldr	r1, [r6, #0]
 8007c80:	4605      	mov	r5, r0
 8007c82:	b911      	cbnz	r1, 8007c8a <sbrk_aligned+0x12>
 8007c84:	f000 fca6 	bl	80085d4 <_sbrk_r>
 8007c88:	6030      	str	r0, [r6, #0]
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f000 fca1 	bl	80085d4 <_sbrk_r>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d103      	bne.n	8007c9e <sbrk_aligned+0x26>
 8007c96:	f04f 34ff 	mov.w	r4, #4294967295
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	bd70      	pop	{r4, r5, r6, pc}
 8007c9e:	1cc4      	adds	r4, r0, #3
 8007ca0:	f024 0403 	bic.w	r4, r4, #3
 8007ca4:	42a0      	cmp	r0, r4
 8007ca6:	d0f8      	beq.n	8007c9a <sbrk_aligned+0x22>
 8007ca8:	1a21      	subs	r1, r4, r0
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 fc92 	bl	80085d4 <_sbrk_r>
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d1f2      	bne.n	8007c9a <sbrk_aligned+0x22>
 8007cb4:	e7ef      	b.n	8007c96 <sbrk_aligned+0x1e>
 8007cb6:	bf00      	nop
 8007cb8:	20000384 	.word	0x20000384

08007cbc <_malloc_r>:
 8007cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc0:	1ccd      	adds	r5, r1, #3
 8007cc2:	f025 0503 	bic.w	r5, r5, #3
 8007cc6:	3508      	adds	r5, #8
 8007cc8:	2d0c      	cmp	r5, #12
 8007cca:	bf38      	it	cc
 8007ccc:	250c      	movcc	r5, #12
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	db01      	blt.n	8007cd8 <_malloc_r+0x1c>
 8007cd4:	42a9      	cmp	r1, r5
 8007cd6:	d904      	bls.n	8007ce2 <_malloc_r+0x26>
 8007cd8:	230c      	movs	r3, #12
 8007cda:	6033      	str	r3, [r6, #0]
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007db8 <_malloc_r+0xfc>
 8007ce6:	f000 f869 	bl	8007dbc <__malloc_lock>
 8007cea:	f8d8 3000 	ldr.w	r3, [r8]
 8007cee:	461c      	mov	r4, r3
 8007cf0:	bb44      	cbnz	r4, 8007d44 <_malloc_r+0x88>
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f7ff ffbf 	bl	8007c78 <sbrk_aligned>
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	d158      	bne.n	8007db2 <_malloc_r+0xf6>
 8007d00:	f8d8 4000 	ldr.w	r4, [r8]
 8007d04:	4627      	mov	r7, r4
 8007d06:	2f00      	cmp	r7, #0
 8007d08:	d143      	bne.n	8007d92 <_malloc_r+0xd6>
 8007d0a:	2c00      	cmp	r4, #0
 8007d0c:	d04b      	beq.n	8007da6 <_malloc_r+0xea>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	4639      	mov	r1, r7
 8007d12:	4630      	mov	r0, r6
 8007d14:	eb04 0903 	add.w	r9, r4, r3
 8007d18:	f000 fc5c 	bl	80085d4 <_sbrk_r>
 8007d1c:	4581      	cmp	r9, r0
 8007d1e:	d142      	bne.n	8007da6 <_malloc_r+0xea>
 8007d20:	6821      	ldr	r1, [r4, #0]
 8007d22:	1a6d      	subs	r5, r5, r1
 8007d24:	4629      	mov	r1, r5
 8007d26:	4630      	mov	r0, r6
 8007d28:	f7ff ffa6 	bl	8007c78 <sbrk_aligned>
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d03a      	beq.n	8007da6 <_malloc_r+0xea>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	442b      	add	r3, r5
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	f8d8 3000 	ldr.w	r3, [r8]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	bb62      	cbnz	r2, 8007d98 <_malloc_r+0xdc>
 8007d3e:	f8c8 7000 	str.w	r7, [r8]
 8007d42:	e00f      	b.n	8007d64 <_malloc_r+0xa8>
 8007d44:	6822      	ldr	r2, [r4, #0]
 8007d46:	1b52      	subs	r2, r2, r5
 8007d48:	d420      	bmi.n	8007d8c <_malloc_r+0xd0>
 8007d4a:	2a0b      	cmp	r2, #11
 8007d4c:	d917      	bls.n	8007d7e <_malloc_r+0xc2>
 8007d4e:	1961      	adds	r1, r4, r5
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	6025      	str	r5, [r4, #0]
 8007d54:	bf18      	it	ne
 8007d56:	6059      	strne	r1, [r3, #4]
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	bf08      	it	eq
 8007d5c:	f8c8 1000 	streq.w	r1, [r8]
 8007d60:	5162      	str	r2, [r4, r5]
 8007d62:	604b      	str	r3, [r1, #4]
 8007d64:	4630      	mov	r0, r6
 8007d66:	f000 f82f 	bl	8007dc8 <__malloc_unlock>
 8007d6a:	f104 000b 	add.w	r0, r4, #11
 8007d6e:	1d23      	adds	r3, r4, #4
 8007d70:	f020 0007 	bic.w	r0, r0, #7
 8007d74:	1ac2      	subs	r2, r0, r3
 8007d76:	bf1c      	itt	ne
 8007d78:	1a1b      	subne	r3, r3, r0
 8007d7a:	50a3      	strne	r3, [r4, r2]
 8007d7c:	e7af      	b.n	8007cde <_malloc_r+0x22>
 8007d7e:	6862      	ldr	r2, [r4, #4]
 8007d80:	42a3      	cmp	r3, r4
 8007d82:	bf0c      	ite	eq
 8007d84:	f8c8 2000 	streq.w	r2, [r8]
 8007d88:	605a      	strne	r2, [r3, #4]
 8007d8a:	e7eb      	b.n	8007d64 <_malloc_r+0xa8>
 8007d8c:	4623      	mov	r3, r4
 8007d8e:	6864      	ldr	r4, [r4, #4]
 8007d90:	e7ae      	b.n	8007cf0 <_malloc_r+0x34>
 8007d92:	463c      	mov	r4, r7
 8007d94:	687f      	ldr	r7, [r7, #4]
 8007d96:	e7b6      	b.n	8007d06 <_malloc_r+0x4a>
 8007d98:	461a      	mov	r2, r3
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	d1fb      	bne.n	8007d98 <_malloc_r+0xdc>
 8007da0:	2300      	movs	r3, #0
 8007da2:	6053      	str	r3, [r2, #4]
 8007da4:	e7de      	b.n	8007d64 <_malloc_r+0xa8>
 8007da6:	230c      	movs	r3, #12
 8007da8:	6033      	str	r3, [r6, #0]
 8007daa:	4630      	mov	r0, r6
 8007dac:	f000 f80c 	bl	8007dc8 <__malloc_unlock>
 8007db0:	e794      	b.n	8007cdc <_malloc_r+0x20>
 8007db2:	6005      	str	r5, [r0, #0]
 8007db4:	e7d6      	b.n	8007d64 <_malloc_r+0xa8>
 8007db6:	bf00      	nop
 8007db8:	20000388 	.word	0x20000388

08007dbc <__malloc_lock>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	@ (8007dc4 <__malloc_lock+0x8>)
 8007dbe:	f7ff bf06 	b.w	8007bce <__retarget_lock_acquire_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	20000380 	.word	0x20000380

08007dc8 <__malloc_unlock>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	@ (8007dd0 <__malloc_unlock+0x8>)
 8007dca:	f7ff bf01 	b.w	8007bd0 <__retarget_lock_release_recursive>
 8007dce:	bf00      	nop
 8007dd0:	20000380 	.word	0x20000380

08007dd4 <__sfputc_r>:
 8007dd4:	6893      	ldr	r3, [r2, #8]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	b410      	push	{r4}
 8007ddc:	6093      	str	r3, [r2, #8]
 8007dde:	da08      	bge.n	8007df2 <__sfputc_r+0x1e>
 8007de0:	6994      	ldr	r4, [r2, #24]
 8007de2:	42a3      	cmp	r3, r4
 8007de4:	db01      	blt.n	8007dea <__sfputc_r+0x16>
 8007de6:	290a      	cmp	r1, #10
 8007de8:	d103      	bne.n	8007df2 <__sfputc_r+0x1e>
 8007dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dee:	f7ff bde0 	b.w	80079b2 <__swbuf_r>
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	1c58      	adds	r0, r3, #1
 8007df6:	6010      	str	r0, [r2, #0]
 8007df8:	7019      	strb	r1, [r3, #0]
 8007dfa:	4608      	mov	r0, r1
 8007dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <__sfputs_r>:
 8007e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e04:	4606      	mov	r6, r0
 8007e06:	460f      	mov	r7, r1
 8007e08:	4614      	mov	r4, r2
 8007e0a:	18d5      	adds	r5, r2, r3
 8007e0c:	42ac      	cmp	r4, r5
 8007e0e:	d101      	bne.n	8007e14 <__sfputs_r+0x12>
 8007e10:	2000      	movs	r0, #0
 8007e12:	e007      	b.n	8007e24 <__sfputs_r+0x22>
 8007e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e18:	463a      	mov	r2, r7
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f7ff ffda 	bl	8007dd4 <__sfputc_r>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d1f3      	bne.n	8007e0c <__sfputs_r+0xa>
 8007e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e28 <_vfiprintf_r>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	460d      	mov	r5, r1
 8007e2e:	b09d      	sub	sp, #116	@ 0x74
 8007e30:	4614      	mov	r4, r2
 8007e32:	4698      	mov	r8, r3
 8007e34:	4606      	mov	r6, r0
 8007e36:	b118      	cbz	r0, 8007e40 <_vfiprintf_r+0x18>
 8007e38:	6a03      	ldr	r3, [r0, #32]
 8007e3a:	b90b      	cbnz	r3, 8007e40 <_vfiprintf_r+0x18>
 8007e3c:	f7ff fc14 	bl	8007668 <__sinit>
 8007e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e42:	07d9      	lsls	r1, r3, #31
 8007e44:	d405      	bmi.n	8007e52 <_vfiprintf_r+0x2a>
 8007e46:	89ab      	ldrh	r3, [r5, #12]
 8007e48:	059a      	lsls	r2, r3, #22
 8007e4a:	d402      	bmi.n	8007e52 <_vfiprintf_r+0x2a>
 8007e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e4e:	f7ff febe 	bl	8007bce <__retarget_lock_acquire_recursive>
 8007e52:	89ab      	ldrh	r3, [r5, #12]
 8007e54:	071b      	lsls	r3, r3, #28
 8007e56:	d501      	bpl.n	8007e5c <_vfiprintf_r+0x34>
 8007e58:	692b      	ldr	r3, [r5, #16]
 8007e5a:	b99b      	cbnz	r3, 8007e84 <_vfiprintf_r+0x5c>
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7ff fde6 	bl	8007a30 <__swsetup_r>
 8007e64:	b170      	cbz	r0, 8007e84 <_vfiprintf_r+0x5c>
 8007e66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e68:	07dc      	lsls	r4, r3, #31
 8007e6a:	d504      	bpl.n	8007e76 <_vfiprintf_r+0x4e>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	b01d      	add	sp, #116	@ 0x74
 8007e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e76:	89ab      	ldrh	r3, [r5, #12]
 8007e78:	0598      	lsls	r0, r3, #22
 8007e7a:	d4f7      	bmi.n	8007e6c <_vfiprintf_r+0x44>
 8007e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e7e:	f7ff fea7 	bl	8007bd0 <__retarget_lock_release_recursive>
 8007e82:	e7f3      	b.n	8007e6c <_vfiprintf_r+0x44>
 8007e84:	2300      	movs	r3, #0
 8007e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e88:	2320      	movs	r3, #32
 8007e8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e92:	2330      	movs	r3, #48	@ 0x30
 8007e94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008044 <_vfiprintf_r+0x21c>
 8007e98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e9c:	f04f 0901 	mov.w	r9, #1
 8007ea0:	4623      	mov	r3, r4
 8007ea2:	469a      	mov	sl, r3
 8007ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ea8:	b10a      	cbz	r2, 8007eae <_vfiprintf_r+0x86>
 8007eaa:	2a25      	cmp	r2, #37	@ 0x25
 8007eac:	d1f9      	bne.n	8007ea2 <_vfiprintf_r+0x7a>
 8007eae:	ebba 0b04 	subs.w	fp, sl, r4
 8007eb2:	d00b      	beq.n	8007ecc <_vfiprintf_r+0xa4>
 8007eb4:	465b      	mov	r3, fp
 8007eb6:	4622      	mov	r2, r4
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7ff ffa1 	bl	8007e02 <__sfputs_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	f000 80a7 	beq.w	8008014 <_vfiprintf_r+0x1ec>
 8007ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ec8:	445a      	add	r2, fp
 8007eca:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 809f 	beq.w	8008014 <_vfiprintf_r+0x1ec>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8007edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ee0:	f10a 0a01 	add.w	sl, sl, #1
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	9307      	str	r3, [sp, #28]
 8007ee8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007eec:	931a      	str	r3, [sp, #104]	@ 0x68
 8007eee:	4654      	mov	r4, sl
 8007ef0:	2205      	movs	r2, #5
 8007ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef6:	4853      	ldr	r0, [pc, #332]	@ (8008044 <_vfiprintf_r+0x21c>)
 8007ef8:	f7f8 f96a 	bl	80001d0 <memchr>
 8007efc:	9a04      	ldr	r2, [sp, #16]
 8007efe:	b9d8      	cbnz	r0, 8007f38 <_vfiprintf_r+0x110>
 8007f00:	06d1      	lsls	r1, r2, #27
 8007f02:	bf44      	itt	mi
 8007f04:	2320      	movmi	r3, #32
 8007f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f0a:	0713      	lsls	r3, r2, #28
 8007f0c:	bf44      	itt	mi
 8007f0e:	232b      	movmi	r3, #43	@ 0x2b
 8007f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f14:	f89a 3000 	ldrb.w	r3, [sl]
 8007f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f1a:	d015      	beq.n	8007f48 <_vfiprintf_r+0x120>
 8007f1c:	9a07      	ldr	r2, [sp, #28]
 8007f1e:	4654      	mov	r4, sl
 8007f20:	2000      	movs	r0, #0
 8007f22:	f04f 0c0a 	mov.w	ip, #10
 8007f26:	4621      	mov	r1, r4
 8007f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f2c:	3b30      	subs	r3, #48	@ 0x30
 8007f2e:	2b09      	cmp	r3, #9
 8007f30:	d94b      	bls.n	8007fca <_vfiprintf_r+0x1a2>
 8007f32:	b1b0      	cbz	r0, 8007f62 <_vfiprintf_r+0x13a>
 8007f34:	9207      	str	r2, [sp, #28]
 8007f36:	e014      	b.n	8007f62 <_vfiprintf_r+0x13a>
 8007f38:	eba0 0308 	sub.w	r3, r0, r8
 8007f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f40:	4313      	orrs	r3, r2
 8007f42:	9304      	str	r3, [sp, #16]
 8007f44:	46a2      	mov	sl, r4
 8007f46:	e7d2      	b.n	8007eee <_vfiprintf_r+0xc6>
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	1d19      	adds	r1, r3, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	9103      	str	r1, [sp, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bfbb      	ittet	lt
 8007f54:	425b      	neglt	r3, r3
 8007f56:	f042 0202 	orrlt.w	r2, r2, #2
 8007f5a:	9307      	strge	r3, [sp, #28]
 8007f5c:	9307      	strlt	r3, [sp, #28]
 8007f5e:	bfb8      	it	lt
 8007f60:	9204      	strlt	r2, [sp, #16]
 8007f62:	7823      	ldrb	r3, [r4, #0]
 8007f64:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f66:	d10a      	bne.n	8007f7e <_vfiprintf_r+0x156>
 8007f68:	7863      	ldrb	r3, [r4, #1]
 8007f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f6c:	d132      	bne.n	8007fd4 <_vfiprintf_r+0x1ac>
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	1d1a      	adds	r2, r3, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	9203      	str	r2, [sp, #12]
 8007f76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f7a:	3402      	adds	r4, #2
 8007f7c:	9305      	str	r3, [sp, #20]
 8007f7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008054 <_vfiprintf_r+0x22c>
 8007f82:	7821      	ldrb	r1, [r4, #0]
 8007f84:	2203      	movs	r2, #3
 8007f86:	4650      	mov	r0, sl
 8007f88:	f7f8 f922 	bl	80001d0 <memchr>
 8007f8c:	b138      	cbz	r0, 8007f9e <_vfiprintf_r+0x176>
 8007f8e:	9b04      	ldr	r3, [sp, #16]
 8007f90:	eba0 000a 	sub.w	r0, r0, sl
 8007f94:	2240      	movs	r2, #64	@ 0x40
 8007f96:	4082      	lsls	r2, r0
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	3401      	adds	r4, #1
 8007f9c:	9304      	str	r3, [sp, #16]
 8007f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa2:	4829      	ldr	r0, [pc, #164]	@ (8008048 <_vfiprintf_r+0x220>)
 8007fa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fa8:	2206      	movs	r2, #6
 8007faa:	f7f8 f911 	bl	80001d0 <memchr>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d03f      	beq.n	8008032 <_vfiprintf_r+0x20a>
 8007fb2:	4b26      	ldr	r3, [pc, #152]	@ (800804c <_vfiprintf_r+0x224>)
 8007fb4:	bb1b      	cbnz	r3, 8007ffe <_vfiprintf_r+0x1d6>
 8007fb6:	9b03      	ldr	r3, [sp, #12]
 8007fb8:	3307      	adds	r3, #7
 8007fba:	f023 0307 	bic.w	r3, r3, #7
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	9303      	str	r3, [sp, #12]
 8007fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc4:	443b      	add	r3, r7
 8007fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fc8:	e76a      	b.n	8007ea0 <_vfiprintf_r+0x78>
 8007fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fce:	460c      	mov	r4, r1
 8007fd0:	2001      	movs	r0, #1
 8007fd2:	e7a8      	b.n	8007f26 <_vfiprintf_r+0xfe>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	3401      	adds	r4, #1
 8007fd8:	9305      	str	r3, [sp, #20]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	f04f 0c0a 	mov.w	ip, #10
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fe6:	3a30      	subs	r2, #48	@ 0x30
 8007fe8:	2a09      	cmp	r2, #9
 8007fea:	d903      	bls.n	8007ff4 <_vfiprintf_r+0x1cc>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0c6      	beq.n	8007f7e <_vfiprintf_r+0x156>
 8007ff0:	9105      	str	r1, [sp, #20]
 8007ff2:	e7c4      	b.n	8007f7e <_vfiprintf_r+0x156>
 8007ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e7f0      	b.n	8007fe0 <_vfiprintf_r+0x1b8>
 8007ffe:	ab03      	add	r3, sp, #12
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	462a      	mov	r2, r5
 8008004:	4b12      	ldr	r3, [pc, #72]	@ (8008050 <_vfiprintf_r+0x228>)
 8008006:	a904      	add	r1, sp, #16
 8008008:	4630      	mov	r0, r6
 800800a:	f3af 8000 	nop.w
 800800e:	4607      	mov	r7, r0
 8008010:	1c78      	adds	r0, r7, #1
 8008012:	d1d6      	bne.n	8007fc2 <_vfiprintf_r+0x19a>
 8008014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008016:	07d9      	lsls	r1, r3, #31
 8008018:	d405      	bmi.n	8008026 <_vfiprintf_r+0x1fe>
 800801a:	89ab      	ldrh	r3, [r5, #12]
 800801c:	059a      	lsls	r2, r3, #22
 800801e:	d402      	bmi.n	8008026 <_vfiprintf_r+0x1fe>
 8008020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008022:	f7ff fdd5 	bl	8007bd0 <__retarget_lock_release_recursive>
 8008026:	89ab      	ldrh	r3, [r5, #12]
 8008028:	065b      	lsls	r3, r3, #25
 800802a:	f53f af1f 	bmi.w	8007e6c <_vfiprintf_r+0x44>
 800802e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008030:	e71e      	b.n	8007e70 <_vfiprintf_r+0x48>
 8008032:	ab03      	add	r3, sp, #12
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	462a      	mov	r2, r5
 8008038:	4b05      	ldr	r3, [pc, #20]	@ (8008050 <_vfiprintf_r+0x228>)
 800803a:	a904      	add	r1, sp, #16
 800803c:	4630      	mov	r0, r6
 800803e:	f000 f879 	bl	8008134 <_printf_i>
 8008042:	e7e4      	b.n	800800e <_vfiprintf_r+0x1e6>
 8008044:	08008c80 	.word	0x08008c80
 8008048:	08008c8a 	.word	0x08008c8a
 800804c:	00000000 	.word	0x00000000
 8008050:	08007e03 	.word	0x08007e03
 8008054:	08008c86 	.word	0x08008c86

08008058 <_printf_common>:
 8008058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	4616      	mov	r6, r2
 800805e:	4698      	mov	r8, r3
 8008060:	688a      	ldr	r2, [r1, #8]
 8008062:	690b      	ldr	r3, [r1, #16]
 8008064:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008068:	4293      	cmp	r3, r2
 800806a:	bfb8      	it	lt
 800806c:	4613      	movlt	r3, r2
 800806e:	6033      	str	r3, [r6, #0]
 8008070:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008074:	4607      	mov	r7, r0
 8008076:	460c      	mov	r4, r1
 8008078:	b10a      	cbz	r2, 800807e <_printf_common+0x26>
 800807a:	3301      	adds	r3, #1
 800807c:	6033      	str	r3, [r6, #0]
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	0699      	lsls	r1, r3, #26
 8008082:	bf42      	ittt	mi
 8008084:	6833      	ldrmi	r3, [r6, #0]
 8008086:	3302      	addmi	r3, #2
 8008088:	6033      	strmi	r3, [r6, #0]
 800808a:	6825      	ldr	r5, [r4, #0]
 800808c:	f015 0506 	ands.w	r5, r5, #6
 8008090:	d106      	bne.n	80080a0 <_printf_common+0x48>
 8008092:	f104 0a19 	add.w	sl, r4, #25
 8008096:	68e3      	ldr	r3, [r4, #12]
 8008098:	6832      	ldr	r2, [r6, #0]
 800809a:	1a9b      	subs	r3, r3, r2
 800809c:	42ab      	cmp	r3, r5
 800809e:	dc26      	bgt.n	80080ee <_printf_common+0x96>
 80080a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080a4:	6822      	ldr	r2, [r4, #0]
 80080a6:	3b00      	subs	r3, #0
 80080a8:	bf18      	it	ne
 80080aa:	2301      	movne	r3, #1
 80080ac:	0692      	lsls	r2, r2, #26
 80080ae:	d42b      	bmi.n	8008108 <_printf_common+0xb0>
 80080b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080b4:	4641      	mov	r1, r8
 80080b6:	4638      	mov	r0, r7
 80080b8:	47c8      	blx	r9
 80080ba:	3001      	adds	r0, #1
 80080bc:	d01e      	beq.n	80080fc <_printf_common+0xa4>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	6922      	ldr	r2, [r4, #16]
 80080c2:	f003 0306 	and.w	r3, r3, #6
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	bf02      	ittt	eq
 80080ca:	68e5      	ldreq	r5, [r4, #12]
 80080cc:	6833      	ldreq	r3, [r6, #0]
 80080ce:	1aed      	subeq	r5, r5, r3
 80080d0:	68a3      	ldr	r3, [r4, #8]
 80080d2:	bf0c      	ite	eq
 80080d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080d8:	2500      	movne	r5, #0
 80080da:	4293      	cmp	r3, r2
 80080dc:	bfc4      	itt	gt
 80080de:	1a9b      	subgt	r3, r3, r2
 80080e0:	18ed      	addgt	r5, r5, r3
 80080e2:	2600      	movs	r6, #0
 80080e4:	341a      	adds	r4, #26
 80080e6:	42b5      	cmp	r5, r6
 80080e8:	d11a      	bne.n	8008120 <_printf_common+0xc8>
 80080ea:	2000      	movs	r0, #0
 80080ec:	e008      	b.n	8008100 <_printf_common+0xa8>
 80080ee:	2301      	movs	r3, #1
 80080f0:	4652      	mov	r2, sl
 80080f2:	4641      	mov	r1, r8
 80080f4:	4638      	mov	r0, r7
 80080f6:	47c8      	blx	r9
 80080f8:	3001      	adds	r0, #1
 80080fa:	d103      	bne.n	8008104 <_printf_common+0xac>
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008104:	3501      	adds	r5, #1
 8008106:	e7c6      	b.n	8008096 <_printf_common+0x3e>
 8008108:	18e1      	adds	r1, r4, r3
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	2030      	movs	r0, #48	@ 0x30
 800810e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008112:	4422      	add	r2, r4
 8008114:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008118:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800811c:	3302      	adds	r3, #2
 800811e:	e7c7      	b.n	80080b0 <_printf_common+0x58>
 8008120:	2301      	movs	r3, #1
 8008122:	4622      	mov	r2, r4
 8008124:	4641      	mov	r1, r8
 8008126:	4638      	mov	r0, r7
 8008128:	47c8      	blx	r9
 800812a:	3001      	adds	r0, #1
 800812c:	d0e6      	beq.n	80080fc <_printf_common+0xa4>
 800812e:	3601      	adds	r6, #1
 8008130:	e7d9      	b.n	80080e6 <_printf_common+0x8e>
	...

08008134 <_printf_i>:
 8008134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	7e0f      	ldrb	r7, [r1, #24]
 800813a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800813c:	2f78      	cmp	r7, #120	@ 0x78
 800813e:	4691      	mov	r9, r2
 8008140:	4680      	mov	r8, r0
 8008142:	460c      	mov	r4, r1
 8008144:	469a      	mov	sl, r3
 8008146:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800814a:	d807      	bhi.n	800815c <_printf_i+0x28>
 800814c:	2f62      	cmp	r7, #98	@ 0x62
 800814e:	d80a      	bhi.n	8008166 <_printf_i+0x32>
 8008150:	2f00      	cmp	r7, #0
 8008152:	f000 80d2 	beq.w	80082fa <_printf_i+0x1c6>
 8008156:	2f58      	cmp	r7, #88	@ 0x58
 8008158:	f000 80b9 	beq.w	80082ce <_printf_i+0x19a>
 800815c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008160:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008164:	e03a      	b.n	80081dc <_printf_i+0xa8>
 8008166:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800816a:	2b15      	cmp	r3, #21
 800816c:	d8f6      	bhi.n	800815c <_printf_i+0x28>
 800816e:	a101      	add	r1, pc, #4	@ (adr r1, 8008174 <_printf_i+0x40>)
 8008170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008174:	080081cd 	.word	0x080081cd
 8008178:	080081e1 	.word	0x080081e1
 800817c:	0800815d 	.word	0x0800815d
 8008180:	0800815d 	.word	0x0800815d
 8008184:	0800815d 	.word	0x0800815d
 8008188:	0800815d 	.word	0x0800815d
 800818c:	080081e1 	.word	0x080081e1
 8008190:	0800815d 	.word	0x0800815d
 8008194:	0800815d 	.word	0x0800815d
 8008198:	0800815d 	.word	0x0800815d
 800819c:	0800815d 	.word	0x0800815d
 80081a0:	080082e1 	.word	0x080082e1
 80081a4:	0800820b 	.word	0x0800820b
 80081a8:	0800829b 	.word	0x0800829b
 80081ac:	0800815d 	.word	0x0800815d
 80081b0:	0800815d 	.word	0x0800815d
 80081b4:	08008303 	.word	0x08008303
 80081b8:	0800815d 	.word	0x0800815d
 80081bc:	0800820b 	.word	0x0800820b
 80081c0:	0800815d 	.word	0x0800815d
 80081c4:	0800815d 	.word	0x0800815d
 80081c8:	080082a3 	.word	0x080082a3
 80081cc:	6833      	ldr	r3, [r6, #0]
 80081ce:	1d1a      	adds	r2, r3, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6032      	str	r2, [r6, #0]
 80081d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081dc:	2301      	movs	r3, #1
 80081de:	e09d      	b.n	800831c <_printf_i+0x1e8>
 80081e0:	6833      	ldr	r3, [r6, #0]
 80081e2:	6820      	ldr	r0, [r4, #0]
 80081e4:	1d19      	adds	r1, r3, #4
 80081e6:	6031      	str	r1, [r6, #0]
 80081e8:	0606      	lsls	r6, r0, #24
 80081ea:	d501      	bpl.n	80081f0 <_printf_i+0xbc>
 80081ec:	681d      	ldr	r5, [r3, #0]
 80081ee:	e003      	b.n	80081f8 <_printf_i+0xc4>
 80081f0:	0645      	lsls	r5, r0, #25
 80081f2:	d5fb      	bpl.n	80081ec <_printf_i+0xb8>
 80081f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081f8:	2d00      	cmp	r5, #0
 80081fa:	da03      	bge.n	8008204 <_printf_i+0xd0>
 80081fc:	232d      	movs	r3, #45	@ 0x2d
 80081fe:	426d      	negs	r5, r5
 8008200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008204:	4859      	ldr	r0, [pc, #356]	@ (800836c <_printf_i+0x238>)
 8008206:	230a      	movs	r3, #10
 8008208:	e011      	b.n	800822e <_printf_i+0xfa>
 800820a:	6821      	ldr	r1, [r4, #0]
 800820c:	6833      	ldr	r3, [r6, #0]
 800820e:	0608      	lsls	r0, r1, #24
 8008210:	f853 5b04 	ldr.w	r5, [r3], #4
 8008214:	d402      	bmi.n	800821c <_printf_i+0xe8>
 8008216:	0649      	lsls	r1, r1, #25
 8008218:	bf48      	it	mi
 800821a:	b2ad      	uxthmi	r5, r5
 800821c:	2f6f      	cmp	r7, #111	@ 0x6f
 800821e:	4853      	ldr	r0, [pc, #332]	@ (800836c <_printf_i+0x238>)
 8008220:	6033      	str	r3, [r6, #0]
 8008222:	bf14      	ite	ne
 8008224:	230a      	movne	r3, #10
 8008226:	2308      	moveq	r3, #8
 8008228:	2100      	movs	r1, #0
 800822a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800822e:	6866      	ldr	r6, [r4, #4]
 8008230:	60a6      	str	r6, [r4, #8]
 8008232:	2e00      	cmp	r6, #0
 8008234:	bfa2      	ittt	ge
 8008236:	6821      	ldrge	r1, [r4, #0]
 8008238:	f021 0104 	bicge.w	r1, r1, #4
 800823c:	6021      	strge	r1, [r4, #0]
 800823e:	b90d      	cbnz	r5, 8008244 <_printf_i+0x110>
 8008240:	2e00      	cmp	r6, #0
 8008242:	d04b      	beq.n	80082dc <_printf_i+0x1a8>
 8008244:	4616      	mov	r6, r2
 8008246:	fbb5 f1f3 	udiv	r1, r5, r3
 800824a:	fb03 5711 	mls	r7, r3, r1, r5
 800824e:	5dc7      	ldrb	r7, [r0, r7]
 8008250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008254:	462f      	mov	r7, r5
 8008256:	42bb      	cmp	r3, r7
 8008258:	460d      	mov	r5, r1
 800825a:	d9f4      	bls.n	8008246 <_printf_i+0x112>
 800825c:	2b08      	cmp	r3, #8
 800825e:	d10b      	bne.n	8008278 <_printf_i+0x144>
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	07df      	lsls	r7, r3, #31
 8008264:	d508      	bpl.n	8008278 <_printf_i+0x144>
 8008266:	6923      	ldr	r3, [r4, #16]
 8008268:	6861      	ldr	r1, [r4, #4]
 800826a:	4299      	cmp	r1, r3
 800826c:	bfde      	ittt	le
 800826e:	2330      	movle	r3, #48	@ 0x30
 8008270:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008274:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008278:	1b92      	subs	r2, r2, r6
 800827a:	6122      	str	r2, [r4, #16]
 800827c:	f8cd a000 	str.w	sl, [sp]
 8008280:	464b      	mov	r3, r9
 8008282:	aa03      	add	r2, sp, #12
 8008284:	4621      	mov	r1, r4
 8008286:	4640      	mov	r0, r8
 8008288:	f7ff fee6 	bl	8008058 <_printf_common>
 800828c:	3001      	adds	r0, #1
 800828e:	d14a      	bne.n	8008326 <_printf_i+0x1f2>
 8008290:	f04f 30ff 	mov.w	r0, #4294967295
 8008294:	b004      	add	sp, #16
 8008296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	f043 0320 	orr.w	r3, r3, #32
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	4833      	ldr	r0, [pc, #204]	@ (8008370 <_printf_i+0x23c>)
 80082a4:	2778      	movs	r7, #120	@ 0x78
 80082a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	6831      	ldr	r1, [r6, #0]
 80082ae:	061f      	lsls	r7, r3, #24
 80082b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80082b4:	d402      	bmi.n	80082bc <_printf_i+0x188>
 80082b6:	065f      	lsls	r7, r3, #25
 80082b8:	bf48      	it	mi
 80082ba:	b2ad      	uxthmi	r5, r5
 80082bc:	6031      	str	r1, [r6, #0]
 80082be:	07d9      	lsls	r1, r3, #31
 80082c0:	bf44      	itt	mi
 80082c2:	f043 0320 	orrmi.w	r3, r3, #32
 80082c6:	6023      	strmi	r3, [r4, #0]
 80082c8:	b11d      	cbz	r5, 80082d2 <_printf_i+0x19e>
 80082ca:	2310      	movs	r3, #16
 80082cc:	e7ac      	b.n	8008228 <_printf_i+0xf4>
 80082ce:	4827      	ldr	r0, [pc, #156]	@ (800836c <_printf_i+0x238>)
 80082d0:	e7e9      	b.n	80082a6 <_printf_i+0x172>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	f023 0320 	bic.w	r3, r3, #32
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	e7f6      	b.n	80082ca <_printf_i+0x196>
 80082dc:	4616      	mov	r6, r2
 80082de:	e7bd      	b.n	800825c <_printf_i+0x128>
 80082e0:	6833      	ldr	r3, [r6, #0]
 80082e2:	6825      	ldr	r5, [r4, #0]
 80082e4:	6961      	ldr	r1, [r4, #20]
 80082e6:	1d18      	adds	r0, r3, #4
 80082e8:	6030      	str	r0, [r6, #0]
 80082ea:	062e      	lsls	r6, r5, #24
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	d501      	bpl.n	80082f4 <_printf_i+0x1c0>
 80082f0:	6019      	str	r1, [r3, #0]
 80082f2:	e002      	b.n	80082fa <_printf_i+0x1c6>
 80082f4:	0668      	lsls	r0, r5, #25
 80082f6:	d5fb      	bpl.n	80082f0 <_printf_i+0x1bc>
 80082f8:	8019      	strh	r1, [r3, #0]
 80082fa:	2300      	movs	r3, #0
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	4616      	mov	r6, r2
 8008300:	e7bc      	b.n	800827c <_printf_i+0x148>
 8008302:	6833      	ldr	r3, [r6, #0]
 8008304:	1d1a      	adds	r2, r3, #4
 8008306:	6032      	str	r2, [r6, #0]
 8008308:	681e      	ldr	r6, [r3, #0]
 800830a:	6862      	ldr	r2, [r4, #4]
 800830c:	2100      	movs	r1, #0
 800830e:	4630      	mov	r0, r6
 8008310:	f7f7 ff5e 	bl	80001d0 <memchr>
 8008314:	b108      	cbz	r0, 800831a <_printf_i+0x1e6>
 8008316:	1b80      	subs	r0, r0, r6
 8008318:	6060      	str	r0, [r4, #4]
 800831a:	6863      	ldr	r3, [r4, #4]
 800831c:	6123      	str	r3, [r4, #16]
 800831e:	2300      	movs	r3, #0
 8008320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008324:	e7aa      	b.n	800827c <_printf_i+0x148>
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	4632      	mov	r2, r6
 800832a:	4649      	mov	r1, r9
 800832c:	4640      	mov	r0, r8
 800832e:	47d0      	blx	sl
 8008330:	3001      	adds	r0, #1
 8008332:	d0ad      	beq.n	8008290 <_printf_i+0x15c>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	079b      	lsls	r3, r3, #30
 8008338:	d413      	bmi.n	8008362 <_printf_i+0x22e>
 800833a:	68e0      	ldr	r0, [r4, #12]
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	4298      	cmp	r0, r3
 8008340:	bfb8      	it	lt
 8008342:	4618      	movlt	r0, r3
 8008344:	e7a6      	b.n	8008294 <_printf_i+0x160>
 8008346:	2301      	movs	r3, #1
 8008348:	4632      	mov	r2, r6
 800834a:	4649      	mov	r1, r9
 800834c:	4640      	mov	r0, r8
 800834e:	47d0      	blx	sl
 8008350:	3001      	adds	r0, #1
 8008352:	d09d      	beq.n	8008290 <_printf_i+0x15c>
 8008354:	3501      	adds	r5, #1
 8008356:	68e3      	ldr	r3, [r4, #12]
 8008358:	9903      	ldr	r1, [sp, #12]
 800835a:	1a5b      	subs	r3, r3, r1
 800835c:	42ab      	cmp	r3, r5
 800835e:	dcf2      	bgt.n	8008346 <_printf_i+0x212>
 8008360:	e7eb      	b.n	800833a <_printf_i+0x206>
 8008362:	2500      	movs	r5, #0
 8008364:	f104 0619 	add.w	r6, r4, #25
 8008368:	e7f5      	b.n	8008356 <_printf_i+0x222>
 800836a:	bf00      	nop
 800836c:	08008c91 	.word	0x08008c91
 8008370:	08008ca2 	.word	0x08008ca2

08008374 <__sflush_r>:
 8008374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837c:	0716      	lsls	r6, r2, #28
 800837e:	4605      	mov	r5, r0
 8008380:	460c      	mov	r4, r1
 8008382:	d454      	bmi.n	800842e <__sflush_r+0xba>
 8008384:	684b      	ldr	r3, [r1, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	dc02      	bgt.n	8008390 <__sflush_r+0x1c>
 800838a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	dd48      	ble.n	8008422 <__sflush_r+0xae>
 8008390:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008392:	2e00      	cmp	r6, #0
 8008394:	d045      	beq.n	8008422 <__sflush_r+0xae>
 8008396:	2300      	movs	r3, #0
 8008398:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800839c:	682f      	ldr	r7, [r5, #0]
 800839e:	6a21      	ldr	r1, [r4, #32]
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	d030      	beq.n	8008406 <__sflush_r+0x92>
 80083a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	0759      	lsls	r1, r3, #29
 80083aa:	d505      	bpl.n	80083b8 <__sflush_r+0x44>
 80083ac:	6863      	ldr	r3, [r4, #4]
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083b2:	b10b      	cbz	r3, 80083b8 <__sflush_r+0x44>
 80083b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083b6:	1ad2      	subs	r2, r2, r3
 80083b8:	2300      	movs	r3, #0
 80083ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083bc:	6a21      	ldr	r1, [r4, #32]
 80083be:	4628      	mov	r0, r5
 80083c0:	47b0      	blx	r6
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	d106      	bne.n	80083d6 <__sflush_r+0x62>
 80083c8:	6829      	ldr	r1, [r5, #0]
 80083ca:	291d      	cmp	r1, #29
 80083cc:	d82b      	bhi.n	8008426 <__sflush_r+0xb2>
 80083ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008478 <__sflush_r+0x104>)
 80083d0:	410a      	asrs	r2, r1
 80083d2:	07d6      	lsls	r6, r2, #31
 80083d4:	d427      	bmi.n	8008426 <__sflush_r+0xb2>
 80083d6:	2200      	movs	r2, #0
 80083d8:	6062      	str	r2, [r4, #4]
 80083da:	04d9      	lsls	r1, r3, #19
 80083dc:	6922      	ldr	r2, [r4, #16]
 80083de:	6022      	str	r2, [r4, #0]
 80083e0:	d504      	bpl.n	80083ec <__sflush_r+0x78>
 80083e2:	1c42      	adds	r2, r0, #1
 80083e4:	d101      	bne.n	80083ea <__sflush_r+0x76>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	b903      	cbnz	r3, 80083ec <__sflush_r+0x78>
 80083ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80083ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083ee:	602f      	str	r7, [r5, #0]
 80083f0:	b1b9      	cbz	r1, 8008422 <__sflush_r+0xae>
 80083f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083f6:	4299      	cmp	r1, r3
 80083f8:	d002      	beq.n	8008400 <__sflush_r+0x8c>
 80083fa:	4628      	mov	r0, r5
 80083fc:	f7ff fbea 	bl	8007bd4 <_free_r>
 8008400:	2300      	movs	r3, #0
 8008402:	6363      	str	r3, [r4, #52]	@ 0x34
 8008404:	e00d      	b.n	8008422 <__sflush_r+0xae>
 8008406:	2301      	movs	r3, #1
 8008408:	4628      	mov	r0, r5
 800840a:	47b0      	blx	r6
 800840c:	4602      	mov	r2, r0
 800840e:	1c50      	adds	r0, r2, #1
 8008410:	d1c9      	bne.n	80083a6 <__sflush_r+0x32>
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0c6      	beq.n	80083a6 <__sflush_r+0x32>
 8008418:	2b1d      	cmp	r3, #29
 800841a:	d001      	beq.n	8008420 <__sflush_r+0xac>
 800841c:	2b16      	cmp	r3, #22
 800841e:	d11e      	bne.n	800845e <__sflush_r+0xea>
 8008420:	602f      	str	r7, [r5, #0]
 8008422:	2000      	movs	r0, #0
 8008424:	e022      	b.n	800846c <__sflush_r+0xf8>
 8008426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800842a:	b21b      	sxth	r3, r3
 800842c:	e01b      	b.n	8008466 <__sflush_r+0xf2>
 800842e:	690f      	ldr	r7, [r1, #16]
 8008430:	2f00      	cmp	r7, #0
 8008432:	d0f6      	beq.n	8008422 <__sflush_r+0xae>
 8008434:	0793      	lsls	r3, r2, #30
 8008436:	680e      	ldr	r6, [r1, #0]
 8008438:	bf08      	it	eq
 800843a:	694b      	ldreq	r3, [r1, #20]
 800843c:	600f      	str	r7, [r1, #0]
 800843e:	bf18      	it	ne
 8008440:	2300      	movne	r3, #0
 8008442:	eba6 0807 	sub.w	r8, r6, r7
 8008446:	608b      	str	r3, [r1, #8]
 8008448:	f1b8 0f00 	cmp.w	r8, #0
 800844c:	dde9      	ble.n	8008422 <__sflush_r+0xae>
 800844e:	6a21      	ldr	r1, [r4, #32]
 8008450:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008452:	4643      	mov	r3, r8
 8008454:	463a      	mov	r2, r7
 8008456:	4628      	mov	r0, r5
 8008458:	47b0      	blx	r6
 800845a:	2800      	cmp	r0, #0
 800845c:	dc08      	bgt.n	8008470 <__sflush_r+0xfc>
 800845e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008466:	81a3      	strh	r3, [r4, #12]
 8008468:	f04f 30ff 	mov.w	r0, #4294967295
 800846c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008470:	4407      	add	r7, r0
 8008472:	eba8 0800 	sub.w	r8, r8, r0
 8008476:	e7e7      	b.n	8008448 <__sflush_r+0xd4>
 8008478:	dfbffffe 	.word	0xdfbffffe

0800847c <_fflush_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	690b      	ldr	r3, [r1, #16]
 8008480:	4605      	mov	r5, r0
 8008482:	460c      	mov	r4, r1
 8008484:	b913      	cbnz	r3, 800848c <_fflush_r+0x10>
 8008486:	2500      	movs	r5, #0
 8008488:	4628      	mov	r0, r5
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	b118      	cbz	r0, 8008496 <_fflush_r+0x1a>
 800848e:	6a03      	ldr	r3, [r0, #32]
 8008490:	b90b      	cbnz	r3, 8008496 <_fflush_r+0x1a>
 8008492:	f7ff f8e9 	bl	8007668 <__sinit>
 8008496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0f3      	beq.n	8008486 <_fflush_r+0xa>
 800849e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084a0:	07d0      	lsls	r0, r2, #31
 80084a2:	d404      	bmi.n	80084ae <_fflush_r+0x32>
 80084a4:	0599      	lsls	r1, r3, #22
 80084a6:	d402      	bmi.n	80084ae <_fflush_r+0x32>
 80084a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084aa:	f7ff fb90 	bl	8007bce <__retarget_lock_acquire_recursive>
 80084ae:	4628      	mov	r0, r5
 80084b0:	4621      	mov	r1, r4
 80084b2:	f7ff ff5f 	bl	8008374 <__sflush_r>
 80084b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084b8:	07da      	lsls	r2, r3, #31
 80084ba:	4605      	mov	r5, r0
 80084bc:	d4e4      	bmi.n	8008488 <_fflush_r+0xc>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	059b      	lsls	r3, r3, #22
 80084c2:	d4e1      	bmi.n	8008488 <_fflush_r+0xc>
 80084c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084c6:	f7ff fb83 	bl	8007bd0 <__retarget_lock_release_recursive>
 80084ca:	e7dd      	b.n	8008488 <_fflush_r+0xc>

080084cc <__swhatbuf_r>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	460c      	mov	r4, r1
 80084d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d4:	2900      	cmp	r1, #0
 80084d6:	b096      	sub	sp, #88	@ 0x58
 80084d8:	4615      	mov	r5, r2
 80084da:	461e      	mov	r6, r3
 80084dc:	da0d      	bge.n	80084fa <__swhatbuf_r+0x2e>
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084e4:	f04f 0100 	mov.w	r1, #0
 80084e8:	bf14      	ite	ne
 80084ea:	2340      	movne	r3, #64	@ 0x40
 80084ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084f0:	2000      	movs	r0, #0
 80084f2:	6031      	str	r1, [r6, #0]
 80084f4:	602b      	str	r3, [r5, #0]
 80084f6:	b016      	add	sp, #88	@ 0x58
 80084f8:	bd70      	pop	{r4, r5, r6, pc}
 80084fa:	466a      	mov	r2, sp
 80084fc:	f000 f848 	bl	8008590 <_fstat_r>
 8008500:	2800      	cmp	r0, #0
 8008502:	dbec      	blt.n	80084de <__swhatbuf_r+0x12>
 8008504:	9901      	ldr	r1, [sp, #4]
 8008506:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800850a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800850e:	4259      	negs	r1, r3
 8008510:	4159      	adcs	r1, r3
 8008512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008516:	e7eb      	b.n	80084f0 <__swhatbuf_r+0x24>

08008518 <__smakebuf_r>:
 8008518:	898b      	ldrh	r3, [r1, #12]
 800851a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800851c:	079d      	lsls	r5, r3, #30
 800851e:	4606      	mov	r6, r0
 8008520:	460c      	mov	r4, r1
 8008522:	d507      	bpl.n	8008534 <__smakebuf_r+0x1c>
 8008524:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	6123      	str	r3, [r4, #16]
 800852c:	2301      	movs	r3, #1
 800852e:	6163      	str	r3, [r4, #20]
 8008530:	b003      	add	sp, #12
 8008532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008534:	ab01      	add	r3, sp, #4
 8008536:	466a      	mov	r2, sp
 8008538:	f7ff ffc8 	bl	80084cc <__swhatbuf_r>
 800853c:	9f00      	ldr	r7, [sp, #0]
 800853e:	4605      	mov	r5, r0
 8008540:	4639      	mov	r1, r7
 8008542:	4630      	mov	r0, r6
 8008544:	f7ff fbba 	bl	8007cbc <_malloc_r>
 8008548:	b948      	cbnz	r0, 800855e <__smakebuf_r+0x46>
 800854a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854e:	059a      	lsls	r2, r3, #22
 8008550:	d4ee      	bmi.n	8008530 <__smakebuf_r+0x18>
 8008552:	f023 0303 	bic.w	r3, r3, #3
 8008556:	f043 0302 	orr.w	r3, r3, #2
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	e7e2      	b.n	8008524 <__smakebuf_r+0xc>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	6020      	str	r0, [r4, #0]
 8008562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	9b01      	ldr	r3, [sp, #4]
 800856a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800856e:	b15b      	cbz	r3, 8008588 <__smakebuf_r+0x70>
 8008570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008574:	4630      	mov	r0, r6
 8008576:	f000 f81d 	bl	80085b4 <_isatty_r>
 800857a:	b128      	cbz	r0, 8008588 <__smakebuf_r+0x70>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	431d      	orrs	r5, r3
 800858c:	81a5      	strh	r5, [r4, #12]
 800858e:	e7cf      	b.n	8008530 <__smakebuf_r+0x18>

08008590 <_fstat_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d07      	ldr	r5, [pc, #28]	@ (80085b0 <_fstat_r+0x20>)
 8008594:	2300      	movs	r3, #0
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	4611      	mov	r1, r2
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	f7f8 fa55 	bl	8000a4c <_fstat>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	d102      	bne.n	80085ac <_fstat_r+0x1c>
 80085a6:	682b      	ldr	r3, [r5, #0]
 80085a8:	b103      	cbz	r3, 80085ac <_fstat_r+0x1c>
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	bd38      	pop	{r3, r4, r5, pc}
 80085ae:	bf00      	nop
 80085b0:	2000037c 	.word	0x2000037c

080085b4 <_isatty_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4d06      	ldr	r5, [pc, #24]	@ (80085d0 <_isatty_r+0x1c>)
 80085b8:	2300      	movs	r3, #0
 80085ba:	4604      	mov	r4, r0
 80085bc:	4608      	mov	r0, r1
 80085be:	602b      	str	r3, [r5, #0]
 80085c0:	f7f8 fa54 	bl	8000a6c <_isatty>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d102      	bne.n	80085ce <_isatty_r+0x1a>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	b103      	cbz	r3, 80085ce <_isatty_r+0x1a>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	2000037c 	.word	0x2000037c

080085d4 <_sbrk_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4d06      	ldr	r5, [pc, #24]	@ (80085f0 <_sbrk_r+0x1c>)
 80085d8:	2300      	movs	r3, #0
 80085da:	4604      	mov	r4, r0
 80085dc:	4608      	mov	r0, r1
 80085de:	602b      	str	r3, [r5, #0]
 80085e0:	f7f8 fa5c 	bl	8000a9c <_sbrk>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d102      	bne.n	80085ee <_sbrk_r+0x1a>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	b103      	cbz	r3, 80085ee <_sbrk_r+0x1a>
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	2000037c 	.word	0x2000037c

080085f4 <_init>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr

08008600 <_fini>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr
