
test_artnet_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005790  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005920  08005920  00006920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a44  08005a44  00007098  2**0
                  CONTENTS
  4 .ARM          00000008  08005a44  08005a44  00006a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a4c  08005a4c  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a4c  08005a4c  00006a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a50  08005a50  00006a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08005a54  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  20000098  08005aec  00007098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  08005aec  00007b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101eb  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afd  00000000  00000000  000172b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00019db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b32  00000000  00000000  0001ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bf4  00000000  00000000  0001b77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d54  00000000  00000000  0004436e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eff21  00000000  00000000  000580c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147fe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b4  00000000  00000000  00148028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0014c2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005908 	.word	0x08005908

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08005908 	.word	0x08005908

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005dc:	4812      	ldr	r0, [pc, #72]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005de:	f001 fc37 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005fa:	f001 fa7f 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4804      	ldr	r0, [pc, #16]	@ (8000628 <MX_GPIO_Init+0xc8>)
 8000618:	f001 fa70 	bl	8001afc <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	@ 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <__io_putchar+0x20>)
 800063e:	f003 fbb3 	bl	8003da8 <HAL_UART_Transmit>

	return chr;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000920 	.word	0x20000920

08000650 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000656:	f001 f8cb 	bl	80017f0 <HAL_Init>

	/* USER CODE BEGIN Init */
	setbuf(stdout, NULL);
 800065a:	4b2f      	ldr	r3, [pc, #188]	@ (8000718 <main+0xc8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fa30 	bl	8004ac8 <setbuf>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000668:	f000 f864 	bl	8000734 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800066c:	f7ff ff78 	bl	8000560 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000670:	f000 fa5c 	bl	8000b2c <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000674:	f000 f8b6 	bl	80007e4 <MX_SPI1_Init>
	printf("---------- AVANT print_current_host_configuration ----------\r\n");
	print_current_host_configuration();
	printf("---------- APRES print_current_host_configuration ----------\r\n");
	 */

	printf("----- BEGIN -----\r\n");
 8000678:	4828      	ldr	r0, [pc, #160]	@ (800071c <main+0xcc>)
 800067a:	f004 fa1d 	bl	8004ab8 <puts>

	uint8_t tx_buf[] = {0x00, 0x01, 0x02, 0x03};
 800067e:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <main+0xd0>)
 8000680:	607b      	str	r3, [r7, #4]
	uint8_t rx_buf[4];

	// Sélectionner le W5500
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2110      	movs	r1, #16
 8000686:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068a:	f001 fbe1 	bl	8001e50 <HAL_GPIO_WritePin>

	// Envoyer et recevoir des données
	HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, sizeof(tx_buf), HAL_MAX_DELAY);
 800068e:	463a      	mov	r2, r7
 8000690:	1d39      	adds	r1, r7, #4
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2304      	movs	r3, #4
 800069a:	4822      	ldr	r0, [pc, #136]	@ (8000724 <main+0xd4>)
 800069c:	f002 ffb3 	bl	8003606 <HAL_SPI_TransmitReceive>

	// Désélectionner le W5500
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a8:	f001 fbd2 	bl	8001e50 <HAL_GPIO_WritePin>

	// Configurer le socket UDP pour Art-Net
	uint8_t socket_num = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	737b      	strb	r3, [r7, #13]
	uint16_t port = 6454; // Port Art-Net par défaut
 80006b0:	f641 1336 	movw	r3, #6454	@ 0x1936
 80006b4:	817b      	strh	r3, [r7, #10]

	// Ouvrir un socket UDP
	socket(socket_num, Sn_MR_UDP, port, 0x00);
 80006b6:	897a      	ldrh	r2, [r7, #10]
 80006b8:	7b78      	ldrb	r0, [r7, #13]
 80006ba:	2300      	movs	r3, #0
 80006bc:	2102      	movs	r1, #2
 80006be:	f000 fcc7 	bl	8001050 <socket>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		printf("----- WHILE -----\r\n");
 80006c2:	4819      	ldr	r0, [pc, #100]	@ (8000728 <main+0xd8>)
 80006c4:	f004 f9f8 	bl	8004ab8 <puts>

		// Vérifier si des données sont disponibles
		uint16_t size;
		if ((size = getSn_RX_RSR(socket_num)) > 0)
 80006c8:	7b7b      	ldrb	r3, [r7, #13]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fbc8 	bl	8000e60 <getSn_RX_RSR>
 80006d0:	4603      	mov	r3, r0
 80006d2:	813b      	strh	r3, [r7, #8]
 80006d4:	893b      	ldrh	r3, [r7, #8]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d019      	beq.n	800070e <main+0xbe>
		{
			// Lire les données
			recvfrom(socket_num, socket_buffer, size, NULL, NULL);
 80006da:	893a      	ldrh	r2, [r7, #8]
 80006dc:	7b78      	ldrb	r0, [r7, #13]
 80006de:	2300      	movs	r3, #0
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	4911      	ldr	r1, [pc, #68]	@ (800072c <main+0xdc>)
 80006e6:	f000 fe35 	bl	8001354 <recvfrom>

			// Afficher les données dans le terminal
			for (uint16_t i = 0; i < size; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	81fb      	strh	r3, [r7, #14]
 80006ee:	e009      	b.n	8000704 <main+0xb4>
			{
				printf("%02X\r\n", socket_buffer[i]);
 80006f0:	89fb      	ldrh	r3, [r7, #14]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	@ (800072c <main+0xdc>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	4619      	mov	r1, r3
 80006f8:	480d      	ldr	r0, [pc, #52]	@ (8000730 <main+0xe0>)
 80006fa:	f004 f975 	bl	80049e8 <iprintf>
			for (uint16_t i = 0; i < size; i++)
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	3301      	adds	r3, #1
 8000702:	81fb      	strh	r3, [r7, #14]
 8000704:	89fa      	ldrh	r2, [r7, #14]
 8000706:	893b      	ldrh	r3, [r7, #8]
 8000708:	429a      	cmp	r2, r3
 800070a:	d3f1      	bcc.n	80006f0 <main+0xa0>
 800070c:	e7d9      	b.n	80006c2 <main+0x72>
			}
		}
		else
		{
			// Ajouter un délai pour éviter une boucle trop rapide
			HAL_Delay(500);
 800070e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000712:	f001 f8e9 	bl	80018e8 <HAL_Delay>
	{
 8000716:	e7d4      	b.n	80006c2 <main+0x72>
 8000718:	20000048 	.word	0x20000048
 800071c:	08005938 	.word	0x08005938
 8000720:	03020100 	.word	0x03020100
 8000724:	200008b4 	.word	0x200008b4
 8000728:	0800594c 	.word	0x0800594c
 800072c:	200000b4 	.word	0x200000b4
 8000730:	08005960 	.word	0x08005960

08000734 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	@ 0x58
 8000738:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2244      	movs	r2, #68	@ 0x44
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fb54 	bl	8004df0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000756:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800075a:	f001 fb9f 	bl	8001e9c <HAL_PWREx_ControlVoltageScaling>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000764:	f000 f837 	bl	80007d6 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000770:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2310      	movs	r3, #16
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000782:	230a      	movs	r3, #10
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000786:	2307      	movs	r3, #7
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fbd6 	bl	8001f48 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80007a2:	f000 f818 	bl	80007d6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 ff9e 	bl	8002700 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80007ca:	f000 f804 	bl	80007d6 <Error_Handler>
	}
}
 80007ce:	bf00      	nop
 80007d0:	3758      	adds	r7, #88	@ 0x58
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007da:	b672      	cpsid	i
}
 80007dc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007de:	bf00      	nop
 80007e0:	e7fd      	b.n	80007de <Error_Handler+0x8>
	...

080007e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_SPI1_Init+0x84>)
 80007ea:	4a20      	ldr	r2, [pc, #128]	@ (800086c <MX_SPI1_Init+0x88>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_SPI1_Init+0x84>)
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_SPI1_Init+0x84>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_SPI1_Init+0x84>)
 80007fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000802:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000804:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080a:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_SPI1_Init+0x84>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000812:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000816:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_SPI1_Init+0x84>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI1_Init+0x84>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000830:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000832:	2207      	movs	r2, #7
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_SPI1_Init+0x84>)
 800083e:	2208      	movs	r2, #8
 8000840:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000842:	4809      	ldr	r0, [pc, #36]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000844:	f002 fe3c 	bl	80034c0 <HAL_SPI_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800084e:	f7ff ffc2 	bl	80007d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000852:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <MX_SPI1_Init+0x84>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000860:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200008b4 	.word	0x200008b4
 800086c:	40013000 	.word	0x40013000

08000870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <HAL_SPI_MspInit+0x7c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d128      	bne.n	80008e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	4a16      	ldr	r2, [pc, #88]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 8000898:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800089c:	6613      	str	r3, [r2, #96]	@ 0x60
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	4a10      	ldr	r2, [pc, #64]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008c2:	23f0      	movs	r3, #240	@ 0xf0
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d2:	2305      	movs	r3, #5
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f001 f90c 	bl	8001afc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	@ 0x60
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000916:	4a08      	ldr	r2, [pc, #32]	@ (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	@ 0x58
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <SysTick_Handler+0x2c>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <SysTick_Handler+0x2c>)
 800099e:	801a      	strh	r2, [r3, #0]
	if(ticks == 1000) {
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <SysTick_Handler+0x2c>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009a8:	d104      	bne.n	80009b4 <SysTick_Handler+0x24>
		DHCP_time_handler();
 80009aa:	f000 fb43 	bl	8001034 <DHCP_time_handler>
		ticks = 0;
 80009ae:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <SysTick_Handler+0x2c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	801a      	strh	r2, [r3, #0]
	}
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80009b4:	f000 ff78 	bl	80018a8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000918 	.word	0x20000918

080009c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00a      	b.n	80009e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d2:	f3af 8000 	nop.w
 80009d6:	4601      	mov	r1, r0
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf0      	blt.n	80009d2 <_read+0x12>
  }

  return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e009      	b.n	8000a20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fe09 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf1      	blt.n	8000a0c <_write+0x12>
  }
  return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_isatty>:

int _isatty(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f004 f9de 	bl	8004e8c <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20018000 	.word	0x20018000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	2000091c 	.word	0x2000091c
 8000b04:	20000b18 	.word	0x20000b18

08000b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b32:	4a15      	ldr	r2, [pc, #84]	@ (8000b88 <MX_USART2_UART_Init+0x5c>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b70:	f003 f8cc 	bl	8003d0c <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b7a:	f7ff fe2c 	bl	80007d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000920 	.word	0x20000920
 8000b88:	40004400 	.word	0x40004400

08000b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2288      	movs	r2, #136	@ 0x88
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f004 f91f 	bl	8004df0 <memset>
  if(uartHandle->Instance==USART2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <HAL_UART_MspInit+0xb0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d13b      	bne.n	8000c34 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 ffbd 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd4:	f7ff fdff 	bl	80007d6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bdc:	4a18      	ldr	r2, [pc, #96]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c20:	2307      	movs	r3, #7
 8000c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f000 ff64 	bl	8001afc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c34:	bf00      	nop
 8000c36:	37b0      	adds	r7, #176	@ 0xb0
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40021000 	.word	0x40021000

08000c44 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	uint8_t spi_data[3];

	WIZCHIP_CRITICAL_ENTER();
 8000c4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4798      	blx	r3
	WIZCHIP.CS._select();
 8000c52:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4798      	blx	r3

	AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

	if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <WIZCHIP_READ+0x24>
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d117      	bne.n	8000c98 <WIZCHIP_READ+0x54>
	{
		printf("SPI Read: Byte mode\r\n");
 8000c68:	481f      	ldr	r0, [pc, #124]	@ (8000ce8 <WIZCHIP_READ+0xa4>)
 8000c6a:	f003 ff25 	bl	8004ab8 <puts>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c70:	6a1b      	ldr	r3, [r3, #32]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	0c12      	lsrs	r2, r2, #16
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	4610      	mov	r0, r2
 8000c7a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	0a12      	lsrs	r2, r2, #8
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	4610      	mov	r0, r2
 8000c88:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000c8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c8c:	6a1b      	ldr	r3, [r3, #32]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	4610      	mov	r0, r2
 8000c94:	4798      	blx	r3
 8000c96:	e014      	b.n	8000cc2 <WIZCHIP_READ+0x7e>
	}
	else																// burst operation
	{
		printf("SPI Read: Burst mode\r\n");
 8000c98:	4814      	ldr	r0, [pc, #80]	@ (8000cec <WIZCHIP_READ+0xa8>)
 8000c9a:	f003 ff0d 	bl	8004ab8 <puts>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	0c1b      	lsrs	r3, r3, #16
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb8:	f107 020c 	add.w	r2, r7, #12
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	4798      	blx	r3
	}
	ret = WIZCHIP.IF.SPI._read_byte();
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4798      	blx	r3
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]

	WIZCHIP.CS._deselect();
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4798      	blx	r3
	WIZCHIP_CRITICAL_EXIT();
 8000cd2:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	4798      	blx	r3
	return ret;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	08005968 	.word	0x08005968
 8000cec:	08005980 	.word	0x08005980

08000cf0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
	uint8_t spi_data[4];

	WIZCHIP_CRITICAL_ENTER();
 8000cfc:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	4798      	blx	r3
	WIZCHIP.CS._select();
 8000d02:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4798      	blx	r3

	AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	607b      	str	r3, [r7, #4]

	//if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
	if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000d10:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d11c      	bne.n	8000d52 <WIZCHIP_WRITE+0x62>
	{
		printf("SPI Write: Byte mode\r\n");
 8000d18:	481f      	ldr	r0, [pc, #124]	@ (8000d98 <WIZCHIP_WRITE+0xa8>)
 8000d1a:	f003 fecd 	bl	8004ab8 <puts>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	0c12      	lsrs	r2, r2, #16
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	0a12      	lsrs	r2, r2, #8
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	4610      	mov	r0, r2
 8000d38:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	4610      	mov	r0, r2
 8000d44:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	78fa      	ldrb	r2, [r7, #3]
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4798      	blx	r3
 8000d50:	e016      	b.n	8000d80 <WIZCHIP_WRITE+0x90>
	}
	else									// burst operation
	{
		printf("SPI Write: Burst mode\r\n");
 8000d52:	4812      	ldr	r0, [pc, #72]	@ (8000d9c <WIZCHIP_WRITE+0xac>)
 8000d54:	f003 feb0 	bl	8004ab8 <puts>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	0c1b      	lsrs	r3, r3, #16
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d76:	f107 020c 	add.w	r2, r7, #12
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4798      	blx	r3
	}

	WIZCHIP.CS._deselect();
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4798      	blx	r3
	WIZCHIP_CRITICAL_EXIT();
 8000d86:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	4798      	blx	r3
}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000008 	.word	0x20000008
 8000d98:	08005998 	.word	0x08005998
 8000d9c:	080059b0 	.word	0x080059b0

08000da0 <WIZCHIP_READ_BUF>:

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	4613      	mov	r3, r2
 8000dac:	80fb      	strh	r3, [r7, #6]
	uint8_t spi_data[3];
	uint16_t i;

	WIZCHIP_CRITICAL_ENTER();
 8000dae:	4b2b      	ldr	r3, [pc, #172]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	4798      	blx	r3
	WIZCHIP.CS._select();
 8000db4:	4b29      	ldr	r3, [pc, #164]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	4798      	blx	r3

	AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

	if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000dba:	4b28      	ldr	r3, [pc, #160]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <WIZCHIP_READ_BUF+0x2a>
 8000dc2:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d126      	bne.n	8000e18 <WIZCHIP_READ_BUF+0x78>
	{
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000dca:	4b24      	ldr	r3, [pc, #144]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	0c12      	lsrs	r2, r2, #16
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000dd8:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	0a12      	lsrs	r2, r2, #8
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	4610      	mov	r0, r2
 8000de4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000de6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	4610      	mov	r0, r2
 8000df0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	82fb      	strh	r3, [r7, #22]
 8000df6:	e00a      	b.n	8000e0e <WIZCHIP_READ_BUF+0x6e>
			pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	8afa      	ldrh	r2, [r7, #22]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	188c      	adds	r4, r1, r2
 8000e02:	4798      	blx	r3
 8000e04:	4603      	mov	r3, r0
 8000e06:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000e08:	8afb      	ldrh	r3, [r7, #22]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	82fb      	strh	r3, [r7, #22]
 8000e0e:	8afa      	ldrh	r2, [r7, #22]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d3f0      	bcc.n	8000df8 <WIZCHIP_READ_BUF+0x58>
	if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000e16:	e017      	b.n	8000e48 <WIZCHIP_READ_BUF+0xa8>
	}
	else																// burst operation
	{
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	0c1b      	lsrs	r3, r3, #16
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e32:	f107 0210 	add.w	r2, r7, #16
 8000e36:	2103      	movs	r1, #3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000e3c:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e40:	88fa      	ldrh	r2, [r7, #6]
 8000e42:	4611      	mov	r1, r2
 8000e44:	68b8      	ldr	r0, [r7, #8]
 8000e46:	4798      	blx	r3
	}

	WIZCHIP.CS._deselect();
 8000e48:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4798      	blx	r3
	WIZCHIP_CRITICAL_EXIT();
 8000e4e:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	4798      	blx	r3
}
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	20000008 	.word	0x20000008

08000e60 <getSn_RX_RSR>:
	return val;
}


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	uint16_t val=0,val1=0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	81fb      	strh	r3, [r7, #14]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	81bb      	strh	r3, [r7, #12]

	do
	{
		val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	3301      	adds	r3, #1
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fee0 	bl	8000c44 <WIZCHIP_READ>
 8000e84:	4603      	mov	r3, r0
 8000e86:	81bb      	strh	r3, [r7, #12]
		val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000e88:	89bb      	ldrh	r3, [r7, #12]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	b29c      	uxth	r4, r3
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	3301      	adds	r3, #1
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fed2 	bl	8000c44 <WIZCHIP_READ>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4423      	add	r3, r4
 8000ea4:	81bb      	strh	r3, [r7, #12]
		if (val1 != 0)
 8000ea6:	89bb      	ldrh	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d019      	beq.n	8000ee0 <getSn_RX_RSR+0x80>
		{
			val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fec3 	bl	8000c44 <WIZCHIP_READ>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	81fb      	strh	r3, [r7, #14]
			val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	b29c      	uxth	r4, r3
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	3301      	adds	r3, #1
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff feb5 	bl	8000c44 <WIZCHIP_READ>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4423      	add	r3, r4
 8000ede:	81fb      	strh	r3, [r7, #14]
		}
	}while (val != val1);
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	89bb      	ldrh	r3, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d1c4      	bne.n	8000e72 <getSn_RX_RSR+0x12>
	return val;
 8000ee8:	89fb      	ldrh	r3, [r7, #14]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd90      	pop	{r4, r7, pc}

08000ef2 <wiz_recv_data>:
	ptr += len;
	setSn_TX_WR(sn,ptr);
}

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000ef2:	b590      	push	{r4, r7, lr}
 8000ef4:	b085      	sub	sp, #20
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	6039      	str	r1, [r7, #0]
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	4613      	mov	r3, r2
 8000f00:	80bb      	strh	r3, [r7, #4]
	uint16_t ptr = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	81fb      	strh	r3, [r7, #14]
	uint32_t addrsel = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]

	if(len == 0) return;
 8000f0a:	88bb      	ldrh	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d046      	beq.n	8000f9e <wiz_recv_data+0xac>
	ptr = getSn_RX_RD(sn);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	3301      	adds	r3, #1
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fe91 	bl	8000c44 <WIZCHIP_READ>
 8000f22:	4603      	mov	r3, r0
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29c      	uxth	r4, r3
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fe85 	bl	8000c44 <WIZCHIP_READ>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4423      	add	r3, r4
 8000f3e:	81fb      	strh	r3, [r7, #14]
	//M20140501 : implict type casting -> explict type casting
	//addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
	addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000f40:	89fb      	ldrh	r3, [r7, #14]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	3203      	adds	r2, #3
 8000f4a:	00d2      	lsls	r2, r2, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
	//
	WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	461a      	mov	r2, r3
 8000f54:	6839      	ldr	r1, [r7, #0]
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	f7ff ff22 	bl	8000da0 <WIZCHIP_READ_BUF>
	ptr += len;
 8000f5c:	89fa      	ldrh	r2, [r7, #14]
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	81fb      	strh	r3, [r7, #14]

	setSn_RX_RD(sn,ptr);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	3301      	adds	r3, #1
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000f70:	461a      	mov	r2, r3
 8000f72:	89fb      	ldrh	r3, [r7, #14]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	f7ff feb7 	bl	8000cf0 <WIZCHIP_WRITE>
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	3301      	adds	r3, #1
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8000f8e:	461a      	mov	r2, r3
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	4610      	mov	r0, r2
 8000f98:	f7ff feaa 	bl	8000cf0 <WIZCHIP_WRITE>
 8000f9c:	e000      	b.n	8000fa0 <wiz_recv_data+0xae>
	if(len == 0) return;
 8000f9e:	bf00      	nop
}
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd90      	pop	{r4, r7, pc}

08000fa6 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8000fa6:	b590      	push	{r4, r7, lr}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	460a      	mov	r2, r1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80bb      	strh	r3, [r7, #4]
	uint16_t ptr = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	81fb      	strh	r3, [r7, #14]

	ptr = getSn_RX_RD(sn);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fe3c 	bl	8000c44 <WIZCHIP_READ>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b29c      	uxth	r4, r3
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fe30 	bl	8000c44 <WIZCHIP_READ>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4423      	add	r3, r4
 8000fe8:	81fb      	strh	r3, [r7, #14]
	ptr += len;
 8000fea:	89fa      	ldrh	r2, [r7, #14]
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	81fb      	strh	r3, [r7, #14]
	setSn_RX_RD(sn,ptr);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000ffe:	461a      	mov	r2, r3
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	b29b      	uxth	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
 800100a:	4610      	mov	r0, r2
 800100c:	f7ff fe70 	bl	8000cf0 <WIZCHIP_WRITE>
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	3301      	adds	r3, #1
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800101c:	461a      	mov	r2, r3
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f7ff fe63 	bl	8000cf0 <WIZCHIP_WRITE>
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}
	...

08001034 <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <DHCP_time_handler+0x18>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a03      	ldr	r2, [pc, #12]	@ (800104c <DHCP_time_handler+0x18>)
 8001040:	6013      	str	r3, [r2, #0]
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	200009a8 	.word	0x200009a8

08001050 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	4611      	mov	r1, r2
 800105c:	461a      	mov	r2, r3
 800105e:	4623      	mov	r3, r4
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	4603      	mov	r3, r0
 8001064:	71bb      	strb	r3, [r7, #6]
 8001066:	460b      	mov	r3, r1
 8001068:	80bb      	strh	r3, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d902      	bls.n	800107a <socket+0x2a>
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	e0f0      	b.n	800125c <socket+0x20c>
	switch(protocol)
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d005      	beq.n	800108c <socket+0x3c>
 8001080:	2b00      	cmp	r3, #0
 8001082:	dd11      	ble.n	80010a8 <socket+0x58>
 8001084:	3b02      	subs	r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	d80e      	bhi.n	80010a8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800108a:	e011      	b.n	80010b0 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2204      	movs	r2, #4
 8001092:	4619      	mov	r1, r3
 8001094:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001098:	f7ff fe82 	bl	8000da0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d105      	bne.n	80010ae <socket+0x5e>
 80010a2:	f06f 0302 	mvn.w	r3, #2
 80010a6:	e0d9      	b.n	800125c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80010a8:	f06f 0304 	mvn.w	r3, #4
 80010ac:	e0d6      	b.n	800125c <socket+0x20c>
	    break;
 80010ae:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <socket+0x70>
 80010ba:	f06f 0305 	mvn.w	r3, #5
 80010be:	e0cd      	b.n	800125c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d028      	beq.n	8001118 <socket+0xc8>
	{
   	switch(protocol)
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d002      	beq.n	80010d2 <socket+0x82>
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d008      	beq.n	80010e2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80010d0:	e022      	b.n	8001118 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d11a      	bne.n	8001112 <socket+0xc2>
 80010dc:	f06f 0305 	mvn.w	r3, #5
 80010e0:	e0bc      	b.n	800125c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80010ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db02      	blt.n	80010fa <socket+0xaa>
 80010f4:	f06f 0305 	mvn.w	r3, #5
 80010f8:	e0b0      	b.n	800125c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db04      	blt.n	8001116 <socket+0xc6>
 800110c:	f06f 0305 	mvn.w	r3, #5
 8001110:	e0a4      	b.n	800125c <socket+0x20c>
   	      break;
 8001112:	bf00      	nop
 8001114:	e000      	b.n	8001118 <socket+0xc8>
   	      break;
 8001116:	bf00      	nop
   	}
   }

	close(sn);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f8ac 	bl	8001278 <close>

	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	3301      	adds	r3, #1
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4618      	mov	r0, r3
 800112a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800112e:	f023 030f 	bic.w	r3, r3, #15
 8001132:	b25a      	sxtb	r2, r3
 8001134:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001138:	4313      	orrs	r3, r2
 800113a:	b25b      	sxtb	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fdd6 	bl	8000cf0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001144:	88bb      	ldrh	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d110      	bne.n	800116c <socket+0x11c>
	{
	   port = sock_any_port++;
 800114a:	4b46      	ldr	r3, [pc, #280]	@ (8001264 <socket+0x214>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	b291      	uxth	r1, r2
 8001152:	4a44      	ldr	r2, [pc, #272]	@ (8001264 <socket+0x214>)
 8001154:	8011      	strh	r1, [r2, #0]
 8001156:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001158:	4b42      	ldr	r3, [pc, #264]	@ (8001264 <socket+0x214>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8001160:	4293      	cmp	r3, r2
 8001162:	d103      	bne.n	800116c <socket+0x11c>
 8001164:	4b3f      	ldr	r3, [pc, #252]	@ (8001264 <socket+0x214>)
 8001166:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800116a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	3301      	adds	r3, #1
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001178:	461a      	mov	r2, r3
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	b29b      	uxth	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f7ff fdb3 	bl	8000cf0 <WIZCHIP_WRITE>
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	3301      	adds	r3, #1
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001196:	461a      	mov	r2, r3
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4619      	mov	r1, r3
 800119e:	4610      	mov	r0, r2
 80011a0:	f7ff fda6 	bl	8000cf0 <WIZCHIP_WRITE>

   setSn_CR(sn,Sn_CR_OPEN);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	3301      	adds	r3, #1
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80011b0:	2101      	movs	r1, #1
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fd9c 	bl	8000cf0 <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 80011b8:	bf00      	nop
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	3301      	adds	r3, #1
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fd3c 	bl	8000c44 <WIZCHIP_READ>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f3      	bne.n	80011ba <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2201      	movs	r2, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	b21b      	sxth	r3, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	b21a      	sxth	r2, r3
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <socket+0x218>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4013      	ands	r3, r2
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <socket+0x218>)
 80011ee:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	f003 0201 	and.w	r2, r3, #1
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <socket+0x218>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <socket+0x218>)
 800120c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2201      	movs	r2, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	b21b      	sxth	r3, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <socket+0x21c>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4013      	ands	r3, r2
 8001224:	b21b      	sxth	r3, r3
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <socket+0x21c>)
 800122a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <socket+0x220>)
 8001230:	2100      	movs	r1, #0
 8001232:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <socket+0x224>)
 800123a:	2100      	movs	r1, #0
 800123c:	54d1      	strb	r1, [r2, r3]
   //

   while(getSn_SR(sn) == SOCK_CLOSED);
 800123e:	bf00      	nop
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	3301      	adds	r3, #1
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fcf9 	bl	8000c44 <WIZCHIP_READ>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f3      	beq.n	8001240 <socket+0x1f0>
   return (int8_t)sn;
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	20000004 	.word	0x20000004
 8001268:	200009ac 	.word	0x200009ac
 800126c:	200009ae 	.word	0x200009ae
 8001270:	200009b0 	.word	0x200009b0
 8001274:	200009c0 	.word	0x200009c0

08001278 <close>:

int8_t close(uint8_t sn)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b08      	cmp	r3, #8
 8001286:	d902      	bls.n	800128e <close+0x16>
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	e055      	b.n	800133a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	3301      	adds	r3, #1
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800129a:	2110      	movs	r1, #16
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fd27 	bl	8000cf0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80012a2:	bf00      	nop
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	3301      	adds	r3, #1
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fcc7 	bl	8000c44 <WIZCHIP_READ>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f3      	bne.n	80012a4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	3301      	adds	r3, #1
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012c8:	211f      	movs	r1, #31
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fd10 	bl	8000cf0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2201      	movs	r2, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	b21b      	sxth	r3, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	b21a      	sxth	r2, r3
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <close+0xcc>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4013      	ands	r3, r2
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <close+0xcc>)
 80012ec:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2201      	movs	r2, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <close+0xd0>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4013      	ands	r3, r2
 8001304:	b21b      	sxth	r3, r3
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <close+0xd0>)
 800130a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4a0f      	ldr	r2, [pc, #60]	@ (800134c <close+0xd4>)
 8001310:	2100      	movs	r1, #0
 8001312:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <close+0xd8>)
 800131a:	2100      	movs	r1, #0
 800131c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800131e:	bf00      	nop
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	3301      	adds	r3, #1
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fc89 	bl	8000c44 <WIZCHIP_READ>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f3      	bne.n	8001320 <close+0xa8>
	return SOCK_OK;
 8001338:	2301      	movs	r3, #1
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200009ac 	.word	0x200009ac
 8001348:	200009ae 	.word	0x200009ae
 800134c:	200009b0 	.word	0x200009b0
 8001350:	200009c0 	.word	0x200009c0

08001354 <recvfrom>:
}



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	4613      	mov	r3, r2
 8001364:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8001366:	2300      	movs	r3, #0
 8001368:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b08      	cmp	r3, #8
 800136e:	d902      	bls.n	8001376 <recvfrom+0x22>
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	e1d2      	b.n	800171c <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	3301      	adds	r3, #1
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fc60 	bl	8000c44 <WIZCHIP_READ>
 8001384:	4603      	mov	r3, r0
 8001386:	777b      	strb	r3, [r7, #29]
 8001388:	7f7b      	ldrb	r3, [r7, #29]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b02      	subs	r3, #2
 8001390:	2b02      	cmp	r3, #2
 8001392:	d902      	bls.n	800139a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001394:	f06f 0304 	mvn.w	r3, #4
 8001398:	e1c0      	b.n	800171c <recvfrom+0x3c8>
         break;
 800139a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800139c:	89bb      	ldrh	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <recvfrom+0x54>
 80013a2:	f06f 030d 	mvn.w	r3, #13
 80013a6:	e1b9      	b.n	800171c <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	4a87      	ldr	r2, [pc, #540]	@ (80015c8 <recvfrom+0x274>)
 80013ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d128      	bne.n	8001406 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fd52 	bl	8000e60 <getSn_RX_RSR>
 80013bc:	4603      	mov	r3, r0
 80013be:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	3301      	adds	r3, #1
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fc39 	bl	8000c44 <WIZCHIP_READ>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <recvfrom+0x8a>
 80013d8:	f06f 0303 	mvn.w	r3, #3
 80013dc:	e19e      	b.n	800171c <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80013de:	4b7b      	ldr	r3, [pc, #492]	@ (80015cc <recvfrom+0x278>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	fa42 f303 	asr.w	r3, r2, r3
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <recvfrom+0xa8>
 80013f2:	8bfb      	ldrh	r3, [r7, #30]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <recvfrom+0xa8>
 80013f8:	2300      	movs	r3, #0
 80013fa:	e18f      	b.n	800171c <recvfrom+0x3c8>
         if(pack_len != 0) break;
 80013fc:	8bfb      	ldrh	r3, [r7, #30]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d100      	bne.n	8001404 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8001402:	e7d7      	b.n	80013b4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8001404:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8001406:	7f7b      	ldrb	r3, [r7, #29]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	2b04      	cmp	r3, #4
 800140e:	d078      	beq.n	8001502 <recvfrom+0x1ae>
 8001410:	2b04      	cmp	r3, #4
 8001412:	f300 8140 	bgt.w	8001696 <recvfrom+0x342>
 8001416:	2b02      	cmp	r3, #2
 8001418:	d003      	beq.n	8001422 <recvfrom+0xce>
 800141a:	2b03      	cmp	r3, #3
 800141c:	f000 80da 	beq.w	80015d4 <recvfrom+0x280>
 8001420:	e139      	b.n	8001696 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	4a68      	ldr	r2, [pc, #416]	@ (80015c8 <recvfrom+0x274>)
 8001426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d151      	bne.n	80014d2 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 800142e:	f107 0114 	add.w	r1, r7, #20
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2208      	movs	r2, #8
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fd5b 	bl	8000ef2 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	3301      	adds	r3, #1
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001448:	2140      	movs	r1, #64	@ 0x40
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc50 	bl	8000cf0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001450:	bf00      	nop
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	3301      	adds	r3, #1
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fbf0 	bl	8000c44 <WIZCHIP_READ>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f3      	bne.n	8001452 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800146a:	7d3a      	ldrb	r2, [r7, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3301      	adds	r3, #1
 8001474:	7d7a      	ldrb	r2, [r7, #21]
 8001476:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3302      	adds	r3, #2
 800147c:	7dba      	ldrb	r2, [r7, #22]
 800147e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3303      	adds	r3, #3
 8001484:	7dfa      	ldrb	r2, [r7, #23]
 8001486:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8001488:	7e3b      	ldrb	r3, [r7, #24]
 800148a:	461a      	mov	r2, r3
 800148c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148e:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8001490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b29b      	uxth	r3, r3
 8001498:	7e7a      	ldrb	r2, [r7, #25]
 800149a:	4413      	add	r3, r2
 800149c:	b29a      	uxth	r2, r3
 800149e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a0:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80014a2:	7eba      	ldrb	r2, [r7, #26]
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4a47      	ldr	r2, [pc, #284]	@ (80015c8 <recvfrom+0x274>)
 80014aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	4a45      	ldr	r2, [pc, #276]	@ (80015c8 <recvfrom+0x274>)
 80014b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	7efb      	ldrb	r3, [r7, #27]
 80014bc:	4619      	mov	r1, r3
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	440a      	add	r2, r1
 80014c2:	b291      	uxth	r1, r2
 80014c4:	4a40      	ldr	r2, [pc, #256]	@ (80015c8 <recvfrom+0x274>)
 80014c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	4a40      	ldr	r2, [pc, #256]	@ (80015d0 <recvfrom+0x27c>)
 80014ce:	2180      	movs	r1, #128	@ 0x80
 80014d0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	4a3c      	ldr	r2, [pc, #240]	@ (80015c8 <recvfrom+0x274>)
 80014d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014da:	89ba      	ldrh	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d202      	bcs.n	80014e6 <recvfrom+0x192>
 80014e0:	89bb      	ldrh	r3, [r7, #12]
 80014e2:	83fb      	strh	r3, [r7, #30]
 80014e4:	e004      	b.n	80014f0 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	4a37      	ldr	r2, [pc, #220]	@ (80015c8 <recvfrom+0x274>)
 80014ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ee:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80014f0:	8bfb      	ldrh	r3, [r7, #30]
 80014f2:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80014f4:	8bfa      	ldrh	r2, [r7, #30]
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fcf9 	bl	8000ef2 <wiz_recv_data>
			break;
 8001500:	e0d5      	b.n	80016ae <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	4a30      	ldr	r2, [pc, #192]	@ (80015c8 <recvfrom+0x274>)
 8001506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d145      	bne.n	800159a <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 800150e:	f107 0114 	add.w	r1, r7, #20
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2202      	movs	r2, #2
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fceb 	bl	8000ef2 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	3301      	adds	r3, #1
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001528:	2140      	movs	r1, #64	@ 0x40
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fbe0 	bl	8000cf0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001530:	bf00      	nop
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	3301      	adds	r3, #1
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fb80 	bl	8000c44 <WIZCHIP_READ>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f3      	bne.n	8001532 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800154a:	7d3a      	ldrb	r2, [r7, #20]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <recvfrom+0x274>)
 8001552:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <recvfrom+0x274>)
 800155a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b29b      	uxth	r3, r3
 8001562:	7d7a      	ldrb	r2, [r7, #21]
 8001564:	4413      	add	r3, r2
 8001566:	b29a      	uxth	r2, r3
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	3a02      	subs	r2, #2
 800156c:	b291      	uxth	r1, r2
 800156e:	4a16      	ldr	r2, [pc, #88]	@ (80015c8 <recvfrom+0x274>)
 8001570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <recvfrom+0x274>)
 8001578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800157c:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8001580:	4293      	cmp	r3, r2
 8001582:	d906      	bls.n	8001592 <recvfrom+0x23e>
   			{
   			   close(sn);
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe76 	bl	8001278 <close>
   			   return SOCKFATAL_PACKLEN;
 800158c:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8001590:	e0c4      	b.n	800171c <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <recvfrom+0x27c>)
 8001596:	2180      	movs	r1, #128	@ 0x80
 8001598:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <recvfrom+0x274>)
 800159e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a2:	89ba      	ldrh	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d202      	bcs.n	80015ae <recvfrom+0x25a>
 80015a8:	89bb      	ldrh	r3, [r7, #12]
 80015aa:	83fb      	strh	r3, [r7, #30]
 80015ac:	e004      	b.n	80015b8 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	4a05      	ldr	r2, [pc, #20]	@ (80015c8 <recvfrom+0x274>)
 80015b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80015b8:	8bfa      	ldrh	r2, [r7, #30]
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fc97 	bl	8000ef2 <wiz_recv_data>
		   break;
 80015c4:	e073      	b.n	80016ae <recvfrom+0x35a>
 80015c6:	bf00      	nop
 80015c8:	200009b0 	.word	0x200009b0
 80015cc:	200009ac 	.word	0x200009ac
 80015d0:	200009c0 	.word	0x200009c0
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	4a53      	ldr	r2, [pc, #332]	@ (8001724 <recvfrom+0x3d0>)
 80015d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d144      	bne.n	800166a <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 80015e0:	f107 0114 	add.w	r1, r7, #20
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2206      	movs	r2, #6
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fc82 	bl	8000ef2 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	3301      	adds	r3, #1
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80015fa:	2140      	movs	r1, #64	@ 0x40
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fb77 	bl	8000cf0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001602:	bf00      	nop
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	3301      	adds	r3, #1
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb17 	bl	8000c44 <WIZCHIP_READ>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f3      	bne.n	8001604 <recvfrom+0x2b0>
   			addr[0] = head[0];
 800161c:	7d3a      	ldrb	r2, [r7, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	7d7a      	ldrb	r2, [r7, #21]
 8001628:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3302      	adds	r3, #2
 800162e:	7dba      	ldrb	r2, [r7, #22]
 8001630:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3303      	adds	r3, #3
 8001636:	7dfa      	ldrb	r2, [r7, #23]
 8001638:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800163a:	7e3a      	ldrb	r2, [r7, #24]
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4a38      	ldr	r2, [pc, #224]	@ (8001724 <recvfrom+0x3d0>)
 8001642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	4a36      	ldr	r2, [pc, #216]	@ (8001724 <recvfrom+0x3d0>)
 800164a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b29a      	uxth	r2, r3
 8001652:	7e7b      	ldrb	r3, [r7, #25]
 8001654:	4619      	mov	r1, r3
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	440a      	add	r2, r1
 800165a:	b291      	uxth	r1, r2
 800165c:	4a31      	ldr	r2, [pc, #196]	@ (8001724 <recvfrom+0x3d0>)
 800165e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	4a30      	ldr	r2, [pc, #192]	@ (8001728 <recvfrom+0x3d4>)
 8001666:	2180      	movs	r1, #128	@ 0x80
 8001668:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	4a2d      	ldr	r2, [pc, #180]	@ (8001724 <recvfrom+0x3d0>)
 800166e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001672:	89ba      	ldrh	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d202      	bcs.n	800167e <recvfrom+0x32a>
 8001678:	89bb      	ldrh	r3, [r7, #12]
 800167a:	83fb      	strh	r3, [r7, #30]
 800167c:	e004      	b.n	8001688 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	4a28      	ldr	r2, [pc, #160]	@ (8001724 <recvfrom+0x3d0>)
 8001682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001686:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8001688:	8bfa      	ldrh	r2, [r7, #30]
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fc2f 	bl	8000ef2 <wiz_recv_data>
			break;
 8001694:	e00b      	b.n	80016ae <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8001696:	8bfa      	ldrh	r2, [r7, #30]
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fc82 	bl	8000fa6 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	491f      	ldr	r1, [pc, #124]	@ (8001724 <recvfrom+0x3d0>)
 80016a6:	8bfa      	ldrh	r2, [r7, #30]
 80016a8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80016ac:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	3301      	adds	r3, #1
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80016ba:	2140      	movs	r1, #64	@ 0x40
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fb17 	bl	8000cf0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80016c2:	bf00      	nop
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	3301      	adds	r3, #1
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fab7 	bl	8000c44 <WIZCHIP_READ>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f3      	bne.n	80016c4 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	4a11      	ldr	r2, [pc, #68]	@ (8001724 <recvfrom+0x3d0>)
 80016e0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	8bfa      	ldrh	r2, [r7, #30]
 80016e8:	1a8a      	subs	r2, r1, r2
 80016ea:	b291      	uxth	r1, r2
 80016ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <recvfrom+0x3d0>)
 80016ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <recvfrom+0x3d0>)
 80016f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <recvfrom+0x3d4>)
 8001702:	5cd2      	ldrb	r2, [r2, r3]
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	b2d1      	uxtb	r1, r2
 800170c:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <recvfrom+0x3d4>)
 800170e:	54d1      	strb	r1, [r2, r3]
 8001710:	e003      	b.n	800171a <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <recvfrom+0x3d4>)
 8001716:	2100      	movs	r1, #0
 8001718:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800171a:	8bfb      	ldrh	r3, [r7, #30]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200009b0 	.word	0x200009b0
 8001728:	200009c0 	.word	0x200009c0

0800172c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a0:	f7ff f9b2 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	@ (80017dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <LoopForever+0xe>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	@ (80017e8 <LoopForever+0x16>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f003 fb65 	bl	8004e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ce:	f7fe ff3f 	bl	8000650 <main>

080017d2 <LoopForever>:

LoopForever:
    b LoopForever
 80017d2:	e7fe      	b.n	80017d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80017e0:	08005a54 	.word	0x08005a54
  ldr r2, =_sbss
 80017e4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80017e8:	20000b18 	.word	0x20000b18

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <HAL_Init+0x3c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <HAL_Init+0x3c>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001804:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001806:	2003      	movs	r0, #3
 8001808:	f000 f944 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180c:	2000      	movs	r0, #0
 800180e:	f000 f80f 	bl	8001830 <HAL_InitTick>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	e001      	b.n	8001822 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800181e:	f7ff f869 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001822:	79fb      	ldrb	r3, [r7, #7]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40022000 	.word	0x40022000

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800183c:	4b17      	ldr	r3, [pc, #92]	@ (800189c <HAL_InitTick+0x6c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <HAL_InitTick+0x70>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_InitTick+0x6c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f941 	bl	8001ae2 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d809      	bhi.n	8001880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f919 	bl	8001aaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <HAL_InitTick+0x74>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e007      	b.n	8001890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e004      	b.n	8001890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e001      	b.n	8001890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000038 	.word	0x20000038
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000034 	.word	0x20000034

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000038 	.word	0x20000038
 80018cc:	200009c8 	.word	0x200009c8

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200009c8 	.word	0x200009c8

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000038 	.word	0x20000038

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	@ 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	@ 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff47 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff5c 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffb0 	bl	8001a50 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	e17f      	b.n	8001e0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2101      	movs	r1, #1
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8171 	beq.w	8001e06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d005      	beq.n	8001b3c <HAL_GPIO_Init+0x40>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d130      	bne.n	8001b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b72:	2201      	movs	r2, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	f003 0201 	and.w	r2, r3, #1
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d118      	bne.n	8001bdc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	f003 0201 	and.w	r2, r3, #1
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d017      	beq.n	8001c18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	6939      	ldr	r1, [r7, #16]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80ac 	beq.w	8001e06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	4b5f      	ldr	r3, [pc, #380]	@ (8001e2c <HAL_GPIO_Init+0x330>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e2c <HAL_GPIO_Init+0x330>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cba:	4b5c      	ldr	r3, [pc, #368]	@ (8001e2c <HAL_GPIO_Init+0x330>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e30 <HAL_GPIO_Init+0x334>)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cf0:	d025      	beq.n	8001d3e <HAL_GPIO_Init+0x242>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8001e34 <HAL_GPIO_Init+0x338>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01f      	beq.n	8001d3a <HAL_GPIO_Init+0x23e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4e      	ldr	r2, [pc, #312]	@ (8001e38 <HAL_GPIO_Init+0x33c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0x23a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4d      	ldr	r2, [pc, #308]	@ (8001e3c <HAL_GPIO_Init+0x340>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0x236>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e40 <HAL_GPIO_Init+0x344>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00d      	beq.n	8001d2e <HAL_GPIO_Init+0x232>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4b      	ldr	r2, [pc, #300]	@ (8001e44 <HAL_GPIO_Init+0x348>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x22e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e48 <HAL_GPIO_Init+0x34c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_GPIO_Init+0x22a>
 8001d22:	2306      	movs	r3, #6
 8001d24:	e00c      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d26:	2307      	movs	r3, #7
 8001d28:	e00a      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	e008      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d2e:	2304      	movs	r3, #4
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d32:	2303      	movs	r3, #3
 8001d34:	e004      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	f002 0203 	and.w	r2, r2, #3
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d50:	4937      	ldr	r1, [pc, #220]	@ (8001e30 <HAL_GPIO_Init+0x334>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d82:	4a32      	ldr	r2, [pc, #200]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d88:	4b30      	ldr	r3, [pc, #192]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dac:	4a27      	ldr	r2, [pc, #156]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001db2:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e00:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f47f ae78 	bne.w	8001b0c <HAL_GPIO_Init+0x10>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010000 	.word	0x40010000
 8001e34:	48000400 	.word	0x48000400
 8001e38:	48000800 	.word	0x48000800
 8001e3c:	48000c00 	.word	0x48000c00
 8001e40:	48001000 	.word	0x48001000
 8001e44:	48001400 	.word	0x48001400
 8001e48:	48001800 	.word	0x48001800
 8001e4c:	40010400 	.word	0x40010400

08001e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e60:	787b      	ldrb	r3, [r7, #1]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e84:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40007000 	.word	0x40007000

08001e9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eaa:	d130      	bne.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eb8:	d038      	beq.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2232      	movs	r2, #50	@ 0x32
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9b      	lsrs	r3, r3, #18
 8001edc:	3301      	adds	r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee0:	e002      	b.n	8001ee8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef4:	d102      	bne.n	8001efc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f2      	bne.n	8001ee2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f08:	d110      	bne.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e00f      	b.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1a:	d007      	beq.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f24:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e3ca      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5a:	4b97      	ldr	r3, [pc, #604]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f64:	4b94      	ldr	r3, [pc, #592]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80e4 	beq.w	8002144 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_RCC_OscConfig+0x4a>
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	f040 808b 	bne.w	80020a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 8087 	bne.w	80020a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f92:	4b89      	ldr	r3, [pc, #548]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x62>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e3a2      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1a      	ldr	r2, [r3, #32]
 8001fae:	4b82      	ldr	r3, [pc, #520]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x7c>
 8001fba:	4b7f      	ldr	r3, [pc, #508]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCC_OscConfig+0x88>
 8001fc4:	4b7c      	ldr	r3, [pc, #496]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d223      	bcs.n	800201c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fd55 	bl	8002a88 <RCC_SetFlashLatencyFromMSIRange>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e383      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe8:	4b73      	ldr	r3, [pc, #460]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a72      	ldr	r2, [pc, #456]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	f043 0308 	orr.w	r3, r3, #8
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b70      	ldr	r3, [pc, #448]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	496d      	ldr	r1, [pc, #436]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002006:	4b6c      	ldr	r3, [pc, #432]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	4968      	ldr	r1, [pc, #416]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
 800201a:	e025      	b.n	8002068 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201c:	4b66      	ldr	r3, [pc, #408]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a65      	ldr	r2, [pc, #404]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002022:	f043 0308 	orr.w	r3, r3, #8
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b63      	ldr	r3, [pc, #396]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4960      	ldr	r1, [pc, #384]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800203a:	4b5f      	ldr	r3, [pc, #380]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	495b      	ldr	r1, [pc, #364]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fd15 	bl	8002a88 <RCC_SetFlashLatencyFromMSIRange>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e343      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002068:	f000 fc4a 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b52      	ldr	r3, [pc, #328]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	4950      	ldr	r1, [pc, #320]	@ (80021bc <HAL_RCC_OscConfig+0x274>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	4a4e      	ldr	r2, [pc, #312]	@ (80021c0 <HAL_RCC_OscConfig+0x278>)
 8002086:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002088:	4b4e      	ldr	r3, [pc, #312]	@ (80021c4 <HAL_RCC_OscConfig+0x27c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fbcf 	bl	8001830 <HAL_InitTick>
 8002092:	4603      	mov	r3, r0
 8002094:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d052      	beq.n	8002142 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	e327      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d032      	beq.n	800210e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020a8:	4b43      	ldr	r3, [pc, #268]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a42      	ldr	r2, [pc, #264]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b4:	f7ff fc0c 	bl	80018d0 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020bc:	f7ff fc08 	bl	80018d0 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e310      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ce:	4b3a      	ldr	r3, [pc, #232]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020da:	4b37      	ldr	r3, [pc, #220]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a36      	ldr	r2, [pc, #216]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b34      	ldr	r3, [pc, #208]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4931      	ldr	r1, [pc, #196]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f8:	4b2f      	ldr	r3, [pc, #188]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	492c      	ldr	r1, [pc, #176]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
 800210c:	e01a      	b.n	8002144 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800210e:	4b2a      	ldr	r3, [pc, #168]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a29      	ldr	r2, [pc, #164]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800211a:	f7ff fbd9 	bl	80018d0 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002122:	f7ff fbd5 	bl	80018d0 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e2dd      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002134:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x1da>
 8002140:	e000      	b.n	8002144 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002142:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d074      	beq.n	800223a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b08      	cmp	r3, #8
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x21a>
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d10e      	bne.n	800217a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d10b      	bne.n	800217a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d064      	beq.n	8002238 <HAL_RCC_OscConfig+0x2f0>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d160      	bne.n	8002238 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e2ba      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x24a>
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0b      	ldr	r2, [pc, #44]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e026      	b.n	80021e0 <HAL_RCC_OscConfig+0x298>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800219a:	d115      	bne.n	80021c8 <HAL_RCC_OscConfig+0x280>
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80021a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a02      	ldr	r2, [pc, #8]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80021ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	e014      	b.n	80021e0 <HAL_RCC_OscConfig+0x298>
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	080059c8 	.word	0x080059c8
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000034 	.word	0x20000034
 80021c8:	4ba0      	ldr	r3, [pc, #640]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a9f      	ldr	r2, [pc, #636]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80021ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	4b9d      	ldr	r3, [pc, #628]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a9c      	ldr	r2, [pc, #624]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80021da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7ff fb72 	bl	80018d0 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fb6e 	bl	80018d0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	@ 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e276      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002202:	4b92      	ldr	r3, [pc, #584]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2a8>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff fb5e 	bl	80018d0 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff fb5a 	bl	80018d0 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	@ 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e262      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800222a:	4b88      	ldr	r3, [pc, #544]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x2d0>
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d060      	beq.n	8002308 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d005      	beq.n	8002258 <HAL_RCC_OscConfig+0x310>
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d119      	bne.n	8002286 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d116      	bne.n	8002286 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002258:	4b7c      	ldr	r3, [pc, #496]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_OscConfig+0x328>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e23f      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b76      	ldr	r3, [pc, #472]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	061b      	lsls	r3, r3, #24
 800227e:	4973      	ldr	r1, [pc, #460]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002284:	e040      	b.n	8002308 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d023      	beq.n	80022d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228e:	4b6f      	ldr	r3, [pc, #444]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6e      	ldr	r2, [pc, #440]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7ff fb19 	bl	80018d0 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7ff fb15 	bl	80018d0 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e21d      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b4:	4b65      	ldr	r3, [pc, #404]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	4b62      	ldr	r3, [pc, #392]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	495f      	ldr	r1, [pc, #380]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
 80022d4:	e018      	b.n	8002308 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d6:	4b5d      	ldr	r3, [pc, #372]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a5c      	ldr	r2, [pc, #368]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80022dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7ff faf5 	bl	80018d0 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ea:	f7ff faf1 	bl	80018d0 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1f9      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022fc:	4b53      	ldr	r3, [pc, #332]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f0      	bne.n	80022ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d03c      	beq.n	800238e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01c      	beq.n	8002356 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231c:	4b4b      	ldr	r3, [pc, #300]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 800231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002322:	4a4a      	ldr	r2, [pc, #296]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7ff fad0 	bl	80018d0 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002334:	f7ff facc 	bl	80018d0 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1d4      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002346:	4b41      	ldr	r3, [pc, #260]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0ef      	beq.n	8002334 <HAL_RCC_OscConfig+0x3ec>
 8002354:	e01b      	b.n	800238e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002356:	4b3d      	ldr	r3, [pc, #244]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800235c:	4a3b      	ldr	r2, [pc, #236]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7ff fab3 	bl	80018d0 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236e:	f7ff faaf 	bl	80018d0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1b7      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002380:	4b32      	ldr	r3, [pc, #200]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ef      	bne.n	800236e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80a6 	beq.w	80024e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023a0:	4b2a      	ldr	r3, [pc, #168]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10d      	bne.n	80023c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ac:	4b27      	ldr	r3, [pc, #156]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	4a26      	ldr	r2, [pc, #152]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80023b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023b8:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c8:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <HAL_RCC_OscConfig+0x508>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d118      	bne.n	8002406 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <HAL_RCC_OscConfig+0x508>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <HAL_RCC_OscConfig+0x508>)
 80023da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e0:	f7ff fa76 	bl	80018d0 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e8:	f7ff fa72 	bl	80018d0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e17a      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_RCC_OscConfig+0x508>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d108      	bne.n	8002420 <HAL_RCC_OscConfig+0x4d8>
 800240e:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002414:	4a0d      	ldr	r2, [pc, #52]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800241e:	e029      	b.n	8002474 <HAL_RCC_OscConfig+0x52c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d115      	bne.n	8002454 <HAL_RCC_OscConfig+0x50c>
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242e:	4a07      	ldr	r2, [pc, #28]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002438:	4b04      	ldr	r3, [pc, #16]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243e:	4a03      	ldr	r2, [pc, #12]	@ (800244c <HAL_RCC_OscConfig+0x504>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x52c>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	40007000 	.word	0x40007000
 8002454:	4b9c      	ldr	r3, [pc, #624]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245a:	4a9b      	ldr	r2, [pc, #620]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002464:	4b98      	ldr	r3, [pc, #608]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246a:	4a97      	ldr	r2, [pc, #604]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d016      	beq.n	80024aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7ff fa28 	bl	80018d0 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7ff fa24 	bl	80018d0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e12a      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249a:	4b8b      	ldr	r3, [pc, #556]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ed      	beq.n	8002484 <HAL_RCC_OscConfig+0x53c>
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024aa:	f7ff fa11 	bl	80018d0 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7ff fa0d 	bl	80018d0 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e113      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024c8:	4b7f      	ldr	r3, [pc, #508]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ed      	bne.n	80024b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d6:	7ffb      	ldrb	r3, [r7, #31]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b7a      	ldr	r3, [pc, #488]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e0:	4a79      	ldr	r2, [pc, #484]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80fe 	beq.w	80026ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	f040 80d0 	bne.w	800269c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024fc:	4b72      	ldr	r3, [pc, #456]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250c:	429a      	cmp	r2, r3
 800250e:	d130      	bne.n	8002572 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	3b01      	subs	r3, #1
 800251c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d127      	bne.n	8002572 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d11f      	bne.n	8002572 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800253c:	2a07      	cmp	r2, #7
 800253e:	bf14      	ite	ne
 8002540:	2201      	movne	r2, #1
 8002542:	2200      	moveq	r2, #0
 8002544:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002546:	4293      	cmp	r3, r2
 8002548:	d113      	bne.n	8002572 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	3b01      	subs	r3, #1
 8002558:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d109      	bne.n	8002572 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	3b01      	subs	r3, #1
 800256c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d06e      	beq.n	8002650 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b0c      	cmp	r3, #12
 8002576:	d069      	beq.n	800264c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002578:	4b53      	ldr	r3, [pc, #332]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002584:	4b50      	ldr	r3, [pc, #320]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0ad      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002594:	4b4c      	ldr	r3, [pc, #304]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a4b      	ldr	r2, [pc, #300]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800259a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800259e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a0:	f7ff f996 	bl	80018d0 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7ff f992 	bl	80018d0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e09a      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ba:	4b43      	ldr	r3, [pc, #268]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c6:	4b40      	ldr	r3, [pc, #256]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	4b40      	ldr	r3, [pc, #256]	@ (80026cc <HAL_RCC_OscConfig+0x784>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025d6:	3a01      	subs	r2, #1
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	4311      	orrs	r1, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025e0:	0212      	lsls	r2, r2, #8
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025e8:	0852      	lsrs	r2, r2, #1
 80025ea:	3a01      	subs	r2, #1
 80025ec:	0552      	lsls	r2, r2, #21
 80025ee:	4311      	orrs	r1, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025f4:	0852      	lsrs	r2, r2, #1
 80025f6:	3a01      	subs	r2, #1
 80025f8:	0652      	lsls	r2, r2, #25
 80025fa:	4311      	orrs	r1, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002600:	0912      	lsrs	r2, r2, #4
 8002602:	0452      	lsls	r2, r2, #17
 8002604:	430a      	orrs	r2, r1
 8002606:	4930      	ldr	r1, [pc, #192]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 8002608:	4313      	orrs	r3, r2
 800260a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800260c:	4b2e      	ldr	r3, [pc, #184]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2d      	ldr	r2, [pc, #180]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002618:	4b2b      	ldr	r3, [pc, #172]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a2a      	ldr	r2, [pc, #168]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002622:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002624:	f7ff f954 	bl	80018d0 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7ff f950 	bl	80018d0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e058      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	4b22      	ldr	r3, [pc, #136]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800264a:	e050      	b.n	80026ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e04f      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002650:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d148      	bne.n	80026ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800265c:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 8002662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002666:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002668:	4b17      	ldr	r3, [pc, #92]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a16      	ldr	r2, [pc, #88]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 800266e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002672:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002674:	f7ff f92c 	bl	80018d0 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7ff f928 	bl	80018d0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e030      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268e:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x734>
 800269a:	e028      	b.n	80026ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d023      	beq.n	80026ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a08      	ldr	r2, [pc, #32]	@ (80026c8 <HAL_RCC_OscConfig+0x780>)
 80026a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7ff f90f 	bl	80018d0 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b4:	e00c      	b.n	80026d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7ff f90b 	bl	80018d0 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d905      	bls.n	80026d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e013      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <HAL_RCC_OscConfig+0x7b0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ec      	bne.n	80026b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_RCC_OscConfig+0x7b0>)
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	4905      	ldr	r1, [pc, #20]	@ (80026f8 <HAL_RCC_OscConfig+0x7b0>)
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_RCC_OscConfig+0x7b4>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	60cb      	str	r3, [r1, #12]
 80026e8:	e001      	b.n	80026ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3720      	adds	r7, #32
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	feeefffc 	.word	0xfeeefffc

08002700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0e7      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b75      	ldr	r3, [pc, #468]	@ (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b72      	ldr	r3, [pc, #456]	@ (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4970      	ldr	r1, [pc, #448]	@ (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b6e      	ldr	r3, [pc, #440]	@ (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0cf      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	4b66      	ldr	r3, [pc, #408]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800275c:	429a      	cmp	r2, r3
 800275e:	d908      	bls.n	8002772 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b63      	ldr	r3, [pc, #396]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4960      	ldr	r1, [pc, #384]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d04c      	beq.n	8002818 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	4b5a      	ldr	r3, [pc, #360]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d121      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0a6      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279e:	4b54      	ldr	r3, [pc, #336]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d115      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e09a      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b6:	4b4e      	ldr	r3, [pc, #312]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e08e      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c6:	4b4a      	ldr	r3, [pc, #296]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e086      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b46      	ldr	r3, [pc, #280]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4943      	ldr	r1, [pc, #268]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7ff f872 	bl	80018d0 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7ff f86e 	bl	80018d0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e06e      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b3a      	ldr	r3, [pc, #232]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	4b31      	ldr	r3, [pc, #196]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002830:	429a      	cmp	r2, r3
 8002832:	d208      	bcs.n	8002846 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b2e      	ldr	r3, [pc, #184]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	492b      	ldr	r1, [pc, #172]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002846:	4b29      	ldr	r3, [pc, #164]	@ (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d210      	bcs.n	8002876 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002854:	4b25      	ldr	r3, [pc, #148]	@ (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 0207 	bic.w	r2, r3, #7
 800285c:	4923      	ldr	r1, [pc, #140]	@ (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002864:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e036      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002882:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	4918      	ldr	r1, [pc, #96]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a0:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4910      	ldr	r1, [pc, #64]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028b4:	f000 f824 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b0d      	ldr	r3, [pc, #52]	@ (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	490b      	ldr	r1, [pc, #44]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f4>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
 80028d0:	4a09      	ldr	r2, [pc, #36]	@ (80028f8 <HAL_RCC_ClockConfig+0x1f8>)
 80028d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <HAL_RCC_ClockConfig+0x1fc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe ffa9 	bl	8001830 <HAL_InitTick>
 80028de:	4603      	mov	r3, r0
 80028e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80028e2:	7afb      	ldrb	r3, [r7, #11]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40021000 	.word	0x40021000
 80028f4:	080059c8 	.word	0x080059c8
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000034 	.word	0x20000034

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	@ 0x24
 8002904:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002918:	4b3b      	ldr	r3, [pc, #236]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x34>
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d121      	bne.n	8002972 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d11e      	bne.n	8002972 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002934:	4b34      	ldr	r3, [pc, #208]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002940:	4b31      	ldr	r3, [pc, #196]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e005      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002950:	4b2d      	ldr	r3, [pc, #180]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800295c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x10c>)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10d      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b04      	cmp	r3, #4
 8002976:	d102      	bne.n	800297e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x110>)
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	e004      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d101      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002984:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002986:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d134      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800298e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d003      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0xac>
 80029a4:	e005      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x110>)
 80029a8:	617b      	str	r3, [r7, #20]
      break;
 80029aa:	e005      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029ac:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ae:	617b      	str	r3, [r7, #20]
      break;
 80029b0:	e002      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	617b      	str	r3, [r7, #20]
      break;
 80029b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029b8:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	3301      	adds	r3, #1
 80029c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029c6:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	fb03 f202 	mul.w	r2, r3, r2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029de:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	0e5b      	lsrs	r3, r3, #25
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	3301      	adds	r3, #1
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029f8:	69bb      	ldr	r3, [r7, #24]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	@ 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	080059e0 	.word	0x080059e0
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	007a1200 	.word	0x007a1200

08002a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000

08002a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a34:	f7ff fff0 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4904      	ldr	r1, [pc, #16]	@ (8002a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	080059d8 	.word	0x080059d8

08002a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a60:	f7ff ffda 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	0adb      	lsrs	r3, r3, #11
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	4904      	ldr	r1, [pc, #16]	@ (8002a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	080059d8 	.word	0x080059d8

08002a88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a94:	4b2a      	ldr	r3, [pc, #168]	@ (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aa0:	f7ff f9ee 	bl	8001e80 <HAL_PWREx_GetVoltageRange>
 8002aa4:	6178      	str	r0, [r7, #20]
 8002aa6:	e014      	b.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aac:	4a24      	ldr	r2, [pc, #144]	@ (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab4:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ac0:	f7ff f9de 	bl	8001e80 <HAL_PWREx_GetVoltageRange>
 8002ac4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aca:	4a1d      	ldr	r2, [pc, #116]	@ (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ad8:	d10b      	bne.n	8002af2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b80      	cmp	r3, #128	@ 0x80
 8002ade:	d919      	bls.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ae4:	d902      	bls.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	e013      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aec:	2301      	movs	r3, #1
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	e010      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b80      	cmp	r3, #128	@ 0x80
 8002af6:	d902      	bls.n	8002afe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002af8:	2303      	movs	r3, #3
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	e00a      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b80      	cmp	r3, #128	@ 0x80
 8002b02:	d102      	bne.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b04:	2302      	movs	r3, #2
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e004      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b70      	cmp	r3, #112	@ 0x70
 8002b0e:	d101      	bne.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b10:	2301      	movs	r3, #1
 8002b12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 0207 	bic.w	r2, r3, #7
 8002b1c:	4909      	ldr	r1, [pc, #36]	@ (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b24:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d001      	beq.n	8002b36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40022000 	.word	0x40022000

08002b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b50:	2300      	movs	r3, #0
 8002b52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b54:	2300      	movs	r3, #0
 8002b56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d041      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b6c:	d02a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b72:	d824      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b78:	d008      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b7e:	d81e      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b88:	d010      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b8a:	e018      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b8c:	4b86      	ldr	r3, [pc, #536]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a85      	ldr	r2, [pc, #532]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b98:	e015      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fabb 	bl	800311c <RCCEx_PLLSAI1_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002baa:	e00c      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3320      	adds	r3, #32
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fba6 	bl	8003304 <RCCEx_PLLSAI2_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bbc:	e003      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	74fb      	strb	r3, [r7, #19]
      break;
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc6:	7cfb      	ldrb	r3, [r7, #19]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bcc:	4b76      	ldr	r3, [pc, #472]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bda:	4973      	ldr	r1, [pc, #460]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002be2:	e001      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d041      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bfc:	d02a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bfe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c02:	d824      	bhi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c08:	d008      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c0e:	d81e      	bhi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c18:	d010      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c1a:	e018      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c1c:	4b62      	ldr	r3, [pc, #392]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a61      	ldr	r2, [pc, #388]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c28:	e015      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fa73 	bl	800311c <RCCEx_PLLSAI1_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c3a:	e00c      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3320      	adds	r3, #32
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fb5e 	bl	8003304 <RCCEx_PLLSAI2_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c4c:	e003      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	74fb      	strb	r3, [r7, #19]
      break;
 8002c52:	e000      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c5c:	4b52      	ldr	r3, [pc, #328]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c6a:	494f      	ldr	r1, [pc, #316]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c72:	e001      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a0 	beq.w	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00d      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b41      	ldr	r3, [pc, #260]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca4:	4a40      	ldr	r2, [pc, #256]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cac:	4b3e      	ldr	r3, [pc, #248]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cc8:	f7fe fe02 	bl	80018d0 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cce:	e009      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd0:	f7fe fdfe 	bl	80018d0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d902      	bls.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ce2:	e005      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ce4:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ef      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d15c      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01f      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d019      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d14:	4b24      	ldr	r3, [pc, #144]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d20:	4b21      	ldr	r3, [pc, #132]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d26:	4a20      	ldr	r2, [pc, #128]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d30:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d36:	4a1c      	ldr	r2, [pc, #112]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d40:	4a19      	ldr	r2, [pc, #100]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe fdbd 	bl	80018d0 <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d58:	e00b      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fe fdb9 	bl	80018d0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d902      	bls.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d70:	e006      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d72:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ec      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d86:	4b08      	ldr	r3, [pc, #32]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d96:	4904      	ldr	r1, [pc, #16]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d9e:	e009      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002da0:	7cfb      	ldrb	r3, [r7, #19]
 8002da2:	74bb      	strb	r3, [r7, #18]
 8002da4:	e006      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db4:	7c7b      	ldrb	r3, [r7, #17]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4b9e      	ldr	r3, [pc, #632]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	4a9d      	ldr	r2, [pc, #628]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd2:	4b98      	ldr	r3, [pc, #608]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd8:	f023 0203 	bic.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	4994      	ldr	r1, [pc, #592]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df4:	4b8f      	ldr	r3, [pc, #572]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f023 020c 	bic.w	r2, r3, #12
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e02:	498c      	ldr	r1, [pc, #560]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e16:	4b87      	ldr	r3, [pc, #540]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	4983      	ldr	r1, [pc, #524]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e38:	4b7e      	ldr	r3, [pc, #504]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	497b      	ldr	r1, [pc, #492]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e5a:	4b76      	ldr	r3, [pc, #472]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e68:	4972      	ldr	r1, [pc, #456]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8a:	496a      	ldr	r1, [pc, #424]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9e:	4b65      	ldr	r3, [pc, #404]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	4961      	ldr	r1, [pc, #388]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ec0:	4b5c      	ldr	r3, [pc, #368]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ece:	4959      	ldr	r1, [pc, #356]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee2:	4b54      	ldr	r3, [pc, #336]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef0:	4950      	ldr	r1, [pc, #320]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f04:	4b4b      	ldr	r3, [pc, #300]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f12:	4948      	ldr	r1, [pc, #288]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f26:	4b43      	ldr	r3, [pc, #268]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	493f      	ldr	r1, [pc, #252]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d028      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f48:	4b3a      	ldr	r3, [pc, #232]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f56:	4937      	ldr	r1, [pc, #220]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f66:	d106      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f68:	4b32      	ldr	r3, [pc, #200]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a31      	ldr	r2, [pc, #196]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f72:	60d3      	str	r3, [r2, #12]
 8002f74:	e011      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f7e:	d10c      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	2101      	movs	r1, #1
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f8c8 	bl	800311c <RCCEx_PLLSAI1_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
 8002f98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d028      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fa6:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	491f      	ldr	r1, [pc, #124]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4a1a      	ldr	r2, [pc, #104]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd0:	60d3      	str	r3, [r2, #12]
 8002fd2:	e011      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f899 	bl	800311c <RCCEx_PLLSAI1_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fee:	7cfb      	ldrb	r3, [r7, #19]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02b      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003004:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003012:	4908      	ldr	r1, [pc, #32]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800301e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003022:	d109      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003024:	4b03      	ldr	r3, [pc, #12]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a02      	ldr	r2, [pc, #8]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800302e:	60d3      	str	r3, [r2, #12]
 8003030:	e014      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003040:	d10c      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3304      	adds	r3, #4
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f867 	bl	800311c <RCCEx_PLLSAI1_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02f      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003068:	4b2b      	ldr	r3, [pc, #172]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003076:	4928      	ldr	r1, [pc, #160]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003086:	d10d      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	2102      	movs	r1, #2
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f844 	bl	800311c <RCCEx_PLLSAI1_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d014      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	74bb      	strb	r3, [r7, #18]
 80030a2:	e011      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3320      	adds	r3, #32
 80030b2:	2102      	movs	r1, #2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f925 	bl	8003304 <RCCEx_PLLSAI2_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030be:	7cfb      	ldrb	r3, [r7, #19]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030d4:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030e2:	490d      	ldr	r1, [pc, #52]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003106:	4904      	ldr	r1, [pc, #16]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800310e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000

0800311c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800312a:	4b75      	ldr	r3, [pc, #468]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d018      	beq.n	8003168 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003136:	4b72      	ldr	r3, [pc, #456]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0203 	and.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d10d      	bne.n	8003162 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
       ||
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800314e:	4b6c      	ldr	r3, [pc, #432]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
       ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d047      	beq.n	80031f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	e044      	b.n	80031f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d018      	beq.n	80031a2 <RCCEx_PLLSAI1_Config+0x86>
 8003170:	2b03      	cmp	r3, #3
 8003172:	d825      	bhi.n	80031c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003174:	2b01      	cmp	r3, #1
 8003176:	d002      	beq.n	800317e <RCCEx_PLLSAI1_Config+0x62>
 8003178:	2b02      	cmp	r3, #2
 800317a:	d009      	beq.n	8003190 <RCCEx_PLLSAI1_Config+0x74>
 800317c:	e020      	b.n	80031c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800317e:	4b60      	ldr	r3, [pc, #384]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11d      	bne.n	80031c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318e:	e01a      	b.n	80031c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003190:	4b5b      	ldr	r3, [pc, #364]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a0:	e013      	b.n	80031ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031a2:	4b57      	ldr	r3, [pc, #348]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ae:	4b54      	ldr	r3, [pc, #336]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031be:	e006      	b.n	80031ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      break;
 80031c4:	e004      	b.n	80031d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031c6:	bf00      	nop
 80031c8:	e002      	b.n	80031d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10d      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	430b      	orrs	r3, r1
 80031ec:	4944      	ldr	r1, [pc, #272]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d17d      	bne.n	80032f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031f8:	4b41      	ldr	r3, [pc, #260]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a40      	ldr	r2, [pc, #256]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003204:	f7fe fb64 	bl	80018d0 <HAL_GetTick>
 8003208:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800320a:	e009      	b.n	8003220 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800320c:	f7fe fb60 	bl	80018d0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d902      	bls.n	8003220 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	73fb      	strb	r3, [r7, #15]
        break;
 800321e:	e005      	b.n	800322c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003220:	4b37      	ldr	r3, [pc, #220]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ef      	bne.n	800320c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d160      	bne.n	80032f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d111      	bne.n	800325c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003238:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6892      	ldr	r2, [r2, #8]
 8003248:	0211      	lsls	r1, r2, #8
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68d2      	ldr	r2, [r2, #12]
 800324e:	0912      	lsrs	r2, r2, #4
 8003250:	0452      	lsls	r2, r2, #17
 8003252:	430a      	orrs	r2, r1
 8003254:	492a      	ldr	r1, [pc, #168]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	610b      	str	r3, [r1, #16]
 800325a:	e027      	b.n	80032ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d112      	bne.n	8003288 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003262:	4b27      	ldr	r3, [pc, #156]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800326a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	0211      	lsls	r1, r2, #8
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6912      	ldr	r2, [r2, #16]
 8003278:	0852      	lsrs	r2, r2, #1
 800327a:	3a01      	subs	r2, #1
 800327c:	0552      	lsls	r2, r2, #21
 800327e:	430a      	orrs	r2, r1
 8003280:	491f      	ldr	r1, [pc, #124]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	610b      	str	r3, [r1, #16]
 8003286:	e011      	b.n	80032ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003290:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6892      	ldr	r2, [r2, #8]
 8003298:	0211      	lsls	r1, r2, #8
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6952      	ldr	r2, [r2, #20]
 800329e:	0852      	lsrs	r2, r2, #1
 80032a0:	3a01      	subs	r2, #1
 80032a2:	0652      	lsls	r2, r2, #25
 80032a4:	430a      	orrs	r2, r1
 80032a6:	4916      	ldr	r1, [pc, #88]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032ac:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a13      	ldr	r2, [pc, #76]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fe fb0a 	bl	80018d0 <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032be:	e009      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c0:	f7fe fb06 	bl	80018d0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d902      	bls.n	80032d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	73fb      	strb	r3, [r7, #15]
          break;
 80032d2:	e005      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ef      	beq.n	80032c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	4904      	ldr	r1, [pc, #16]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000

08003304 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003312:	4b6a      	ldr	r3, [pc, #424]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d018      	beq.n	8003350 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800331e:	4b67      	ldr	r3, [pc, #412]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0203 	and.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d10d      	bne.n	800334a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
       ||
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003336:	4b61      	ldr	r3, [pc, #388]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
       ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d047      	beq.n	80033da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	e044      	b.n	80033da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d018      	beq.n	800338a <RCCEx_PLLSAI2_Config+0x86>
 8003358:	2b03      	cmp	r3, #3
 800335a:	d825      	bhi.n	80033a8 <RCCEx_PLLSAI2_Config+0xa4>
 800335c:	2b01      	cmp	r3, #1
 800335e:	d002      	beq.n	8003366 <RCCEx_PLLSAI2_Config+0x62>
 8003360:	2b02      	cmp	r3, #2
 8003362:	d009      	beq.n	8003378 <RCCEx_PLLSAI2_Config+0x74>
 8003364:	e020      	b.n	80033a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003366:	4b55      	ldr	r3, [pc, #340]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11d      	bne.n	80033ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003376:	e01a      	b.n	80033ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003378:	4b50      	ldr	r3, [pc, #320]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d116      	bne.n	80033b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003388:	e013      	b.n	80033b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800338a:	4b4c      	ldr	r3, [pc, #304]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003396:	4b49      	ldr	r3, [pc, #292]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033a6:	e006      	b.n	80033b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e004      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033ae:	bf00      	nop
 80033b0:	e002      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033b2:	bf00      	nop
 80033b4:	e000      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10d      	bne.n	80033da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033be:	4b3f      	ldr	r3, [pc, #252]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	430b      	orrs	r3, r1
 80033d4:	4939      	ldr	r1, [pc, #228]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d167      	bne.n	80034b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033e0:	4b36      	ldr	r3, [pc, #216]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a35      	ldr	r2, [pc, #212]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ec:	f7fe fa70 	bl	80018d0 <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033f2:	e009      	b.n	8003408 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033f4:	f7fe fa6c 	bl	80018d0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d902      	bls.n	8003408 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	73fb      	strb	r3, [r7, #15]
        break;
 8003406:	e005      	b.n	8003414 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003408:	4b2c      	ldr	r3, [pc, #176]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ef      	bne.n	80033f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d14a      	bne.n	80034b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d111      	bne.n	8003444 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003420:	4b26      	ldr	r3, [pc, #152]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6892      	ldr	r2, [r2, #8]
 8003430:	0211      	lsls	r1, r2, #8
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68d2      	ldr	r2, [r2, #12]
 8003436:	0912      	lsrs	r2, r2, #4
 8003438:	0452      	lsls	r2, r2, #17
 800343a:	430a      	orrs	r2, r1
 800343c:	491f      	ldr	r1, [pc, #124]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800343e:	4313      	orrs	r3, r2
 8003440:	614b      	str	r3, [r1, #20]
 8003442:	e011      	b.n	8003468 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003444:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800344c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6892      	ldr	r2, [r2, #8]
 8003454:	0211      	lsls	r1, r2, #8
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6912      	ldr	r2, [r2, #16]
 800345a:	0852      	lsrs	r2, r2, #1
 800345c:	3a01      	subs	r2, #1
 800345e:	0652      	lsls	r2, r2, #25
 8003460:	430a      	orrs	r2, r1
 8003462:	4916      	ldr	r1, [pc, #88]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003464:	4313      	orrs	r3, r2
 8003466:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003468:	4b14      	ldr	r3, [pc, #80]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a13      	ldr	r2, [pc, #76]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003472:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fe fa2c 	bl	80018d0 <HAL_GetTick>
 8003478:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800347a:	e009      	b.n	8003490 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800347c:	f7fe fa28 	bl	80018d0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d902      	bls.n	8003490 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	73fb      	strb	r3, [r7, #15]
          break;
 800348e:	e005      	b.n	800349c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003490:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ef      	beq.n	800347c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034a2:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	4904      	ldr	r1, [pc, #16]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000

080034c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e095      	b.n	80035fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d108      	bne.n	80034ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034e2:	d009      	beq.n	80034f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
 80034ea:	e005      	b.n	80034f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd f9ac 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800352e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003538:	d902      	bls.n	8003540 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e002      	b.n	8003546 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003544:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800354e:	d007      	beq.n	8003560 <HAL_SPI_Init+0xa0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003558:	d002      	beq.n	8003560 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	ea42 0103 	orr.w	r1, r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	f003 0204 	and.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035dc:	ea42 0103 	orr.w	r1, r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b08a      	sub	sp, #40	@ 0x28
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003614:	2301      	movs	r3, #1
 8003616:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003618:	f7fe f95a 	bl	80018d0 <HAL_GetTick>
 800361c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003624:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003634:	7ffb      	ldrb	r3, [r7, #31]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d00c      	beq.n	8003654 <HAL_SPI_TransmitReceive+0x4e>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003640:	d106      	bne.n	8003650 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <HAL_SPI_TransmitReceive+0x4a>
 800364a:	7ffb      	ldrb	r3, [r7, #31]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d001      	beq.n	8003654 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
 8003652:	e1f3      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_SPI_TransmitReceive+0x60>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_SPI_TransmitReceive+0x60>
 8003660:	887b      	ldrh	r3, [r7, #2]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e1e8      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_SPI_TransmitReceive+0x72>
 8003674:	2302      	movs	r3, #2
 8003676:	e1e1      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x436>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b04      	cmp	r3, #4
 800368a:	d003      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2205      	movs	r2, #5
 8003690:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	887a      	ldrh	r2, [r7, #2]
 80036ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036d6:	d802      	bhi.n	80036de <HAL_SPI_TransmitReceive+0xd8>
 80036d8:	8abb      	ldrh	r3, [r7, #20]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d908      	bls.n	80036f0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	e007      	b.n	8003700 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370a:	2b40      	cmp	r3, #64	@ 0x40
 800370c:	d007      	beq.n	800371e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800371c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003726:	f240 8083 	bls.w	8003830 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_SPI_TransmitReceive+0x132>
 8003732:	8afb      	ldrh	r3, [r7, #22]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d16f      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	881a      	ldrh	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	1c9a      	adds	r2, r3, #2
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800375c:	e05c      	b.n	8003818 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b02      	cmp	r3, #2
 800376a:	d11b      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x19e>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x19e>
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	2b01      	cmp	r3, #1
 800377a:	d113      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003780:	881a      	ldrh	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	1c9a      	adds	r2, r3, #2
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d11c      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x1e6>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d016      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	b292      	uxth	r2, r2
 80037ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037e8:	2301      	movs	r3, #1
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037ec:	f7fe f870 	bl	80018d0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d80d      	bhi.n	8003818 <HAL_SPI_TransmitReceive+0x212>
 80037fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d009      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e111      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d19d      	bne.n	800375e <HAL_SPI_TransmitReceive+0x158>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d197      	bne.n	800375e <HAL_SPI_TransmitReceive+0x158>
 800382e:	e0e5      	b.n	80039fc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x23a>
 8003838:	8afb      	ldrh	r3, [r7, #22]
 800383a:	2b01      	cmp	r3, #1
 800383c:	f040 80d1 	bne.w	80039e2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d912      	bls.n	8003870 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385a:	1c9a      	adds	r2, r3, #2
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b02      	subs	r3, #2
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800386e:	e0b8      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	7812      	ldrb	r2, [r2, #0]
 800387c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003896:	e0a4      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d134      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x30a>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d02f      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x30a>
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d12c      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d912      	bls.n	80038e6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b02      	subs	r3, #2
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038e4:	e012      	b.n	800390c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b01      	cmp	r3, #1
 800391c:	d148      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x3aa>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d042      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d923      	bls.n	800397e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	b292      	uxth	r2, r2
 8003942:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	1c9a      	adds	r2, r3, #2
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b02      	subs	r3, #2
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d81f      	bhi.n	80039ac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	e016      	b.n	80039ac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f103 020c 	add.w	r2, r3, #12
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	7812      	ldrb	r2, [r2, #0]
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ac:	2301      	movs	r3, #1
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039b0:	f7fd ff8e 	bl	80018d0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039bc:	429a      	cmp	r2, r3
 80039be:	d803      	bhi.n	80039c8 <HAL_SPI_TransmitReceive+0x3c2>
 80039c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c6:	d102      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x3c8>
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e02c      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f af55 	bne.w	8003898 <HAL_SPI_TransmitReceive+0x292>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f47f af4e 	bne.w	8003898 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f93d 	bl	8003c80 <SPI_EndRxTxTransaction>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e00e      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	@ 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a54:	f7fd ff3c 	bl	80018d0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	4413      	add	r3, r2
 8003a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a64:	f7fd ff34 	bl	80018d0 <HAL_GetTick>
 8003a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a6a:	4b39      	ldr	r3, [pc, #228]	@ (8003b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	015b      	lsls	r3, r3, #5
 8003a70:	0d1b      	lsrs	r3, r3, #20
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	fb02 f303 	mul.w	r3, r2, r3
 8003a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a7a:	e054      	b.n	8003b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d050      	beq.n	8003b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a84:	f7fd ff24 	bl	80018d0 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d902      	bls.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d13d      	bne.n	8003b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ab2:	d111      	bne.n	8003ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003abc:	d004      	beq.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac6:	d107      	bne.n	8003ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae0:	d10f      	bne.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e017      	b.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d19b      	bne.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000000 	.word	0x20000000

08003b54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	@ 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b66:	f7fd feb3 	bl	80018d0 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003b76:	f7fd feab 	bl	80018d0 <HAL_GetTick>
 8003b7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b84:	4b3d      	ldr	r3, [pc, #244]	@ (8003c7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00da      	lsls	r2, r3, #3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	0d1b      	lsrs	r3, r3, #20
 8003b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b9c:	e060      	b.n	8003c60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ba4:	d107      	bne.n	8003bb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d104      	bne.n	8003bb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d050      	beq.n	8003c60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bbe:	f7fd fe87 	bl	80018d0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d902      	bls.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d13d      	bne.n	8003c50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003be2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bec:	d111      	bne.n	8003c12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bf6:	d004      	beq.n	8003c02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c00:	d107      	bne.n	8003c12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c1a:	d10f      	bne.n	8003c3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e010      	b.n	8003c72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d196      	bne.n	8003b9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3728      	adds	r7, #40	@ 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000

08003c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff ff5b 	bl	8003b54 <SPI_WaitFifoStateUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e027      	b.n	8003d04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2180      	movs	r1, #128	@ 0x80
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff fec0 	bl	8003a44 <SPI_WaitFlagStateUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cce:	f043 0220 	orr.w	r2, r3, #32
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e014      	b.n	8003d04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff ff34 	bl	8003b54 <SPI_WaitFifoStateUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e000      	b.n	8003d04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e040      	b.n	8003da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fc ff2c 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	@ 0x24
 8003d38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fb6a 	bl	800442c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f8af 	bl	8003ebc <UART_SetConfig>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e01b      	b.n	8003da0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fbe9 	bl	8004570 <UART_CheckIdleState>
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	@ 0x28
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d177      	bne.n	8003eb0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_UART_Transmit+0x24>
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e070      	b.n	8003eb2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2221      	movs	r2, #33	@ 0x21
 8003ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dde:	f7fd fd77 	bl	80018d0 <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dfc:	d108      	bne.n	8003e10 <HAL_UART_Transmit+0x68>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	e003      	b.n	8003e18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e18:	e02f      	b.n	8003e7a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2180      	movs	r1, #128	@ 0x80
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fc4b 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d004      	beq.n	8003e3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e03b      	b.n	8003eb2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	881a      	ldrh	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e4c:	b292      	uxth	r2, r2
 8003e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	3302      	adds	r3, #2
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e007      	b.n	8003e68 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3301      	adds	r3, #1
 8003e66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1c9      	bne.n	8003e1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2140      	movs	r1, #64	@ 0x40
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fc15 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e005      	b.n	8003eb2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3720      	adds	r7, #32
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec0:	b08a      	sub	sp, #40	@ 0x28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4ba4      	ldr	r3, [pc, #656]	@ (800417c <UART_SetConfig+0x2c0>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a99      	ldr	r2, [pc, #612]	@ (8004180 <UART_SetConfig+0x2c4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f24:	4313      	orrs	r3, r2
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a90      	ldr	r2, [pc, #576]	@ (8004184 <UART_SetConfig+0x2c8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d126      	bne.n	8003f94 <UART_SetConfig+0xd8>
 8003f46:	4b90      	ldr	r3, [pc, #576]	@ (8004188 <UART_SetConfig+0x2cc>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d81b      	bhi.n	8003f8c <UART_SetConfig+0xd0>
 8003f54:	a201      	add	r2, pc, #4	@ (adr r2, 8003f5c <UART_SetConfig+0xa0>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f6d 	.word	0x08003f6d
 8003f60:	08003f7d 	.word	0x08003f7d
 8003f64:	08003f75 	.word	0x08003f75
 8003f68:	08003f85 	.word	0x08003f85
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f72:	e116      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8003f74:	2302      	movs	r3, #2
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7a:	e112      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f82:	e10e      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8003f84:	2308      	movs	r3, #8
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8a:	e10a      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f92:	e106      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a7c      	ldr	r2, [pc, #496]	@ (800418c <UART_SetConfig+0x2d0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d138      	bne.n	8004010 <UART_SetConfig+0x154>
 8003f9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004188 <UART_SetConfig+0x2cc>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b0c      	cmp	r3, #12
 8003faa:	d82d      	bhi.n	8004008 <UART_SetConfig+0x14c>
 8003fac:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <UART_SetConfig+0xf8>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fe9 	.word	0x08003fe9
 8003fb8:	08004009 	.word	0x08004009
 8003fbc:	08004009 	.word	0x08004009
 8003fc0:	08004009 	.word	0x08004009
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	08004009 	.word	0x08004009
 8003fcc:	08004009 	.word	0x08004009
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	08003ff1 	.word	0x08003ff1
 8003fd8:	08004009 	.word	0x08004009
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	08004009 	.word	0x08004009
 8003fe4:	08004001 	.word	0x08004001
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fee:	e0d8      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff6:	e0d4      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffe:	e0d0      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8004000:	2308      	movs	r3, #8
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004006:	e0cc      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8004008:	2310      	movs	r3, #16
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400e:	e0c8      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a5e      	ldr	r2, [pc, #376]	@ (8004190 <UART_SetConfig+0x2d4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d125      	bne.n	8004066 <UART_SetConfig+0x1aa>
 800401a:	4b5b      	ldr	r3, [pc, #364]	@ (8004188 <UART_SetConfig+0x2cc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004024:	2b30      	cmp	r3, #48	@ 0x30
 8004026:	d016      	beq.n	8004056 <UART_SetConfig+0x19a>
 8004028:	2b30      	cmp	r3, #48	@ 0x30
 800402a:	d818      	bhi.n	800405e <UART_SetConfig+0x1a2>
 800402c:	2b20      	cmp	r3, #32
 800402e:	d00a      	beq.n	8004046 <UART_SetConfig+0x18a>
 8004030:	2b20      	cmp	r3, #32
 8004032:	d814      	bhi.n	800405e <UART_SetConfig+0x1a2>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <UART_SetConfig+0x182>
 8004038:	2b10      	cmp	r3, #16
 800403a:	d008      	beq.n	800404e <UART_SetConfig+0x192>
 800403c:	e00f      	b.n	800405e <UART_SetConfig+0x1a2>
 800403e:	2300      	movs	r3, #0
 8004040:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004044:	e0ad      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8004046:	2302      	movs	r3, #2
 8004048:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404c:	e0a9      	b.n	80041a2 <UART_SetConfig+0x2e6>
 800404e:	2304      	movs	r3, #4
 8004050:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004054:	e0a5      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8004056:	2308      	movs	r3, #8
 8004058:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800405c:	e0a1      	b.n	80041a2 <UART_SetConfig+0x2e6>
 800405e:	2310      	movs	r3, #16
 8004060:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004064:	e09d      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a4a      	ldr	r2, [pc, #296]	@ (8004194 <UART_SetConfig+0x2d8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d125      	bne.n	80040bc <UART_SetConfig+0x200>
 8004070:	4b45      	ldr	r3, [pc, #276]	@ (8004188 <UART_SetConfig+0x2cc>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004076:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800407a:	2bc0      	cmp	r3, #192	@ 0xc0
 800407c:	d016      	beq.n	80040ac <UART_SetConfig+0x1f0>
 800407e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004080:	d818      	bhi.n	80040b4 <UART_SetConfig+0x1f8>
 8004082:	2b80      	cmp	r3, #128	@ 0x80
 8004084:	d00a      	beq.n	800409c <UART_SetConfig+0x1e0>
 8004086:	2b80      	cmp	r3, #128	@ 0x80
 8004088:	d814      	bhi.n	80040b4 <UART_SetConfig+0x1f8>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <UART_SetConfig+0x1d8>
 800408e:	2b40      	cmp	r3, #64	@ 0x40
 8004090:	d008      	beq.n	80040a4 <UART_SetConfig+0x1e8>
 8004092:	e00f      	b.n	80040b4 <UART_SetConfig+0x1f8>
 8004094:	2300      	movs	r3, #0
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409a:	e082      	b.n	80041a2 <UART_SetConfig+0x2e6>
 800409c:	2302      	movs	r3, #2
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a2:	e07e      	b.n	80041a2 <UART_SetConfig+0x2e6>
 80040a4:	2304      	movs	r3, #4
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040aa:	e07a      	b.n	80041a2 <UART_SetConfig+0x2e6>
 80040ac:	2308      	movs	r3, #8
 80040ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b2:	e076      	b.n	80041a2 <UART_SetConfig+0x2e6>
 80040b4:	2310      	movs	r3, #16
 80040b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ba:	e072      	b.n	80041a2 <UART_SetConfig+0x2e6>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a35      	ldr	r2, [pc, #212]	@ (8004198 <UART_SetConfig+0x2dc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d12a      	bne.n	800411c <UART_SetConfig+0x260>
 80040c6:	4b30      	ldr	r3, [pc, #192]	@ (8004188 <UART_SetConfig+0x2cc>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040d4:	d01a      	beq.n	800410c <UART_SetConfig+0x250>
 80040d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040da:	d81b      	bhi.n	8004114 <UART_SetConfig+0x258>
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e0:	d00c      	beq.n	80040fc <UART_SetConfig+0x240>
 80040e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e6:	d815      	bhi.n	8004114 <UART_SetConfig+0x258>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <UART_SetConfig+0x238>
 80040ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f0:	d008      	beq.n	8004104 <UART_SetConfig+0x248>
 80040f2:	e00f      	b.n	8004114 <UART_SetConfig+0x258>
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040fa:	e052      	b.n	80041a2 <UART_SetConfig+0x2e6>
 80040fc:	2302      	movs	r3, #2
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004102:	e04e      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410a:	e04a      	b.n	80041a2 <UART_SetConfig+0x2e6>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004112:	e046      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411a:	e042      	b.n	80041a2 <UART_SetConfig+0x2e6>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a17      	ldr	r2, [pc, #92]	@ (8004180 <UART_SetConfig+0x2c4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d13a      	bne.n	800419c <UART_SetConfig+0x2e0>
 8004126:	4b18      	ldr	r3, [pc, #96]	@ (8004188 <UART_SetConfig+0x2cc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004130:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004134:	d01a      	beq.n	800416c <UART_SetConfig+0x2b0>
 8004136:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800413a:	d81b      	bhi.n	8004174 <UART_SetConfig+0x2b8>
 800413c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004140:	d00c      	beq.n	800415c <UART_SetConfig+0x2a0>
 8004142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004146:	d815      	bhi.n	8004174 <UART_SetConfig+0x2b8>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <UART_SetConfig+0x298>
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004150:	d008      	beq.n	8004164 <UART_SetConfig+0x2a8>
 8004152:	e00f      	b.n	8004174 <UART_SetConfig+0x2b8>
 8004154:	2300      	movs	r3, #0
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800415a:	e022      	b.n	80041a2 <UART_SetConfig+0x2e6>
 800415c:	2302      	movs	r3, #2
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004162:	e01e      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8004164:	2304      	movs	r3, #4
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416a:	e01a      	b.n	80041a2 <UART_SetConfig+0x2e6>
 800416c:	2308      	movs	r3, #8
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004172:	e016      	b.n	80041a2 <UART_SetConfig+0x2e6>
 8004174:	2310      	movs	r3, #16
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417a:	e012      	b.n	80041a2 <UART_SetConfig+0x2e6>
 800417c:	efff69f3 	.word	0xefff69f3
 8004180:	40008000 	.word	0x40008000
 8004184:	40013800 	.word	0x40013800
 8004188:	40021000 	.word	0x40021000
 800418c:	40004400 	.word	0x40004400
 8004190:	40004800 	.word	0x40004800
 8004194:	40004c00 	.word	0x40004c00
 8004198:	40005000 	.word	0x40005000
 800419c:	2310      	movs	r3, #16
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a9f      	ldr	r2, [pc, #636]	@ (8004424 <UART_SetConfig+0x568>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d17a      	bne.n	80042a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d824      	bhi.n	80041fe <UART_SetConfig+0x342>
 80041b4:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <UART_SetConfig+0x300>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041ff 	.word	0x080041ff
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041ff 	.word	0x080041ff
 80041cc:	080041ef 	.word	0x080041ef
 80041d0:	080041ff 	.word	0x080041ff
 80041d4:	080041ff 	.word	0x080041ff
 80041d8:	080041ff 	.word	0x080041ff
 80041dc:	080041f7 	.word	0x080041f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e0:	f7fe fc26 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 80041e4:	61f8      	str	r0, [r7, #28]
        break;
 80041e6:	e010      	b.n	800420a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004428 <UART_SetConfig+0x56c>)
 80041ea:	61fb      	str	r3, [r7, #28]
        break;
 80041ec:	e00d      	b.n	800420a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ee:	f7fe fb87 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80041f2:	61f8      	str	r0, [r7, #28]
        break;
 80041f4:	e009      	b.n	800420a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041fa:	61fb      	str	r3, [r7, #28]
        break;
 80041fc:	e005      	b.n	800420a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004208:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80fb 	beq.w	8004408 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	429a      	cmp	r2, r3
 8004220:	d305      	bcc.n	800422e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	429a      	cmp	r2, r3
 800422c:	d903      	bls.n	8004236 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004234:	e0e8      	b.n	8004408 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2200      	movs	r2, #0
 800423a:	461c      	mov	r4, r3
 800423c:	4615      	mov	r5, r2
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	022b      	lsls	r3, r5, #8
 8004248:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800424c:	0222      	lsls	r2, r4, #8
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	6849      	ldr	r1, [r1, #4]
 8004252:	0849      	lsrs	r1, r1, #1
 8004254:	2000      	movs	r0, #0
 8004256:	4688      	mov	r8, r1
 8004258:	4681      	mov	r9, r0
 800425a:	eb12 0a08 	adds.w	sl, r2, r8
 800425e:	eb43 0b09 	adc.w	fp, r3, r9
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004270:	4650      	mov	r0, sl
 8004272:	4659      	mov	r1, fp
 8004274:	f7fb fffc 	bl	8000270 <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4613      	mov	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004286:	d308      	bcc.n	800429a <UART_SetConfig+0x3de>
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428e:	d204      	bcs.n	800429a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	60da      	str	r2, [r3, #12]
 8004298:	e0b6      	b.n	8004408 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042a0:	e0b2      	b.n	8004408 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042aa:	d15e      	bne.n	800436a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80042ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d828      	bhi.n	8004306 <UART_SetConfig+0x44a>
 80042b4:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <UART_SetConfig+0x400>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042e9 	.word	0x080042e9
 80042c4:	080042f1 	.word	0x080042f1
 80042c8:	08004307 	.word	0x08004307
 80042cc:	080042f7 	.word	0x080042f7
 80042d0:	08004307 	.word	0x08004307
 80042d4:	08004307 	.word	0x08004307
 80042d8:	08004307 	.word	0x08004307
 80042dc:	080042ff 	.word	0x080042ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7fe fba6 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 80042e4:	61f8      	str	r0, [r7, #28]
        break;
 80042e6:	e014      	b.n	8004312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7fe fbb8 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 80042ec:	61f8      	str	r0, [r7, #28]
        break;
 80042ee:	e010      	b.n	8004312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004428 <UART_SetConfig+0x56c>)
 80042f2:	61fb      	str	r3, [r7, #28]
        break;
 80042f4:	e00d      	b.n	8004312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042f6:	f7fe fb03 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80042fa:	61f8      	str	r0, [r7, #28]
        break;
 80042fc:	e009      	b.n	8004312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004302:	61fb      	str	r3, [r7, #28]
        break;
 8004304:	e005      	b.n	8004312 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d077      	beq.n	8004408 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	005a      	lsls	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	441a      	add	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b0f      	cmp	r3, #15
 8004332:	d916      	bls.n	8004362 <UART_SetConfig+0x4a6>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433a:	d212      	bcs.n	8004362 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	b29b      	uxth	r3, r3
 8004340:	f023 030f 	bic.w	r3, r3, #15
 8004344:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	b29b      	uxth	r3, r3
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	b29a      	uxth	r2, r3
 8004352:	8afb      	ldrh	r3, [r7, #22]
 8004354:	4313      	orrs	r3, r2
 8004356:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	8afa      	ldrh	r2, [r7, #22]
 800435e:	60da      	str	r2, [r3, #12]
 8004360:	e052      	b.n	8004408 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004368:	e04e      	b.n	8004408 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800436a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800436e:	2b08      	cmp	r3, #8
 8004370:	d827      	bhi.n	80043c2 <UART_SetConfig+0x506>
 8004372:	a201      	add	r2, pc, #4	@ (adr r2, 8004378 <UART_SetConfig+0x4bc>)
 8004374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004378:	0800439d 	.word	0x0800439d
 800437c:	080043a5 	.word	0x080043a5
 8004380:	080043ad 	.word	0x080043ad
 8004384:	080043c3 	.word	0x080043c3
 8004388:	080043b3 	.word	0x080043b3
 800438c:	080043c3 	.word	0x080043c3
 8004390:	080043c3 	.word	0x080043c3
 8004394:	080043c3 	.word	0x080043c3
 8004398:	080043bb 	.word	0x080043bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7fe fb48 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 80043a0:	61f8      	str	r0, [r7, #28]
        break;
 80043a2:	e014      	b.n	80043ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043a4:	f7fe fb5a 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 80043a8:	61f8      	str	r0, [r7, #28]
        break;
 80043aa:	e010      	b.n	80043ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004428 <UART_SetConfig+0x56c>)
 80043ae:	61fb      	str	r3, [r7, #28]
        break;
 80043b0:	e00d      	b.n	80043ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b2:	f7fe faa5 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80043b6:	61f8      	str	r0, [r7, #28]
        break;
 80043b8:	e009      	b.n	80043ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043be:	61fb      	str	r3, [r7, #28]
        break;
 80043c0:	e005      	b.n	80043ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043cc:	bf00      	nop
    }

    if (pclk != 0U)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d019      	beq.n	8004408 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	085a      	lsrs	r2, r3, #1
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	441a      	add	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b0f      	cmp	r3, #15
 80043ec:	d909      	bls.n	8004402 <UART_SetConfig+0x546>
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f4:	d205      	bcs.n	8004402 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60da      	str	r2, [r3, #12]
 8004400:	e002      	b.n	8004408 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004414:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004418:	4618      	mov	r0, r3
 800441a:	3728      	adds	r7, #40	@ 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004422:	bf00      	nop
 8004424:	40008000 	.word	0x40008000
 8004428:	00f42400 	.word	0x00f42400

0800442c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01a      	beq.n	8004542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800452a:	d10a      	bne.n	8004542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b098      	sub	sp, #96	@ 0x60
 8004574:	af02      	add	r7, sp, #8
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004580:	f7fd f9a6 	bl	80018d0 <HAL_GetTick>
 8004584:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d12e      	bne.n	80045f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004594:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f88c 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d021      	beq.n	80045f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e6      	bne.n	80045ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e062      	b.n	80046b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d149      	bne.n	8004694 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004608:	2200      	movs	r2, #0
 800460a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f856 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d03c      	beq.n	8004694 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	623b      	str	r3, [r7, #32]
   return(result);
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800462e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004638:	633b      	str	r3, [r7, #48]	@ 0x30
 800463a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800463e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e6      	bne.n	800461a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3308      	adds	r3, #8
 8004652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	60fb      	str	r3, [r7, #12]
   return(result);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3308      	adds	r3, #8
 800466a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800466c:	61fa      	str	r2, [r7, #28]
 800466e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	69b9      	ldr	r1, [r7, #24]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	617b      	str	r3, [r7, #20]
   return(result);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e011      	b.n	80046b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3758      	adds	r7, #88	@ 0x58
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d0:	e04f      	b.n	8004772 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d04b      	beq.n	8004772 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7fd f8f9 	bl	80018d0 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e04e      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d037      	beq.n	8004772 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b80      	cmp	r3, #128	@ 0x80
 8004706:	d034      	beq.n	8004772 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b40      	cmp	r3, #64	@ 0x40
 800470c:	d031      	beq.n	8004772 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b08      	cmp	r3, #8
 800471a:	d110      	bne.n	800473e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2208      	movs	r2, #8
 8004722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f838 	bl	800479a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2208      	movs	r2, #8
 800472e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e029      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800474c:	d111      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f81e 	bl	800479a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e00f      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4013      	ands	r3, r2
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	429a      	cmp	r2, r3
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	429a      	cmp	r2, r3
 800478e:	d0a0      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800479a:	b480      	push	{r7}
 800479c:	b095      	sub	sp, #84	@ 0x54
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80047c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e6      	bne.n	80047a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3308      	adds	r3, #8
 80047da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3308      	adds	r3, #8
 80047f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e5      	bne.n	80047d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800480c:	2b01      	cmp	r3, #1
 800480e:	d118      	bne.n	8004842 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	60bb      	str	r3, [r7, #8]
   return(result);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f023 0310 	bic.w	r3, r3, #16
 8004824:	647b      	str	r3, [r7, #68]	@ 0x44
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6979      	ldr	r1, [r7, #20]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	613b      	str	r3, [r7, #16]
   return(result);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e6      	bne.n	8004810 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004856:	bf00      	nop
 8004858:	3754      	adds	r7, #84	@ 0x54
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <std>:
 8004864:	2300      	movs	r3, #0
 8004866:	b510      	push	{r4, lr}
 8004868:	4604      	mov	r4, r0
 800486a:	e9c0 3300 	strd	r3, r3, [r0]
 800486e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004872:	6083      	str	r3, [r0, #8]
 8004874:	8181      	strh	r1, [r0, #12]
 8004876:	6643      	str	r3, [r0, #100]	@ 0x64
 8004878:	81c2      	strh	r2, [r0, #14]
 800487a:	6183      	str	r3, [r0, #24]
 800487c:	4619      	mov	r1, r3
 800487e:	2208      	movs	r2, #8
 8004880:	305c      	adds	r0, #92	@ 0x5c
 8004882:	f000 fab5 	bl	8004df0 <memset>
 8004886:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <std+0x58>)
 8004888:	6263      	str	r3, [r4, #36]	@ 0x24
 800488a:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <std+0x5c>)
 800488c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <std+0x60>)
 8004890:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <std+0x64>)
 8004894:	6323      	str	r3, [r4, #48]	@ 0x30
 8004896:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <std+0x68>)
 8004898:	6224      	str	r4, [r4, #32]
 800489a:	429c      	cmp	r4, r3
 800489c:	d006      	beq.n	80048ac <std+0x48>
 800489e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048a2:	4294      	cmp	r4, r2
 80048a4:	d002      	beq.n	80048ac <std+0x48>
 80048a6:	33d0      	adds	r3, #208	@ 0xd0
 80048a8:	429c      	cmp	r4, r3
 80048aa:	d105      	bne.n	80048b8 <std+0x54>
 80048ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b4:	f000 bb14 	b.w	8004ee0 <__retarget_lock_init_recursive>
 80048b8:	bd10      	pop	{r4, pc}
 80048ba:	bf00      	nop
 80048bc:	08004c41 	.word	0x08004c41
 80048c0:	08004c63 	.word	0x08004c63
 80048c4:	08004c9b 	.word	0x08004c9b
 80048c8:	08004cbf 	.word	0x08004cbf
 80048cc:	200009cc 	.word	0x200009cc

080048d0 <stdio_exit_handler>:
 80048d0:	4a02      	ldr	r2, [pc, #8]	@ (80048dc <stdio_exit_handler+0xc>)
 80048d2:	4903      	ldr	r1, [pc, #12]	@ (80048e0 <stdio_exit_handler+0x10>)
 80048d4:	4803      	ldr	r0, [pc, #12]	@ (80048e4 <stdio_exit_handler+0x14>)
 80048d6:	f000 b869 	b.w	80049ac <_fwalk_sglue>
 80048da:	bf00      	nop
 80048dc:	2000003c 	.word	0x2000003c
 80048e0:	08005791 	.word	0x08005791
 80048e4:	2000004c 	.word	0x2000004c

080048e8 <cleanup_stdio>:
 80048e8:	6841      	ldr	r1, [r0, #4]
 80048ea:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <cleanup_stdio+0x34>)
 80048ec:	4299      	cmp	r1, r3
 80048ee:	b510      	push	{r4, lr}
 80048f0:	4604      	mov	r4, r0
 80048f2:	d001      	beq.n	80048f8 <cleanup_stdio+0x10>
 80048f4:	f000 ff4c 	bl	8005790 <_fflush_r>
 80048f8:	68a1      	ldr	r1, [r4, #8]
 80048fa:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <cleanup_stdio+0x38>)
 80048fc:	4299      	cmp	r1, r3
 80048fe:	d002      	beq.n	8004906 <cleanup_stdio+0x1e>
 8004900:	4620      	mov	r0, r4
 8004902:	f000 ff45 	bl	8005790 <_fflush_r>
 8004906:	68e1      	ldr	r1, [r4, #12]
 8004908:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <cleanup_stdio+0x3c>)
 800490a:	4299      	cmp	r1, r3
 800490c:	d004      	beq.n	8004918 <cleanup_stdio+0x30>
 800490e:	4620      	mov	r0, r4
 8004910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004914:	f000 bf3c 	b.w	8005790 <_fflush_r>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	bf00      	nop
 800491c:	200009cc 	.word	0x200009cc
 8004920:	20000a34 	.word	0x20000a34
 8004924:	20000a9c 	.word	0x20000a9c

08004928 <global_stdio_init.part.0>:
 8004928:	b510      	push	{r4, lr}
 800492a:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <global_stdio_init.part.0+0x30>)
 800492c:	4c0b      	ldr	r4, [pc, #44]	@ (800495c <global_stdio_init.part.0+0x34>)
 800492e:	4a0c      	ldr	r2, [pc, #48]	@ (8004960 <global_stdio_init.part.0+0x38>)
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	4620      	mov	r0, r4
 8004934:	2200      	movs	r2, #0
 8004936:	2104      	movs	r1, #4
 8004938:	f7ff ff94 	bl	8004864 <std>
 800493c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004940:	2201      	movs	r2, #1
 8004942:	2109      	movs	r1, #9
 8004944:	f7ff ff8e 	bl	8004864 <std>
 8004948:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800494c:	2202      	movs	r2, #2
 800494e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004952:	2112      	movs	r1, #18
 8004954:	f7ff bf86 	b.w	8004864 <std>
 8004958:	20000b04 	.word	0x20000b04
 800495c:	200009cc 	.word	0x200009cc
 8004960:	080048d1 	.word	0x080048d1

08004964 <__sfp_lock_acquire>:
 8004964:	4801      	ldr	r0, [pc, #4]	@ (800496c <__sfp_lock_acquire+0x8>)
 8004966:	f000 babc 	b.w	8004ee2 <__retarget_lock_acquire_recursive>
 800496a:	bf00      	nop
 800496c:	20000b0d 	.word	0x20000b0d

08004970 <__sfp_lock_release>:
 8004970:	4801      	ldr	r0, [pc, #4]	@ (8004978 <__sfp_lock_release+0x8>)
 8004972:	f000 bab7 	b.w	8004ee4 <__retarget_lock_release_recursive>
 8004976:	bf00      	nop
 8004978:	20000b0d 	.word	0x20000b0d

0800497c <__sinit>:
 800497c:	b510      	push	{r4, lr}
 800497e:	4604      	mov	r4, r0
 8004980:	f7ff fff0 	bl	8004964 <__sfp_lock_acquire>
 8004984:	6a23      	ldr	r3, [r4, #32]
 8004986:	b11b      	cbz	r3, 8004990 <__sinit+0x14>
 8004988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800498c:	f7ff bff0 	b.w	8004970 <__sfp_lock_release>
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <__sinit+0x28>)
 8004992:	6223      	str	r3, [r4, #32]
 8004994:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <__sinit+0x2c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f5      	bne.n	8004988 <__sinit+0xc>
 800499c:	f7ff ffc4 	bl	8004928 <global_stdio_init.part.0>
 80049a0:	e7f2      	b.n	8004988 <__sinit+0xc>
 80049a2:	bf00      	nop
 80049a4:	080048e9 	.word	0x080048e9
 80049a8:	20000b04 	.word	0x20000b04

080049ac <_fwalk_sglue>:
 80049ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b0:	4607      	mov	r7, r0
 80049b2:	4688      	mov	r8, r1
 80049b4:	4614      	mov	r4, r2
 80049b6:	2600      	movs	r6, #0
 80049b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049bc:	f1b9 0901 	subs.w	r9, r9, #1
 80049c0:	d505      	bpl.n	80049ce <_fwalk_sglue+0x22>
 80049c2:	6824      	ldr	r4, [r4, #0]
 80049c4:	2c00      	cmp	r4, #0
 80049c6:	d1f7      	bne.n	80049b8 <_fwalk_sglue+0xc>
 80049c8:	4630      	mov	r0, r6
 80049ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d907      	bls.n	80049e4 <_fwalk_sglue+0x38>
 80049d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049d8:	3301      	adds	r3, #1
 80049da:	d003      	beq.n	80049e4 <_fwalk_sglue+0x38>
 80049dc:	4629      	mov	r1, r5
 80049de:	4638      	mov	r0, r7
 80049e0:	47c0      	blx	r8
 80049e2:	4306      	orrs	r6, r0
 80049e4:	3568      	adds	r5, #104	@ 0x68
 80049e6:	e7e9      	b.n	80049bc <_fwalk_sglue+0x10>

080049e8 <iprintf>:
 80049e8:	b40f      	push	{r0, r1, r2, r3}
 80049ea:	b507      	push	{r0, r1, r2, lr}
 80049ec:	4906      	ldr	r1, [pc, #24]	@ (8004a08 <iprintf+0x20>)
 80049ee:	ab04      	add	r3, sp, #16
 80049f0:	6808      	ldr	r0, [r1, #0]
 80049f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f6:	6881      	ldr	r1, [r0, #8]
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	f000 fb9f 	bl	800513c <_vfiprintf_r>
 80049fe:	b003      	add	sp, #12
 8004a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a04:	b004      	add	sp, #16
 8004a06:	4770      	bx	lr
 8004a08:	20000048 	.word	0x20000048

08004a0c <_puts_r>:
 8004a0c:	6a03      	ldr	r3, [r0, #32]
 8004a0e:	b570      	push	{r4, r5, r6, lr}
 8004a10:	6884      	ldr	r4, [r0, #8]
 8004a12:	4605      	mov	r5, r0
 8004a14:	460e      	mov	r6, r1
 8004a16:	b90b      	cbnz	r3, 8004a1c <_puts_r+0x10>
 8004a18:	f7ff ffb0 	bl	800497c <__sinit>
 8004a1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a1e:	07db      	lsls	r3, r3, #31
 8004a20:	d405      	bmi.n	8004a2e <_puts_r+0x22>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	0598      	lsls	r0, r3, #22
 8004a26:	d402      	bmi.n	8004a2e <_puts_r+0x22>
 8004a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a2a:	f000 fa5a 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	0719      	lsls	r1, r3, #28
 8004a32:	d502      	bpl.n	8004a3a <_puts_r+0x2e>
 8004a34:	6923      	ldr	r3, [r4, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d135      	bne.n	8004aa6 <_puts_r+0x9a>
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f000 f981 	bl	8004d44 <__swsetup_r>
 8004a42:	b380      	cbz	r0, 8004aa6 <_puts_r+0x9a>
 8004a44:	f04f 35ff 	mov.w	r5, #4294967295
 8004a48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a4a:	07da      	lsls	r2, r3, #31
 8004a4c:	d405      	bmi.n	8004a5a <_puts_r+0x4e>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	059b      	lsls	r3, r3, #22
 8004a52:	d402      	bmi.n	8004a5a <_puts_r+0x4e>
 8004a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a56:	f000 fa45 	bl	8004ee4 <__retarget_lock_release_recursive>
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	bd70      	pop	{r4, r5, r6, pc}
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	da04      	bge.n	8004a6c <_puts_r+0x60>
 8004a62:	69a2      	ldr	r2, [r4, #24]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	dc17      	bgt.n	8004a98 <_puts_r+0x8c>
 8004a68:	290a      	cmp	r1, #10
 8004a6a:	d015      	beq.n	8004a98 <_puts_r+0x8c>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	6022      	str	r2, [r4, #0]
 8004a72:	7019      	strb	r1, [r3, #0]
 8004a74:	68a3      	ldr	r3, [r4, #8]
 8004a76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	60a3      	str	r3, [r4, #8]
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	d1ed      	bne.n	8004a5e <_puts_r+0x52>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da11      	bge.n	8004aaa <_puts_r+0x9e>
 8004a86:	4622      	mov	r2, r4
 8004a88:	210a      	movs	r1, #10
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f000 f91b 	bl	8004cc6 <__swbuf_r>
 8004a90:	3001      	adds	r0, #1
 8004a92:	d0d7      	beq.n	8004a44 <_puts_r+0x38>
 8004a94:	250a      	movs	r5, #10
 8004a96:	e7d7      	b.n	8004a48 <_puts_r+0x3c>
 8004a98:	4622      	mov	r2, r4
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 f913 	bl	8004cc6 <__swbuf_r>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d1e7      	bne.n	8004a74 <_puts_r+0x68>
 8004aa4:	e7ce      	b.n	8004a44 <_puts_r+0x38>
 8004aa6:	3e01      	subs	r6, #1
 8004aa8:	e7e4      	b.n	8004a74 <_puts_r+0x68>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	6022      	str	r2, [r4, #0]
 8004ab0:	220a      	movs	r2, #10
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e7ee      	b.n	8004a94 <_puts_r+0x88>
	...

08004ab8 <puts>:
 8004ab8:	4b02      	ldr	r3, [pc, #8]	@ (8004ac4 <puts+0xc>)
 8004aba:	4601      	mov	r1, r0
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	f7ff bfa5 	b.w	8004a0c <_puts_r>
 8004ac2:	bf00      	nop
 8004ac4:	20000048 	.word	0x20000048

08004ac8 <setbuf>:
 8004ac8:	fab1 f281 	clz	r2, r1
 8004acc:	0952      	lsrs	r2, r2, #5
 8004ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ad2:	0052      	lsls	r2, r2, #1
 8004ad4:	f000 b800 	b.w	8004ad8 <setvbuf>

08004ad8 <setvbuf>:
 8004ad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004adc:	461d      	mov	r5, r3
 8004ade:	4b57      	ldr	r3, [pc, #348]	@ (8004c3c <setvbuf+0x164>)
 8004ae0:	681f      	ldr	r7, [r3, #0]
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	460e      	mov	r6, r1
 8004ae6:	4690      	mov	r8, r2
 8004ae8:	b127      	cbz	r7, 8004af4 <setvbuf+0x1c>
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	b913      	cbnz	r3, 8004af4 <setvbuf+0x1c>
 8004aee:	4638      	mov	r0, r7
 8004af0:	f7ff ff44 	bl	800497c <__sinit>
 8004af4:	f1b8 0f02 	cmp.w	r8, #2
 8004af8:	d006      	beq.n	8004b08 <setvbuf+0x30>
 8004afa:	f1b8 0f01 	cmp.w	r8, #1
 8004afe:	f200 809a 	bhi.w	8004c36 <setvbuf+0x15e>
 8004b02:	2d00      	cmp	r5, #0
 8004b04:	f2c0 8097 	blt.w	8004c36 <setvbuf+0x15e>
 8004b08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b0a:	07d9      	lsls	r1, r3, #31
 8004b0c:	d405      	bmi.n	8004b1a <setvbuf+0x42>
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	059a      	lsls	r2, r3, #22
 8004b12:	d402      	bmi.n	8004b1a <setvbuf+0x42>
 8004b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b16:	f000 f9e4 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	f000 fe37 	bl	8005790 <_fflush_r>
 8004b22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b24:	b141      	cbz	r1, 8004b38 <setvbuf+0x60>
 8004b26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	d002      	beq.n	8004b34 <setvbuf+0x5c>
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f000 f9da 	bl	8004ee8 <_free_r>
 8004b34:	2300      	movs	r3, #0
 8004b36:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61a3      	str	r3, [r4, #24]
 8004b3c:	6063      	str	r3, [r4, #4]
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	061b      	lsls	r3, r3, #24
 8004b42:	d503      	bpl.n	8004b4c <setvbuf+0x74>
 8004b44:	6921      	ldr	r1, [r4, #16]
 8004b46:	4638      	mov	r0, r7
 8004b48:	f000 f9ce 	bl	8004ee8 <_free_r>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004b52:	f023 0303 	bic.w	r3, r3, #3
 8004b56:	f1b8 0f02 	cmp.w	r8, #2
 8004b5a:	81a3      	strh	r3, [r4, #12]
 8004b5c:	d061      	beq.n	8004c22 <setvbuf+0x14a>
 8004b5e:	ab01      	add	r3, sp, #4
 8004b60:	466a      	mov	r2, sp
 8004b62:	4621      	mov	r1, r4
 8004b64:	4638      	mov	r0, r7
 8004b66:	f000 fe3b 	bl	80057e0 <__swhatbuf_r>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	4318      	orrs	r0, r3
 8004b6e:	81a0      	strh	r0, [r4, #12]
 8004b70:	bb2d      	cbnz	r5, 8004bbe <setvbuf+0xe6>
 8004b72:	9d00      	ldr	r5, [sp, #0]
 8004b74:	4628      	mov	r0, r5
 8004b76:	f000 fa01 	bl	8004f7c <malloc>
 8004b7a:	4606      	mov	r6, r0
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d152      	bne.n	8004c26 <setvbuf+0x14e>
 8004b80:	f8dd 9000 	ldr.w	r9, [sp]
 8004b84:	45a9      	cmp	r9, r5
 8004b86:	d140      	bne.n	8004c0a <setvbuf+0x132>
 8004b88:	f04f 35ff 	mov.w	r5, #4294967295
 8004b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b90:	f043 0202 	orr.w	r2, r3, #2
 8004b94:	81a2      	strh	r2, [r4, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	60a2      	str	r2, [r4, #8]
 8004b9a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004b9e:	6022      	str	r2, [r4, #0]
 8004ba0:	6122      	str	r2, [r4, #16]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	6162      	str	r2, [r4, #20]
 8004ba6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ba8:	07d6      	lsls	r6, r2, #31
 8004baa:	d404      	bmi.n	8004bb6 <setvbuf+0xde>
 8004bac:	0598      	lsls	r0, r3, #22
 8004bae:	d402      	bmi.n	8004bb6 <setvbuf+0xde>
 8004bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bb2:	f000 f997 	bl	8004ee4 <__retarget_lock_release_recursive>
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	b003      	add	sp, #12
 8004bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bbe:	2e00      	cmp	r6, #0
 8004bc0:	d0d8      	beq.n	8004b74 <setvbuf+0x9c>
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	b913      	cbnz	r3, 8004bcc <setvbuf+0xf4>
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	f7ff fed8 	bl	800497c <__sinit>
 8004bcc:	f1b8 0f01 	cmp.w	r8, #1
 8004bd0:	bf08      	it	eq
 8004bd2:	89a3      	ldrheq	r3, [r4, #12]
 8004bd4:	6026      	str	r6, [r4, #0]
 8004bd6:	bf04      	itt	eq
 8004bd8:	f043 0301 	orreq.w	r3, r3, #1
 8004bdc:	81a3      	strheq	r3, [r4, #12]
 8004bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be2:	f013 0208 	ands.w	r2, r3, #8
 8004be6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004bea:	d01e      	beq.n	8004c2a <setvbuf+0x152>
 8004bec:	07d9      	lsls	r1, r3, #31
 8004bee:	bf41      	itttt	mi
 8004bf0:	2200      	movmi	r2, #0
 8004bf2:	426d      	negmi	r5, r5
 8004bf4:	60a2      	strmi	r2, [r4, #8]
 8004bf6:	61a5      	strmi	r5, [r4, #24]
 8004bf8:	bf58      	it	pl
 8004bfa:	60a5      	strpl	r5, [r4, #8]
 8004bfc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004bfe:	07d2      	lsls	r2, r2, #31
 8004c00:	d401      	bmi.n	8004c06 <setvbuf+0x12e>
 8004c02:	059b      	lsls	r3, r3, #22
 8004c04:	d513      	bpl.n	8004c2e <setvbuf+0x156>
 8004c06:	2500      	movs	r5, #0
 8004c08:	e7d5      	b.n	8004bb6 <setvbuf+0xde>
 8004c0a:	4648      	mov	r0, r9
 8004c0c:	f000 f9b6 	bl	8004f7c <malloc>
 8004c10:	4606      	mov	r6, r0
 8004c12:	2800      	cmp	r0, #0
 8004c14:	d0b8      	beq.n	8004b88 <setvbuf+0xb0>
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	464d      	mov	r5, r9
 8004c20:	e7cf      	b.n	8004bc2 <setvbuf+0xea>
 8004c22:	2500      	movs	r5, #0
 8004c24:	e7b2      	b.n	8004b8c <setvbuf+0xb4>
 8004c26:	46a9      	mov	r9, r5
 8004c28:	e7f5      	b.n	8004c16 <setvbuf+0x13e>
 8004c2a:	60a2      	str	r2, [r4, #8]
 8004c2c:	e7e6      	b.n	8004bfc <setvbuf+0x124>
 8004c2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c30:	f000 f958 	bl	8004ee4 <__retarget_lock_release_recursive>
 8004c34:	e7e7      	b.n	8004c06 <setvbuf+0x12e>
 8004c36:	f04f 35ff 	mov.w	r5, #4294967295
 8004c3a:	e7bc      	b.n	8004bb6 <setvbuf+0xde>
 8004c3c:	20000048 	.word	0x20000048

08004c40 <__sread>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	460c      	mov	r4, r1
 8004c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c48:	f000 f8fc 	bl	8004e44 <_read_r>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	bfab      	itete	ge
 8004c50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c52:	89a3      	ldrhlt	r3, [r4, #12]
 8004c54:	181b      	addge	r3, r3, r0
 8004c56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c5a:	bfac      	ite	ge
 8004c5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c5e:	81a3      	strhlt	r3, [r4, #12]
 8004c60:	bd10      	pop	{r4, pc}

08004c62 <__swrite>:
 8004c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c66:	461f      	mov	r7, r3
 8004c68:	898b      	ldrh	r3, [r1, #12]
 8004c6a:	05db      	lsls	r3, r3, #23
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	4616      	mov	r6, r2
 8004c72:	d505      	bpl.n	8004c80 <__swrite+0x1e>
 8004c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c78:	2302      	movs	r3, #2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f000 f8d0 	bl	8004e20 <_lseek_r>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	4632      	mov	r2, r6
 8004c8e:	463b      	mov	r3, r7
 8004c90:	4628      	mov	r0, r5
 8004c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c96:	f000 b8e7 	b.w	8004e68 <_write_r>

08004c9a <__sseek>:
 8004c9a:	b510      	push	{r4, lr}
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca2:	f000 f8bd 	bl	8004e20 <_lseek_r>
 8004ca6:	1c43      	adds	r3, r0, #1
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	bf15      	itete	ne
 8004cac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004cb6:	81a3      	strheq	r3, [r4, #12]
 8004cb8:	bf18      	it	ne
 8004cba:	81a3      	strhne	r3, [r4, #12]
 8004cbc:	bd10      	pop	{r4, pc}

08004cbe <__sclose>:
 8004cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc2:	f000 b89d 	b.w	8004e00 <_close_r>

08004cc6 <__swbuf_r>:
 8004cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc8:	460e      	mov	r6, r1
 8004cca:	4614      	mov	r4, r2
 8004ccc:	4605      	mov	r5, r0
 8004cce:	b118      	cbz	r0, 8004cd8 <__swbuf_r+0x12>
 8004cd0:	6a03      	ldr	r3, [r0, #32]
 8004cd2:	b90b      	cbnz	r3, 8004cd8 <__swbuf_r+0x12>
 8004cd4:	f7ff fe52 	bl	800497c <__sinit>
 8004cd8:	69a3      	ldr	r3, [r4, #24]
 8004cda:	60a3      	str	r3, [r4, #8]
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	071a      	lsls	r2, r3, #28
 8004ce0:	d501      	bpl.n	8004ce6 <__swbuf_r+0x20>
 8004ce2:	6923      	ldr	r3, [r4, #16]
 8004ce4:	b943      	cbnz	r3, 8004cf8 <__swbuf_r+0x32>
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 f82b 	bl	8004d44 <__swsetup_r>
 8004cee:	b118      	cbz	r0, 8004cf8 <__swbuf_r+0x32>
 8004cf0:	f04f 37ff 	mov.w	r7, #4294967295
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	6922      	ldr	r2, [r4, #16]
 8004cfc:	1a98      	subs	r0, r3, r2
 8004cfe:	6963      	ldr	r3, [r4, #20]
 8004d00:	b2f6      	uxtb	r6, r6
 8004d02:	4283      	cmp	r3, r0
 8004d04:	4637      	mov	r7, r6
 8004d06:	dc05      	bgt.n	8004d14 <__swbuf_r+0x4e>
 8004d08:	4621      	mov	r1, r4
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 fd40 	bl	8005790 <_fflush_r>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d1ed      	bne.n	8004cf0 <__swbuf_r+0x2a>
 8004d14:	68a3      	ldr	r3, [r4, #8]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	60a3      	str	r3, [r4, #8]
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	6022      	str	r2, [r4, #0]
 8004d20:	701e      	strb	r6, [r3, #0]
 8004d22:	6962      	ldr	r2, [r4, #20]
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d004      	beq.n	8004d34 <__swbuf_r+0x6e>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	07db      	lsls	r3, r3, #31
 8004d2e:	d5e1      	bpl.n	8004cf4 <__swbuf_r+0x2e>
 8004d30:	2e0a      	cmp	r6, #10
 8004d32:	d1df      	bne.n	8004cf4 <__swbuf_r+0x2e>
 8004d34:	4621      	mov	r1, r4
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 fd2a 	bl	8005790 <_fflush_r>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d0d9      	beq.n	8004cf4 <__swbuf_r+0x2e>
 8004d40:	e7d6      	b.n	8004cf0 <__swbuf_r+0x2a>
	...

08004d44 <__swsetup_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4b29      	ldr	r3, [pc, #164]	@ (8004dec <__swsetup_r+0xa8>)
 8004d48:	4605      	mov	r5, r0
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	b118      	cbz	r0, 8004d58 <__swsetup_r+0x14>
 8004d50:	6a03      	ldr	r3, [r0, #32]
 8004d52:	b90b      	cbnz	r3, 8004d58 <__swsetup_r+0x14>
 8004d54:	f7ff fe12 	bl	800497c <__sinit>
 8004d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5c:	0719      	lsls	r1, r3, #28
 8004d5e:	d422      	bmi.n	8004da6 <__swsetup_r+0x62>
 8004d60:	06da      	lsls	r2, r3, #27
 8004d62:	d407      	bmi.n	8004d74 <__swsetup_r+0x30>
 8004d64:	2209      	movs	r2, #9
 8004d66:	602a      	str	r2, [r5, #0]
 8004d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d6c:	81a3      	strh	r3, [r4, #12]
 8004d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d72:	e033      	b.n	8004ddc <__swsetup_r+0x98>
 8004d74:	0758      	lsls	r0, r3, #29
 8004d76:	d512      	bpl.n	8004d9e <__swsetup_r+0x5a>
 8004d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d7a:	b141      	cbz	r1, 8004d8e <__swsetup_r+0x4a>
 8004d7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d80:	4299      	cmp	r1, r3
 8004d82:	d002      	beq.n	8004d8a <__swsetup_r+0x46>
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 f8af 	bl	8004ee8 <_free_r>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	2300      	movs	r3, #0
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f043 0308 	orr.w	r3, r3, #8
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	b94b      	cbnz	r3, 8004dbe <__swsetup_r+0x7a>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db4:	d003      	beq.n	8004dbe <__swsetup_r+0x7a>
 8004db6:	4621      	mov	r1, r4
 8004db8:	4628      	mov	r0, r5
 8004dba:	f000 fd37 	bl	800582c <__smakebuf_r>
 8004dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc2:	f013 0201 	ands.w	r2, r3, #1
 8004dc6:	d00a      	beq.n	8004dde <__swsetup_r+0x9a>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	60a2      	str	r2, [r4, #8]
 8004dcc:	6962      	ldr	r2, [r4, #20]
 8004dce:	4252      	negs	r2, r2
 8004dd0:	61a2      	str	r2, [r4, #24]
 8004dd2:	6922      	ldr	r2, [r4, #16]
 8004dd4:	b942      	cbnz	r2, 8004de8 <__swsetup_r+0xa4>
 8004dd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004dda:	d1c5      	bne.n	8004d68 <__swsetup_r+0x24>
 8004ddc:	bd38      	pop	{r3, r4, r5, pc}
 8004dde:	0799      	lsls	r1, r3, #30
 8004de0:	bf58      	it	pl
 8004de2:	6962      	ldrpl	r2, [r4, #20]
 8004de4:	60a2      	str	r2, [r4, #8]
 8004de6:	e7f4      	b.n	8004dd2 <__swsetup_r+0x8e>
 8004de8:	2000      	movs	r0, #0
 8004dea:	e7f7      	b.n	8004ddc <__swsetup_r+0x98>
 8004dec:	20000048 	.word	0x20000048

08004df0 <memset>:
 8004df0:	4402      	add	r2, r0
 8004df2:	4603      	mov	r3, r0
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d100      	bne.n	8004dfa <memset+0xa>
 8004df8:	4770      	bx	lr
 8004dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfe:	e7f9      	b.n	8004df4 <memset+0x4>

08004e00 <_close_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d06      	ldr	r5, [pc, #24]	@ (8004e1c <_close_r+0x1c>)
 8004e04:	2300      	movs	r3, #0
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	f7fb fe11 	bl	8000a32 <_close>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_close_r+0x1a>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_close_r+0x1a>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	20000b08 	.word	0x20000b08

08004e20 <_lseek_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4d07      	ldr	r5, [pc, #28]	@ (8004e40 <_lseek_r+0x20>)
 8004e24:	4604      	mov	r4, r0
 8004e26:	4608      	mov	r0, r1
 8004e28:	4611      	mov	r1, r2
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	602a      	str	r2, [r5, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7fb fe26 	bl	8000a80 <_lseek>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_lseek_r+0x1e>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_lseek_r+0x1e>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	20000b08 	.word	0x20000b08

08004e44 <_read_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d07      	ldr	r5, [pc, #28]	@ (8004e64 <_read_r+0x20>)
 8004e48:	4604      	mov	r4, r0
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	602a      	str	r2, [r5, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f7fb fdb4 	bl	80009c0 <_read>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_read_r+0x1e>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_read_r+0x1e>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20000b08 	.word	0x20000b08

08004e68 <_write_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4d07      	ldr	r5, [pc, #28]	@ (8004e88 <_write_r+0x20>)
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	4608      	mov	r0, r1
 8004e70:	4611      	mov	r1, r2
 8004e72:	2200      	movs	r2, #0
 8004e74:	602a      	str	r2, [r5, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f7fb fdbf 	bl	80009fa <_write>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d102      	bne.n	8004e86 <_write_r+0x1e>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	b103      	cbz	r3, 8004e86 <_write_r+0x1e>
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	20000b08 	.word	0x20000b08

08004e8c <__errno>:
 8004e8c:	4b01      	ldr	r3, [pc, #4]	@ (8004e94 <__errno+0x8>)
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000048 	.word	0x20000048

08004e98 <__libc_init_array>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ed0 <__libc_init_array+0x38>)
 8004e9c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed4 <__libc_init_array+0x3c>)
 8004e9e:	1b64      	subs	r4, r4, r5
 8004ea0:	10a4      	asrs	r4, r4, #2
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	42a6      	cmp	r6, r4
 8004ea6:	d109      	bne.n	8004ebc <__libc_init_array+0x24>
 8004ea8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ed8 <__libc_init_array+0x40>)
 8004eaa:	4c0c      	ldr	r4, [pc, #48]	@ (8004edc <__libc_init_array+0x44>)
 8004eac:	f000 fd2c 	bl	8005908 <_init>
 8004eb0:	1b64      	subs	r4, r4, r5
 8004eb2:	10a4      	asrs	r4, r4, #2
 8004eb4:	2600      	movs	r6, #0
 8004eb6:	42a6      	cmp	r6, r4
 8004eb8:	d105      	bne.n	8004ec6 <__libc_init_array+0x2e>
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec0:	4798      	blx	r3
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7ee      	b.n	8004ea4 <__libc_init_array+0xc>
 8004ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eca:	4798      	blx	r3
 8004ecc:	3601      	adds	r6, #1
 8004ece:	e7f2      	b.n	8004eb6 <__libc_init_array+0x1e>
 8004ed0:	08005a4c 	.word	0x08005a4c
 8004ed4:	08005a4c 	.word	0x08005a4c
 8004ed8:	08005a4c 	.word	0x08005a4c
 8004edc:	08005a50 	.word	0x08005a50

08004ee0 <__retarget_lock_init_recursive>:
 8004ee0:	4770      	bx	lr

08004ee2 <__retarget_lock_acquire_recursive>:
 8004ee2:	4770      	bx	lr

08004ee4 <__retarget_lock_release_recursive>:
 8004ee4:	4770      	bx	lr
	...

08004ee8 <_free_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4605      	mov	r5, r0
 8004eec:	2900      	cmp	r1, #0
 8004eee:	d041      	beq.n	8004f74 <_free_r+0x8c>
 8004ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef4:	1f0c      	subs	r4, r1, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bfb8      	it	lt
 8004efa:	18e4      	addlt	r4, r4, r3
 8004efc:	f000 f8e8 	bl	80050d0 <__malloc_lock>
 8004f00:	4a1d      	ldr	r2, [pc, #116]	@ (8004f78 <_free_r+0x90>)
 8004f02:	6813      	ldr	r3, [r2, #0]
 8004f04:	b933      	cbnz	r3, 8004f14 <_free_r+0x2c>
 8004f06:	6063      	str	r3, [r4, #4]
 8004f08:	6014      	str	r4, [r2, #0]
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f10:	f000 b8e4 	b.w	80050dc <__malloc_unlock>
 8004f14:	42a3      	cmp	r3, r4
 8004f16:	d908      	bls.n	8004f2a <_free_r+0x42>
 8004f18:	6820      	ldr	r0, [r4, #0]
 8004f1a:	1821      	adds	r1, r4, r0
 8004f1c:	428b      	cmp	r3, r1
 8004f1e:	bf01      	itttt	eq
 8004f20:	6819      	ldreq	r1, [r3, #0]
 8004f22:	685b      	ldreq	r3, [r3, #4]
 8004f24:	1809      	addeq	r1, r1, r0
 8004f26:	6021      	streq	r1, [r4, #0]
 8004f28:	e7ed      	b.n	8004f06 <_free_r+0x1e>
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	b10b      	cbz	r3, 8004f34 <_free_r+0x4c>
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	d9fa      	bls.n	8004f2a <_free_r+0x42>
 8004f34:	6811      	ldr	r1, [r2, #0]
 8004f36:	1850      	adds	r0, r2, r1
 8004f38:	42a0      	cmp	r0, r4
 8004f3a:	d10b      	bne.n	8004f54 <_free_r+0x6c>
 8004f3c:	6820      	ldr	r0, [r4, #0]
 8004f3e:	4401      	add	r1, r0
 8004f40:	1850      	adds	r0, r2, r1
 8004f42:	4283      	cmp	r3, r0
 8004f44:	6011      	str	r1, [r2, #0]
 8004f46:	d1e0      	bne.n	8004f0a <_free_r+0x22>
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	6053      	str	r3, [r2, #4]
 8004f4e:	4408      	add	r0, r1
 8004f50:	6010      	str	r0, [r2, #0]
 8004f52:	e7da      	b.n	8004f0a <_free_r+0x22>
 8004f54:	d902      	bls.n	8004f5c <_free_r+0x74>
 8004f56:	230c      	movs	r3, #12
 8004f58:	602b      	str	r3, [r5, #0]
 8004f5a:	e7d6      	b.n	8004f0a <_free_r+0x22>
 8004f5c:	6820      	ldr	r0, [r4, #0]
 8004f5e:	1821      	adds	r1, r4, r0
 8004f60:	428b      	cmp	r3, r1
 8004f62:	bf04      	itt	eq
 8004f64:	6819      	ldreq	r1, [r3, #0]
 8004f66:	685b      	ldreq	r3, [r3, #4]
 8004f68:	6063      	str	r3, [r4, #4]
 8004f6a:	bf04      	itt	eq
 8004f6c:	1809      	addeq	r1, r1, r0
 8004f6e:	6021      	streq	r1, [r4, #0]
 8004f70:	6054      	str	r4, [r2, #4]
 8004f72:	e7ca      	b.n	8004f0a <_free_r+0x22>
 8004f74:	bd38      	pop	{r3, r4, r5, pc}
 8004f76:	bf00      	nop
 8004f78:	20000b14 	.word	0x20000b14

08004f7c <malloc>:
 8004f7c:	4b02      	ldr	r3, [pc, #8]	@ (8004f88 <malloc+0xc>)
 8004f7e:	4601      	mov	r1, r0
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	f000 b825 	b.w	8004fd0 <_malloc_r>
 8004f86:	bf00      	nop
 8004f88:	20000048 	.word	0x20000048

08004f8c <sbrk_aligned>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8004fcc <sbrk_aligned+0x40>)
 8004f90:	460c      	mov	r4, r1
 8004f92:	6831      	ldr	r1, [r6, #0]
 8004f94:	4605      	mov	r5, r0
 8004f96:	b911      	cbnz	r1, 8004f9e <sbrk_aligned+0x12>
 8004f98:	f000 fca6 	bl	80058e8 <_sbrk_r>
 8004f9c:	6030      	str	r0, [r6, #0]
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f000 fca1 	bl	80058e8 <_sbrk_r>
 8004fa6:	1c43      	adds	r3, r0, #1
 8004fa8:	d103      	bne.n	8004fb2 <sbrk_aligned+0x26>
 8004faa:	f04f 34ff 	mov.w	r4, #4294967295
 8004fae:	4620      	mov	r0, r4
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
 8004fb2:	1cc4      	adds	r4, r0, #3
 8004fb4:	f024 0403 	bic.w	r4, r4, #3
 8004fb8:	42a0      	cmp	r0, r4
 8004fba:	d0f8      	beq.n	8004fae <sbrk_aligned+0x22>
 8004fbc:	1a21      	subs	r1, r4, r0
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 fc92 	bl	80058e8 <_sbrk_r>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d1f2      	bne.n	8004fae <sbrk_aligned+0x22>
 8004fc8:	e7ef      	b.n	8004faa <sbrk_aligned+0x1e>
 8004fca:	bf00      	nop
 8004fcc:	20000b10 	.word	0x20000b10

08004fd0 <_malloc_r>:
 8004fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd4:	1ccd      	adds	r5, r1, #3
 8004fd6:	f025 0503 	bic.w	r5, r5, #3
 8004fda:	3508      	adds	r5, #8
 8004fdc:	2d0c      	cmp	r5, #12
 8004fde:	bf38      	it	cc
 8004fe0:	250c      	movcc	r5, #12
 8004fe2:	2d00      	cmp	r5, #0
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	db01      	blt.n	8004fec <_malloc_r+0x1c>
 8004fe8:	42a9      	cmp	r1, r5
 8004fea:	d904      	bls.n	8004ff6 <_malloc_r+0x26>
 8004fec:	230c      	movs	r3, #12
 8004fee:	6033      	str	r3, [r6, #0]
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050cc <_malloc_r+0xfc>
 8004ffa:	f000 f869 	bl	80050d0 <__malloc_lock>
 8004ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8005002:	461c      	mov	r4, r3
 8005004:	bb44      	cbnz	r4, 8005058 <_malloc_r+0x88>
 8005006:	4629      	mov	r1, r5
 8005008:	4630      	mov	r0, r6
 800500a:	f7ff ffbf 	bl	8004f8c <sbrk_aligned>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	4604      	mov	r4, r0
 8005012:	d158      	bne.n	80050c6 <_malloc_r+0xf6>
 8005014:	f8d8 4000 	ldr.w	r4, [r8]
 8005018:	4627      	mov	r7, r4
 800501a:	2f00      	cmp	r7, #0
 800501c:	d143      	bne.n	80050a6 <_malloc_r+0xd6>
 800501e:	2c00      	cmp	r4, #0
 8005020:	d04b      	beq.n	80050ba <_malloc_r+0xea>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	4639      	mov	r1, r7
 8005026:	4630      	mov	r0, r6
 8005028:	eb04 0903 	add.w	r9, r4, r3
 800502c:	f000 fc5c 	bl	80058e8 <_sbrk_r>
 8005030:	4581      	cmp	r9, r0
 8005032:	d142      	bne.n	80050ba <_malloc_r+0xea>
 8005034:	6821      	ldr	r1, [r4, #0]
 8005036:	1a6d      	subs	r5, r5, r1
 8005038:	4629      	mov	r1, r5
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff ffa6 	bl	8004f8c <sbrk_aligned>
 8005040:	3001      	adds	r0, #1
 8005042:	d03a      	beq.n	80050ba <_malloc_r+0xea>
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	442b      	add	r3, r5
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	f8d8 3000 	ldr.w	r3, [r8]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	bb62      	cbnz	r2, 80050ac <_malloc_r+0xdc>
 8005052:	f8c8 7000 	str.w	r7, [r8]
 8005056:	e00f      	b.n	8005078 <_malloc_r+0xa8>
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	1b52      	subs	r2, r2, r5
 800505c:	d420      	bmi.n	80050a0 <_malloc_r+0xd0>
 800505e:	2a0b      	cmp	r2, #11
 8005060:	d917      	bls.n	8005092 <_malloc_r+0xc2>
 8005062:	1961      	adds	r1, r4, r5
 8005064:	42a3      	cmp	r3, r4
 8005066:	6025      	str	r5, [r4, #0]
 8005068:	bf18      	it	ne
 800506a:	6059      	strne	r1, [r3, #4]
 800506c:	6863      	ldr	r3, [r4, #4]
 800506e:	bf08      	it	eq
 8005070:	f8c8 1000 	streq.w	r1, [r8]
 8005074:	5162      	str	r2, [r4, r5]
 8005076:	604b      	str	r3, [r1, #4]
 8005078:	4630      	mov	r0, r6
 800507a:	f000 f82f 	bl	80050dc <__malloc_unlock>
 800507e:	f104 000b 	add.w	r0, r4, #11
 8005082:	1d23      	adds	r3, r4, #4
 8005084:	f020 0007 	bic.w	r0, r0, #7
 8005088:	1ac2      	subs	r2, r0, r3
 800508a:	bf1c      	itt	ne
 800508c:	1a1b      	subne	r3, r3, r0
 800508e:	50a3      	strne	r3, [r4, r2]
 8005090:	e7af      	b.n	8004ff2 <_malloc_r+0x22>
 8005092:	6862      	ldr	r2, [r4, #4]
 8005094:	42a3      	cmp	r3, r4
 8005096:	bf0c      	ite	eq
 8005098:	f8c8 2000 	streq.w	r2, [r8]
 800509c:	605a      	strne	r2, [r3, #4]
 800509e:	e7eb      	b.n	8005078 <_malloc_r+0xa8>
 80050a0:	4623      	mov	r3, r4
 80050a2:	6864      	ldr	r4, [r4, #4]
 80050a4:	e7ae      	b.n	8005004 <_malloc_r+0x34>
 80050a6:	463c      	mov	r4, r7
 80050a8:	687f      	ldr	r7, [r7, #4]
 80050aa:	e7b6      	b.n	800501a <_malloc_r+0x4a>
 80050ac:	461a      	mov	r2, r3
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d1fb      	bne.n	80050ac <_malloc_r+0xdc>
 80050b4:	2300      	movs	r3, #0
 80050b6:	6053      	str	r3, [r2, #4]
 80050b8:	e7de      	b.n	8005078 <_malloc_r+0xa8>
 80050ba:	230c      	movs	r3, #12
 80050bc:	6033      	str	r3, [r6, #0]
 80050be:	4630      	mov	r0, r6
 80050c0:	f000 f80c 	bl	80050dc <__malloc_unlock>
 80050c4:	e794      	b.n	8004ff0 <_malloc_r+0x20>
 80050c6:	6005      	str	r5, [r0, #0]
 80050c8:	e7d6      	b.n	8005078 <_malloc_r+0xa8>
 80050ca:	bf00      	nop
 80050cc:	20000b14 	.word	0x20000b14

080050d0 <__malloc_lock>:
 80050d0:	4801      	ldr	r0, [pc, #4]	@ (80050d8 <__malloc_lock+0x8>)
 80050d2:	f7ff bf06 	b.w	8004ee2 <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	20000b0c 	.word	0x20000b0c

080050dc <__malloc_unlock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	@ (80050e4 <__malloc_unlock+0x8>)
 80050de:	f7ff bf01 	b.w	8004ee4 <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000b0c 	.word	0x20000b0c

080050e8 <__sfputc_r>:
 80050e8:	6893      	ldr	r3, [r2, #8]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	b410      	push	{r4}
 80050f0:	6093      	str	r3, [r2, #8]
 80050f2:	da08      	bge.n	8005106 <__sfputc_r+0x1e>
 80050f4:	6994      	ldr	r4, [r2, #24]
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	db01      	blt.n	80050fe <__sfputc_r+0x16>
 80050fa:	290a      	cmp	r1, #10
 80050fc:	d103      	bne.n	8005106 <__sfputc_r+0x1e>
 80050fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005102:	f7ff bde0 	b.w	8004cc6 <__swbuf_r>
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	1c58      	adds	r0, r3, #1
 800510a:	6010      	str	r0, [r2, #0]
 800510c:	7019      	strb	r1, [r3, #0]
 800510e:	4608      	mov	r0, r1
 8005110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005114:	4770      	bx	lr

08005116 <__sfputs_r>:
 8005116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005118:	4606      	mov	r6, r0
 800511a:	460f      	mov	r7, r1
 800511c:	4614      	mov	r4, r2
 800511e:	18d5      	adds	r5, r2, r3
 8005120:	42ac      	cmp	r4, r5
 8005122:	d101      	bne.n	8005128 <__sfputs_r+0x12>
 8005124:	2000      	movs	r0, #0
 8005126:	e007      	b.n	8005138 <__sfputs_r+0x22>
 8005128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800512c:	463a      	mov	r2, r7
 800512e:	4630      	mov	r0, r6
 8005130:	f7ff ffda 	bl	80050e8 <__sfputc_r>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d1f3      	bne.n	8005120 <__sfputs_r+0xa>
 8005138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800513c <_vfiprintf_r>:
 800513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	460d      	mov	r5, r1
 8005142:	b09d      	sub	sp, #116	@ 0x74
 8005144:	4614      	mov	r4, r2
 8005146:	4698      	mov	r8, r3
 8005148:	4606      	mov	r6, r0
 800514a:	b118      	cbz	r0, 8005154 <_vfiprintf_r+0x18>
 800514c:	6a03      	ldr	r3, [r0, #32]
 800514e:	b90b      	cbnz	r3, 8005154 <_vfiprintf_r+0x18>
 8005150:	f7ff fc14 	bl	800497c <__sinit>
 8005154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005156:	07d9      	lsls	r1, r3, #31
 8005158:	d405      	bmi.n	8005166 <_vfiprintf_r+0x2a>
 800515a:	89ab      	ldrh	r3, [r5, #12]
 800515c:	059a      	lsls	r2, r3, #22
 800515e:	d402      	bmi.n	8005166 <_vfiprintf_r+0x2a>
 8005160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005162:	f7ff febe 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 8005166:	89ab      	ldrh	r3, [r5, #12]
 8005168:	071b      	lsls	r3, r3, #28
 800516a:	d501      	bpl.n	8005170 <_vfiprintf_r+0x34>
 800516c:	692b      	ldr	r3, [r5, #16]
 800516e:	b99b      	cbnz	r3, 8005198 <_vfiprintf_r+0x5c>
 8005170:	4629      	mov	r1, r5
 8005172:	4630      	mov	r0, r6
 8005174:	f7ff fde6 	bl	8004d44 <__swsetup_r>
 8005178:	b170      	cbz	r0, 8005198 <_vfiprintf_r+0x5c>
 800517a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800517c:	07dc      	lsls	r4, r3, #31
 800517e:	d504      	bpl.n	800518a <_vfiprintf_r+0x4e>
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
 8005184:	b01d      	add	sp, #116	@ 0x74
 8005186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518a:	89ab      	ldrh	r3, [r5, #12]
 800518c:	0598      	lsls	r0, r3, #22
 800518e:	d4f7      	bmi.n	8005180 <_vfiprintf_r+0x44>
 8005190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005192:	f7ff fea7 	bl	8004ee4 <__retarget_lock_release_recursive>
 8005196:	e7f3      	b.n	8005180 <_vfiprintf_r+0x44>
 8005198:	2300      	movs	r3, #0
 800519a:	9309      	str	r3, [sp, #36]	@ 0x24
 800519c:	2320      	movs	r3, #32
 800519e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051a6:	2330      	movs	r3, #48	@ 0x30
 80051a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005358 <_vfiprintf_r+0x21c>
 80051ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051b0:	f04f 0901 	mov.w	r9, #1
 80051b4:	4623      	mov	r3, r4
 80051b6:	469a      	mov	sl, r3
 80051b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051bc:	b10a      	cbz	r2, 80051c2 <_vfiprintf_r+0x86>
 80051be:	2a25      	cmp	r2, #37	@ 0x25
 80051c0:	d1f9      	bne.n	80051b6 <_vfiprintf_r+0x7a>
 80051c2:	ebba 0b04 	subs.w	fp, sl, r4
 80051c6:	d00b      	beq.n	80051e0 <_vfiprintf_r+0xa4>
 80051c8:	465b      	mov	r3, fp
 80051ca:	4622      	mov	r2, r4
 80051cc:	4629      	mov	r1, r5
 80051ce:	4630      	mov	r0, r6
 80051d0:	f7ff ffa1 	bl	8005116 <__sfputs_r>
 80051d4:	3001      	adds	r0, #1
 80051d6:	f000 80a7 	beq.w	8005328 <_vfiprintf_r+0x1ec>
 80051da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051dc:	445a      	add	r2, fp
 80051de:	9209      	str	r2, [sp, #36]	@ 0x24
 80051e0:	f89a 3000 	ldrb.w	r3, [sl]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 809f 	beq.w	8005328 <_vfiprintf_r+0x1ec>
 80051ea:	2300      	movs	r3, #0
 80051ec:	f04f 32ff 	mov.w	r2, #4294967295
 80051f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051f4:	f10a 0a01 	add.w	sl, sl, #1
 80051f8:	9304      	str	r3, [sp, #16]
 80051fa:	9307      	str	r3, [sp, #28]
 80051fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005200:	931a      	str	r3, [sp, #104]	@ 0x68
 8005202:	4654      	mov	r4, sl
 8005204:	2205      	movs	r2, #5
 8005206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520a:	4853      	ldr	r0, [pc, #332]	@ (8005358 <_vfiprintf_r+0x21c>)
 800520c:	f7fa ffe0 	bl	80001d0 <memchr>
 8005210:	9a04      	ldr	r2, [sp, #16]
 8005212:	b9d8      	cbnz	r0, 800524c <_vfiprintf_r+0x110>
 8005214:	06d1      	lsls	r1, r2, #27
 8005216:	bf44      	itt	mi
 8005218:	2320      	movmi	r3, #32
 800521a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800521e:	0713      	lsls	r3, r2, #28
 8005220:	bf44      	itt	mi
 8005222:	232b      	movmi	r3, #43	@ 0x2b
 8005224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005228:	f89a 3000 	ldrb.w	r3, [sl]
 800522c:	2b2a      	cmp	r3, #42	@ 0x2a
 800522e:	d015      	beq.n	800525c <_vfiprintf_r+0x120>
 8005230:	9a07      	ldr	r2, [sp, #28]
 8005232:	4654      	mov	r4, sl
 8005234:	2000      	movs	r0, #0
 8005236:	f04f 0c0a 	mov.w	ip, #10
 800523a:	4621      	mov	r1, r4
 800523c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005240:	3b30      	subs	r3, #48	@ 0x30
 8005242:	2b09      	cmp	r3, #9
 8005244:	d94b      	bls.n	80052de <_vfiprintf_r+0x1a2>
 8005246:	b1b0      	cbz	r0, 8005276 <_vfiprintf_r+0x13a>
 8005248:	9207      	str	r2, [sp, #28]
 800524a:	e014      	b.n	8005276 <_vfiprintf_r+0x13a>
 800524c:	eba0 0308 	sub.w	r3, r0, r8
 8005250:	fa09 f303 	lsl.w	r3, r9, r3
 8005254:	4313      	orrs	r3, r2
 8005256:	9304      	str	r3, [sp, #16]
 8005258:	46a2      	mov	sl, r4
 800525a:	e7d2      	b.n	8005202 <_vfiprintf_r+0xc6>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	1d19      	adds	r1, r3, #4
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	9103      	str	r1, [sp, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	bfbb      	ittet	lt
 8005268:	425b      	neglt	r3, r3
 800526a:	f042 0202 	orrlt.w	r2, r2, #2
 800526e:	9307      	strge	r3, [sp, #28]
 8005270:	9307      	strlt	r3, [sp, #28]
 8005272:	bfb8      	it	lt
 8005274:	9204      	strlt	r2, [sp, #16]
 8005276:	7823      	ldrb	r3, [r4, #0]
 8005278:	2b2e      	cmp	r3, #46	@ 0x2e
 800527a:	d10a      	bne.n	8005292 <_vfiprintf_r+0x156>
 800527c:	7863      	ldrb	r3, [r4, #1]
 800527e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005280:	d132      	bne.n	80052e8 <_vfiprintf_r+0x1ac>
 8005282:	9b03      	ldr	r3, [sp, #12]
 8005284:	1d1a      	adds	r2, r3, #4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	9203      	str	r2, [sp, #12]
 800528a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800528e:	3402      	adds	r4, #2
 8005290:	9305      	str	r3, [sp, #20]
 8005292:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005368 <_vfiprintf_r+0x22c>
 8005296:	7821      	ldrb	r1, [r4, #0]
 8005298:	2203      	movs	r2, #3
 800529a:	4650      	mov	r0, sl
 800529c:	f7fa ff98 	bl	80001d0 <memchr>
 80052a0:	b138      	cbz	r0, 80052b2 <_vfiprintf_r+0x176>
 80052a2:	9b04      	ldr	r3, [sp, #16]
 80052a4:	eba0 000a 	sub.w	r0, r0, sl
 80052a8:	2240      	movs	r2, #64	@ 0x40
 80052aa:	4082      	lsls	r2, r0
 80052ac:	4313      	orrs	r3, r2
 80052ae:	3401      	adds	r4, #1
 80052b0:	9304      	str	r3, [sp, #16]
 80052b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b6:	4829      	ldr	r0, [pc, #164]	@ (800535c <_vfiprintf_r+0x220>)
 80052b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052bc:	2206      	movs	r2, #6
 80052be:	f7fa ff87 	bl	80001d0 <memchr>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d03f      	beq.n	8005346 <_vfiprintf_r+0x20a>
 80052c6:	4b26      	ldr	r3, [pc, #152]	@ (8005360 <_vfiprintf_r+0x224>)
 80052c8:	bb1b      	cbnz	r3, 8005312 <_vfiprintf_r+0x1d6>
 80052ca:	9b03      	ldr	r3, [sp, #12]
 80052cc:	3307      	adds	r3, #7
 80052ce:	f023 0307 	bic.w	r3, r3, #7
 80052d2:	3308      	adds	r3, #8
 80052d4:	9303      	str	r3, [sp, #12]
 80052d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d8:	443b      	add	r3, r7
 80052da:	9309      	str	r3, [sp, #36]	@ 0x24
 80052dc:	e76a      	b.n	80051b4 <_vfiprintf_r+0x78>
 80052de:	fb0c 3202 	mla	r2, ip, r2, r3
 80052e2:	460c      	mov	r4, r1
 80052e4:	2001      	movs	r0, #1
 80052e6:	e7a8      	b.n	800523a <_vfiprintf_r+0xfe>
 80052e8:	2300      	movs	r3, #0
 80052ea:	3401      	adds	r4, #1
 80052ec:	9305      	str	r3, [sp, #20]
 80052ee:	4619      	mov	r1, r3
 80052f0:	f04f 0c0a 	mov.w	ip, #10
 80052f4:	4620      	mov	r0, r4
 80052f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052fa:	3a30      	subs	r2, #48	@ 0x30
 80052fc:	2a09      	cmp	r2, #9
 80052fe:	d903      	bls.n	8005308 <_vfiprintf_r+0x1cc>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0c6      	beq.n	8005292 <_vfiprintf_r+0x156>
 8005304:	9105      	str	r1, [sp, #20]
 8005306:	e7c4      	b.n	8005292 <_vfiprintf_r+0x156>
 8005308:	fb0c 2101 	mla	r1, ip, r1, r2
 800530c:	4604      	mov	r4, r0
 800530e:	2301      	movs	r3, #1
 8005310:	e7f0      	b.n	80052f4 <_vfiprintf_r+0x1b8>
 8005312:	ab03      	add	r3, sp, #12
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	462a      	mov	r2, r5
 8005318:	4b12      	ldr	r3, [pc, #72]	@ (8005364 <_vfiprintf_r+0x228>)
 800531a:	a904      	add	r1, sp, #16
 800531c:	4630      	mov	r0, r6
 800531e:	f3af 8000 	nop.w
 8005322:	4607      	mov	r7, r0
 8005324:	1c78      	adds	r0, r7, #1
 8005326:	d1d6      	bne.n	80052d6 <_vfiprintf_r+0x19a>
 8005328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800532a:	07d9      	lsls	r1, r3, #31
 800532c:	d405      	bmi.n	800533a <_vfiprintf_r+0x1fe>
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	059a      	lsls	r2, r3, #22
 8005332:	d402      	bmi.n	800533a <_vfiprintf_r+0x1fe>
 8005334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005336:	f7ff fdd5 	bl	8004ee4 <__retarget_lock_release_recursive>
 800533a:	89ab      	ldrh	r3, [r5, #12]
 800533c:	065b      	lsls	r3, r3, #25
 800533e:	f53f af1f 	bmi.w	8005180 <_vfiprintf_r+0x44>
 8005342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005344:	e71e      	b.n	8005184 <_vfiprintf_r+0x48>
 8005346:	ab03      	add	r3, sp, #12
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	462a      	mov	r2, r5
 800534c:	4b05      	ldr	r3, [pc, #20]	@ (8005364 <_vfiprintf_r+0x228>)
 800534e:	a904      	add	r1, sp, #16
 8005350:	4630      	mov	r0, r6
 8005352:	f000 f879 	bl	8005448 <_printf_i>
 8005356:	e7e4      	b.n	8005322 <_vfiprintf_r+0x1e6>
 8005358:	08005a10 	.word	0x08005a10
 800535c:	08005a1a 	.word	0x08005a1a
 8005360:	00000000 	.word	0x00000000
 8005364:	08005117 	.word	0x08005117
 8005368:	08005a16 	.word	0x08005a16

0800536c <_printf_common>:
 800536c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	4616      	mov	r6, r2
 8005372:	4698      	mov	r8, r3
 8005374:	688a      	ldr	r2, [r1, #8]
 8005376:	690b      	ldr	r3, [r1, #16]
 8005378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800537c:	4293      	cmp	r3, r2
 800537e:	bfb8      	it	lt
 8005380:	4613      	movlt	r3, r2
 8005382:	6033      	str	r3, [r6, #0]
 8005384:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005388:	4607      	mov	r7, r0
 800538a:	460c      	mov	r4, r1
 800538c:	b10a      	cbz	r2, 8005392 <_printf_common+0x26>
 800538e:	3301      	adds	r3, #1
 8005390:	6033      	str	r3, [r6, #0]
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	0699      	lsls	r1, r3, #26
 8005396:	bf42      	ittt	mi
 8005398:	6833      	ldrmi	r3, [r6, #0]
 800539a:	3302      	addmi	r3, #2
 800539c:	6033      	strmi	r3, [r6, #0]
 800539e:	6825      	ldr	r5, [r4, #0]
 80053a0:	f015 0506 	ands.w	r5, r5, #6
 80053a4:	d106      	bne.n	80053b4 <_printf_common+0x48>
 80053a6:	f104 0a19 	add.w	sl, r4, #25
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	6832      	ldr	r2, [r6, #0]
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	42ab      	cmp	r3, r5
 80053b2:	dc26      	bgt.n	8005402 <_printf_common+0x96>
 80053b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	3b00      	subs	r3, #0
 80053bc:	bf18      	it	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	0692      	lsls	r2, r2, #26
 80053c2:	d42b      	bmi.n	800541c <_printf_common+0xb0>
 80053c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053c8:	4641      	mov	r1, r8
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c8      	blx	r9
 80053ce:	3001      	adds	r0, #1
 80053d0:	d01e      	beq.n	8005410 <_printf_common+0xa4>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	6922      	ldr	r2, [r4, #16]
 80053d6:	f003 0306 	and.w	r3, r3, #6
 80053da:	2b04      	cmp	r3, #4
 80053dc:	bf02      	ittt	eq
 80053de:	68e5      	ldreq	r5, [r4, #12]
 80053e0:	6833      	ldreq	r3, [r6, #0]
 80053e2:	1aed      	subeq	r5, r5, r3
 80053e4:	68a3      	ldr	r3, [r4, #8]
 80053e6:	bf0c      	ite	eq
 80053e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053ec:	2500      	movne	r5, #0
 80053ee:	4293      	cmp	r3, r2
 80053f0:	bfc4      	itt	gt
 80053f2:	1a9b      	subgt	r3, r3, r2
 80053f4:	18ed      	addgt	r5, r5, r3
 80053f6:	2600      	movs	r6, #0
 80053f8:	341a      	adds	r4, #26
 80053fa:	42b5      	cmp	r5, r6
 80053fc:	d11a      	bne.n	8005434 <_printf_common+0xc8>
 80053fe:	2000      	movs	r0, #0
 8005400:	e008      	b.n	8005414 <_printf_common+0xa8>
 8005402:	2301      	movs	r3, #1
 8005404:	4652      	mov	r2, sl
 8005406:	4641      	mov	r1, r8
 8005408:	4638      	mov	r0, r7
 800540a:	47c8      	blx	r9
 800540c:	3001      	adds	r0, #1
 800540e:	d103      	bne.n	8005418 <_printf_common+0xac>
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005418:	3501      	adds	r5, #1
 800541a:	e7c6      	b.n	80053aa <_printf_common+0x3e>
 800541c:	18e1      	adds	r1, r4, r3
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	2030      	movs	r0, #48	@ 0x30
 8005422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005426:	4422      	add	r2, r4
 8005428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800542c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005430:	3302      	adds	r3, #2
 8005432:	e7c7      	b.n	80053c4 <_printf_common+0x58>
 8005434:	2301      	movs	r3, #1
 8005436:	4622      	mov	r2, r4
 8005438:	4641      	mov	r1, r8
 800543a:	4638      	mov	r0, r7
 800543c:	47c8      	blx	r9
 800543e:	3001      	adds	r0, #1
 8005440:	d0e6      	beq.n	8005410 <_printf_common+0xa4>
 8005442:	3601      	adds	r6, #1
 8005444:	e7d9      	b.n	80053fa <_printf_common+0x8e>
	...

08005448 <_printf_i>:
 8005448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	7e0f      	ldrb	r7, [r1, #24]
 800544e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005450:	2f78      	cmp	r7, #120	@ 0x78
 8005452:	4691      	mov	r9, r2
 8005454:	4680      	mov	r8, r0
 8005456:	460c      	mov	r4, r1
 8005458:	469a      	mov	sl, r3
 800545a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800545e:	d807      	bhi.n	8005470 <_printf_i+0x28>
 8005460:	2f62      	cmp	r7, #98	@ 0x62
 8005462:	d80a      	bhi.n	800547a <_printf_i+0x32>
 8005464:	2f00      	cmp	r7, #0
 8005466:	f000 80d2 	beq.w	800560e <_printf_i+0x1c6>
 800546a:	2f58      	cmp	r7, #88	@ 0x58
 800546c:	f000 80b9 	beq.w	80055e2 <_printf_i+0x19a>
 8005470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005478:	e03a      	b.n	80054f0 <_printf_i+0xa8>
 800547a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800547e:	2b15      	cmp	r3, #21
 8005480:	d8f6      	bhi.n	8005470 <_printf_i+0x28>
 8005482:	a101      	add	r1, pc, #4	@ (adr r1, 8005488 <_printf_i+0x40>)
 8005484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005488:	080054e1 	.word	0x080054e1
 800548c:	080054f5 	.word	0x080054f5
 8005490:	08005471 	.word	0x08005471
 8005494:	08005471 	.word	0x08005471
 8005498:	08005471 	.word	0x08005471
 800549c:	08005471 	.word	0x08005471
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	08005471 	.word	0x08005471
 80054a8:	08005471 	.word	0x08005471
 80054ac:	08005471 	.word	0x08005471
 80054b0:	08005471 	.word	0x08005471
 80054b4:	080055f5 	.word	0x080055f5
 80054b8:	0800551f 	.word	0x0800551f
 80054bc:	080055af 	.word	0x080055af
 80054c0:	08005471 	.word	0x08005471
 80054c4:	08005471 	.word	0x08005471
 80054c8:	08005617 	.word	0x08005617
 80054cc:	08005471 	.word	0x08005471
 80054d0:	0800551f 	.word	0x0800551f
 80054d4:	08005471 	.word	0x08005471
 80054d8:	08005471 	.word	0x08005471
 80054dc:	080055b7 	.word	0x080055b7
 80054e0:	6833      	ldr	r3, [r6, #0]
 80054e2:	1d1a      	adds	r2, r3, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6032      	str	r2, [r6, #0]
 80054e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054f0:	2301      	movs	r3, #1
 80054f2:	e09d      	b.n	8005630 <_printf_i+0x1e8>
 80054f4:	6833      	ldr	r3, [r6, #0]
 80054f6:	6820      	ldr	r0, [r4, #0]
 80054f8:	1d19      	adds	r1, r3, #4
 80054fa:	6031      	str	r1, [r6, #0]
 80054fc:	0606      	lsls	r6, r0, #24
 80054fe:	d501      	bpl.n	8005504 <_printf_i+0xbc>
 8005500:	681d      	ldr	r5, [r3, #0]
 8005502:	e003      	b.n	800550c <_printf_i+0xc4>
 8005504:	0645      	lsls	r5, r0, #25
 8005506:	d5fb      	bpl.n	8005500 <_printf_i+0xb8>
 8005508:	f9b3 5000 	ldrsh.w	r5, [r3]
 800550c:	2d00      	cmp	r5, #0
 800550e:	da03      	bge.n	8005518 <_printf_i+0xd0>
 8005510:	232d      	movs	r3, #45	@ 0x2d
 8005512:	426d      	negs	r5, r5
 8005514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005518:	4859      	ldr	r0, [pc, #356]	@ (8005680 <_printf_i+0x238>)
 800551a:	230a      	movs	r3, #10
 800551c:	e011      	b.n	8005542 <_printf_i+0xfa>
 800551e:	6821      	ldr	r1, [r4, #0]
 8005520:	6833      	ldr	r3, [r6, #0]
 8005522:	0608      	lsls	r0, r1, #24
 8005524:	f853 5b04 	ldr.w	r5, [r3], #4
 8005528:	d402      	bmi.n	8005530 <_printf_i+0xe8>
 800552a:	0649      	lsls	r1, r1, #25
 800552c:	bf48      	it	mi
 800552e:	b2ad      	uxthmi	r5, r5
 8005530:	2f6f      	cmp	r7, #111	@ 0x6f
 8005532:	4853      	ldr	r0, [pc, #332]	@ (8005680 <_printf_i+0x238>)
 8005534:	6033      	str	r3, [r6, #0]
 8005536:	bf14      	ite	ne
 8005538:	230a      	movne	r3, #10
 800553a:	2308      	moveq	r3, #8
 800553c:	2100      	movs	r1, #0
 800553e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005542:	6866      	ldr	r6, [r4, #4]
 8005544:	60a6      	str	r6, [r4, #8]
 8005546:	2e00      	cmp	r6, #0
 8005548:	bfa2      	ittt	ge
 800554a:	6821      	ldrge	r1, [r4, #0]
 800554c:	f021 0104 	bicge.w	r1, r1, #4
 8005550:	6021      	strge	r1, [r4, #0]
 8005552:	b90d      	cbnz	r5, 8005558 <_printf_i+0x110>
 8005554:	2e00      	cmp	r6, #0
 8005556:	d04b      	beq.n	80055f0 <_printf_i+0x1a8>
 8005558:	4616      	mov	r6, r2
 800555a:	fbb5 f1f3 	udiv	r1, r5, r3
 800555e:	fb03 5711 	mls	r7, r3, r1, r5
 8005562:	5dc7      	ldrb	r7, [r0, r7]
 8005564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005568:	462f      	mov	r7, r5
 800556a:	42bb      	cmp	r3, r7
 800556c:	460d      	mov	r5, r1
 800556e:	d9f4      	bls.n	800555a <_printf_i+0x112>
 8005570:	2b08      	cmp	r3, #8
 8005572:	d10b      	bne.n	800558c <_printf_i+0x144>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	07df      	lsls	r7, r3, #31
 8005578:	d508      	bpl.n	800558c <_printf_i+0x144>
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	6861      	ldr	r1, [r4, #4]
 800557e:	4299      	cmp	r1, r3
 8005580:	bfde      	ittt	le
 8005582:	2330      	movle	r3, #48	@ 0x30
 8005584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800558c:	1b92      	subs	r2, r2, r6
 800558e:	6122      	str	r2, [r4, #16]
 8005590:	f8cd a000 	str.w	sl, [sp]
 8005594:	464b      	mov	r3, r9
 8005596:	aa03      	add	r2, sp, #12
 8005598:	4621      	mov	r1, r4
 800559a:	4640      	mov	r0, r8
 800559c:	f7ff fee6 	bl	800536c <_printf_common>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d14a      	bne.n	800563a <_printf_i+0x1f2>
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	b004      	add	sp, #16
 80055aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	f043 0320 	orr.w	r3, r3, #32
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	4833      	ldr	r0, [pc, #204]	@ (8005684 <_printf_i+0x23c>)
 80055b8:	2778      	movs	r7, #120	@ 0x78
 80055ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	6831      	ldr	r1, [r6, #0]
 80055c2:	061f      	lsls	r7, r3, #24
 80055c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80055c8:	d402      	bmi.n	80055d0 <_printf_i+0x188>
 80055ca:	065f      	lsls	r7, r3, #25
 80055cc:	bf48      	it	mi
 80055ce:	b2ad      	uxthmi	r5, r5
 80055d0:	6031      	str	r1, [r6, #0]
 80055d2:	07d9      	lsls	r1, r3, #31
 80055d4:	bf44      	itt	mi
 80055d6:	f043 0320 	orrmi.w	r3, r3, #32
 80055da:	6023      	strmi	r3, [r4, #0]
 80055dc:	b11d      	cbz	r5, 80055e6 <_printf_i+0x19e>
 80055de:	2310      	movs	r3, #16
 80055e0:	e7ac      	b.n	800553c <_printf_i+0xf4>
 80055e2:	4827      	ldr	r0, [pc, #156]	@ (8005680 <_printf_i+0x238>)
 80055e4:	e7e9      	b.n	80055ba <_printf_i+0x172>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	f023 0320 	bic.w	r3, r3, #32
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	e7f6      	b.n	80055de <_printf_i+0x196>
 80055f0:	4616      	mov	r6, r2
 80055f2:	e7bd      	b.n	8005570 <_printf_i+0x128>
 80055f4:	6833      	ldr	r3, [r6, #0]
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	6961      	ldr	r1, [r4, #20]
 80055fa:	1d18      	adds	r0, r3, #4
 80055fc:	6030      	str	r0, [r6, #0]
 80055fe:	062e      	lsls	r6, r5, #24
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	d501      	bpl.n	8005608 <_printf_i+0x1c0>
 8005604:	6019      	str	r1, [r3, #0]
 8005606:	e002      	b.n	800560e <_printf_i+0x1c6>
 8005608:	0668      	lsls	r0, r5, #25
 800560a:	d5fb      	bpl.n	8005604 <_printf_i+0x1bc>
 800560c:	8019      	strh	r1, [r3, #0]
 800560e:	2300      	movs	r3, #0
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	4616      	mov	r6, r2
 8005614:	e7bc      	b.n	8005590 <_printf_i+0x148>
 8005616:	6833      	ldr	r3, [r6, #0]
 8005618:	1d1a      	adds	r2, r3, #4
 800561a:	6032      	str	r2, [r6, #0]
 800561c:	681e      	ldr	r6, [r3, #0]
 800561e:	6862      	ldr	r2, [r4, #4]
 8005620:	2100      	movs	r1, #0
 8005622:	4630      	mov	r0, r6
 8005624:	f7fa fdd4 	bl	80001d0 <memchr>
 8005628:	b108      	cbz	r0, 800562e <_printf_i+0x1e6>
 800562a:	1b80      	subs	r0, r0, r6
 800562c:	6060      	str	r0, [r4, #4]
 800562e:	6863      	ldr	r3, [r4, #4]
 8005630:	6123      	str	r3, [r4, #16]
 8005632:	2300      	movs	r3, #0
 8005634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005638:	e7aa      	b.n	8005590 <_printf_i+0x148>
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	4632      	mov	r2, r6
 800563e:	4649      	mov	r1, r9
 8005640:	4640      	mov	r0, r8
 8005642:	47d0      	blx	sl
 8005644:	3001      	adds	r0, #1
 8005646:	d0ad      	beq.n	80055a4 <_printf_i+0x15c>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	079b      	lsls	r3, r3, #30
 800564c:	d413      	bmi.n	8005676 <_printf_i+0x22e>
 800564e:	68e0      	ldr	r0, [r4, #12]
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	4298      	cmp	r0, r3
 8005654:	bfb8      	it	lt
 8005656:	4618      	movlt	r0, r3
 8005658:	e7a6      	b.n	80055a8 <_printf_i+0x160>
 800565a:	2301      	movs	r3, #1
 800565c:	4632      	mov	r2, r6
 800565e:	4649      	mov	r1, r9
 8005660:	4640      	mov	r0, r8
 8005662:	47d0      	blx	sl
 8005664:	3001      	adds	r0, #1
 8005666:	d09d      	beq.n	80055a4 <_printf_i+0x15c>
 8005668:	3501      	adds	r5, #1
 800566a:	68e3      	ldr	r3, [r4, #12]
 800566c:	9903      	ldr	r1, [sp, #12]
 800566e:	1a5b      	subs	r3, r3, r1
 8005670:	42ab      	cmp	r3, r5
 8005672:	dcf2      	bgt.n	800565a <_printf_i+0x212>
 8005674:	e7eb      	b.n	800564e <_printf_i+0x206>
 8005676:	2500      	movs	r5, #0
 8005678:	f104 0619 	add.w	r6, r4, #25
 800567c:	e7f5      	b.n	800566a <_printf_i+0x222>
 800567e:	bf00      	nop
 8005680:	08005a21 	.word	0x08005a21
 8005684:	08005a32 	.word	0x08005a32

08005688 <__sflush_r>:
 8005688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005690:	0716      	lsls	r6, r2, #28
 8005692:	4605      	mov	r5, r0
 8005694:	460c      	mov	r4, r1
 8005696:	d454      	bmi.n	8005742 <__sflush_r+0xba>
 8005698:	684b      	ldr	r3, [r1, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	dc02      	bgt.n	80056a4 <__sflush_r+0x1c>
 800569e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	dd48      	ble.n	8005736 <__sflush_r+0xae>
 80056a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	d045      	beq.n	8005736 <__sflush_r+0xae>
 80056aa:	2300      	movs	r3, #0
 80056ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056b0:	682f      	ldr	r7, [r5, #0]
 80056b2:	6a21      	ldr	r1, [r4, #32]
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	d030      	beq.n	800571a <__sflush_r+0x92>
 80056b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	0759      	lsls	r1, r3, #29
 80056be:	d505      	bpl.n	80056cc <__sflush_r+0x44>
 80056c0:	6863      	ldr	r3, [r4, #4]
 80056c2:	1ad2      	subs	r2, r2, r3
 80056c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80056c6:	b10b      	cbz	r3, 80056cc <__sflush_r+0x44>
 80056c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056ca:	1ad2      	subs	r2, r2, r3
 80056cc:	2300      	movs	r3, #0
 80056ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056d0:	6a21      	ldr	r1, [r4, #32]
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b0      	blx	r6
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	d106      	bne.n	80056ea <__sflush_r+0x62>
 80056dc:	6829      	ldr	r1, [r5, #0]
 80056de:	291d      	cmp	r1, #29
 80056e0:	d82b      	bhi.n	800573a <__sflush_r+0xb2>
 80056e2:	4a2a      	ldr	r2, [pc, #168]	@ (800578c <__sflush_r+0x104>)
 80056e4:	410a      	asrs	r2, r1
 80056e6:	07d6      	lsls	r6, r2, #31
 80056e8:	d427      	bmi.n	800573a <__sflush_r+0xb2>
 80056ea:	2200      	movs	r2, #0
 80056ec:	6062      	str	r2, [r4, #4]
 80056ee:	04d9      	lsls	r1, r3, #19
 80056f0:	6922      	ldr	r2, [r4, #16]
 80056f2:	6022      	str	r2, [r4, #0]
 80056f4:	d504      	bpl.n	8005700 <__sflush_r+0x78>
 80056f6:	1c42      	adds	r2, r0, #1
 80056f8:	d101      	bne.n	80056fe <__sflush_r+0x76>
 80056fa:	682b      	ldr	r3, [r5, #0]
 80056fc:	b903      	cbnz	r3, 8005700 <__sflush_r+0x78>
 80056fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005702:	602f      	str	r7, [r5, #0]
 8005704:	b1b9      	cbz	r1, 8005736 <__sflush_r+0xae>
 8005706:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800570a:	4299      	cmp	r1, r3
 800570c:	d002      	beq.n	8005714 <__sflush_r+0x8c>
 800570e:	4628      	mov	r0, r5
 8005710:	f7ff fbea 	bl	8004ee8 <_free_r>
 8005714:	2300      	movs	r3, #0
 8005716:	6363      	str	r3, [r4, #52]	@ 0x34
 8005718:	e00d      	b.n	8005736 <__sflush_r+0xae>
 800571a:	2301      	movs	r3, #1
 800571c:	4628      	mov	r0, r5
 800571e:	47b0      	blx	r6
 8005720:	4602      	mov	r2, r0
 8005722:	1c50      	adds	r0, r2, #1
 8005724:	d1c9      	bne.n	80056ba <__sflush_r+0x32>
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0c6      	beq.n	80056ba <__sflush_r+0x32>
 800572c:	2b1d      	cmp	r3, #29
 800572e:	d001      	beq.n	8005734 <__sflush_r+0xac>
 8005730:	2b16      	cmp	r3, #22
 8005732:	d11e      	bne.n	8005772 <__sflush_r+0xea>
 8005734:	602f      	str	r7, [r5, #0]
 8005736:	2000      	movs	r0, #0
 8005738:	e022      	b.n	8005780 <__sflush_r+0xf8>
 800573a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800573e:	b21b      	sxth	r3, r3
 8005740:	e01b      	b.n	800577a <__sflush_r+0xf2>
 8005742:	690f      	ldr	r7, [r1, #16]
 8005744:	2f00      	cmp	r7, #0
 8005746:	d0f6      	beq.n	8005736 <__sflush_r+0xae>
 8005748:	0793      	lsls	r3, r2, #30
 800574a:	680e      	ldr	r6, [r1, #0]
 800574c:	bf08      	it	eq
 800574e:	694b      	ldreq	r3, [r1, #20]
 8005750:	600f      	str	r7, [r1, #0]
 8005752:	bf18      	it	ne
 8005754:	2300      	movne	r3, #0
 8005756:	eba6 0807 	sub.w	r8, r6, r7
 800575a:	608b      	str	r3, [r1, #8]
 800575c:	f1b8 0f00 	cmp.w	r8, #0
 8005760:	dde9      	ble.n	8005736 <__sflush_r+0xae>
 8005762:	6a21      	ldr	r1, [r4, #32]
 8005764:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005766:	4643      	mov	r3, r8
 8005768:	463a      	mov	r2, r7
 800576a:	4628      	mov	r0, r5
 800576c:	47b0      	blx	r6
 800576e:	2800      	cmp	r0, #0
 8005770:	dc08      	bgt.n	8005784 <__sflush_r+0xfc>
 8005772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800577a:	81a3      	strh	r3, [r4, #12]
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005784:	4407      	add	r7, r0
 8005786:	eba8 0800 	sub.w	r8, r8, r0
 800578a:	e7e7      	b.n	800575c <__sflush_r+0xd4>
 800578c:	dfbffffe 	.word	0xdfbffffe

08005790 <_fflush_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	690b      	ldr	r3, [r1, #16]
 8005794:	4605      	mov	r5, r0
 8005796:	460c      	mov	r4, r1
 8005798:	b913      	cbnz	r3, 80057a0 <_fflush_r+0x10>
 800579a:	2500      	movs	r5, #0
 800579c:	4628      	mov	r0, r5
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	b118      	cbz	r0, 80057aa <_fflush_r+0x1a>
 80057a2:	6a03      	ldr	r3, [r0, #32]
 80057a4:	b90b      	cbnz	r3, 80057aa <_fflush_r+0x1a>
 80057a6:	f7ff f8e9 	bl	800497c <__sinit>
 80057aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f3      	beq.n	800579a <_fflush_r+0xa>
 80057b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057b4:	07d0      	lsls	r0, r2, #31
 80057b6:	d404      	bmi.n	80057c2 <_fflush_r+0x32>
 80057b8:	0599      	lsls	r1, r3, #22
 80057ba:	d402      	bmi.n	80057c2 <_fflush_r+0x32>
 80057bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057be:	f7ff fb90 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 80057c2:	4628      	mov	r0, r5
 80057c4:	4621      	mov	r1, r4
 80057c6:	f7ff ff5f 	bl	8005688 <__sflush_r>
 80057ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057cc:	07da      	lsls	r2, r3, #31
 80057ce:	4605      	mov	r5, r0
 80057d0:	d4e4      	bmi.n	800579c <_fflush_r+0xc>
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	059b      	lsls	r3, r3, #22
 80057d6:	d4e1      	bmi.n	800579c <_fflush_r+0xc>
 80057d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057da:	f7ff fb83 	bl	8004ee4 <__retarget_lock_release_recursive>
 80057de:	e7dd      	b.n	800579c <_fflush_r+0xc>

080057e0 <__swhatbuf_r>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	460c      	mov	r4, r1
 80057e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e8:	2900      	cmp	r1, #0
 80057ea:	b096      	sub	sp, #88	@ 0x58
 80057ec:	4615      	mov	r5, r2
 80057ee:	461e      	mov	r6, r3
 80057f0:	da0d      	bge.n	800580e <__swhatbuf_r+0x2e>
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057f8:	f04f 0100 	mov.w	r1, #0
 80057fc:	bf14      	ite	ne
 80057fe:	2340      	movne	r3, #64	@ 0x40
 8005800:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005804:	2000      	movs	r0, #0
 8005806:	6031      	str	r1, [r6, #0]
 8005808:	602b      	str	r3, [r5, #0]
 800580a:	b016      	add	sp, #88	@ 0x58
 800580c:	bd70      	pop	{r4, r5, r6, pc}
 800580e:	466a      	mov	r2, sp
 8005810:	f000 f848 	bl	80058a4 <_fstat_r>
 8005814:	2800      	cmp	r0, #0
 8005816:	dbec      	blt.n	80057f2 <__swhatbuf_r+0x12>
 8005818:	9901      	ldr	r1, [sp, #4]
 800581a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800581e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005822:	4259      	negs	r1, r3
 8005824:	4159      	adcs	r1, r3
 8005826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800582a:	e7eb      	b.n	8005804 <__swhatbuf_r+0x24>

0800582c <__smakebuf_r>:
 800582c:	898b      	ldrh	r3, [r1, #12]
 800582e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005830:	079d      	lsls	r5, r3, #30
 8005832:	4606      	mov	r6, r0
 8005834:	460c      	mov	r4, r1
 8005836:	d507      	bpl.n	8005848 <__smakebuf_r+0x1c>
 8005838:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	6123      	str	r3, [r4, #16]
 8005840:	2301      	movs	r3, #1
 8005842:	6163      	str	r3, [r4, #20]
 8005844:	b003      	add	sp, #12
 8005846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005848:	ab01      	add	r3, sp, #4
 800584a:	466a      	mov	r2, sp
 800584c:	f7ff ffc8 	bl	80057e0 <__swhatbuf_r>
 8005850:	9f00      	ldr	r7, [sp, #0]
 8005852:	4605      	mov	r5, r0
 8005854:	4639      	mov	r1, r7
 8005856:	4630      	mov	r0, r6
 8005858:	f7ff fbba 	bl	8004fd0 <_malloc_r>
 800585c:	b948      	cbnz	r0, 8005872 <__smakebuf_r+0x46>
 800585e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005862:	059a      	lsls	r2, r3, #22
 8005864:	d4ee      	bmi.n	8005844 <__smakebuf_r+0x18>
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	f043 0302 	orr.w	r3, r3, #2
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	e7e2      	b.n	8005838 <__smakebuf_r+0xc>
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	6020      	str	r0, [r4, #0]
 8005876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	9b01      	ldr	r3, [sp, #4]
 800587e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005882:	b15b      	cbz	r3, 800589c <__smakebuf_r+0x70>
 8005884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005888:	4630      	mov	r0, r6
 800588a:	f000 f81d 	bl	80058c8 <_isatty_r>
 800588e:	b128      	cbz	r0, 800589c <__smakebuf_r+0x70>
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	f023 0303 	bic.w	r3, r3, #3
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	81a3      	strh	r3, [r4, #12]
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	431d      	orrs	r5, r3
 80058a0:	81a5      	strh	r5, [r4, #12]
 80058a2:	e7cf      	b.n	8005844 <__smakebuf_r+0x18>

080058a4 <_fstat_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d07      	ldr	r5, [pc, #28]	@ (80058c4 <_fstat_r+0x20>)
 80058a8:	2300      	movs	r3, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	4611      	mov	r1, r2
 80058b0:	602b      	str	r3, [r5, #0]
 80058b2:	f7fb f8ca 	bl	8000a4a <_fstat>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d102      	bne.n	80058c0 <_fstat_r+0x1c>
 80058ba:	682b      	ldr	r3, [r5, #0]
 80058bc:	b103      	cbz	r3, 80058c0 <_fstat_r+0x1c>
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	bd38      	pop	{r3, r4, r5, pc}
 80058c2:	bf00      	nop
 80058c4:	20000b08 	.word	0x20000b08

080058c8 <_isatty_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d06      	ldr	r5, [pc, #24]	@ (80058e4 <_isatty_r+0x1c>)
 80058cc:	2300      	movs	r3, #0
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fb f8c9 	bl	8000a6a <_isatty>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_isatty_r+0x1a>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_isatty_r+0x1a>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20000b08 	.word	0x20000b08

080058e8 <_sbrk_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d06      	ldr	r5, [pc, #24]	@ (8005904 <_sbrk_r+0x1c>)
 80058ec:	2300      	movs	r3, #0
 80058ee:	4604      	mov	r4, r0
 80058f0:	4608      	mov	r0, r1
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	f7fb f8d2 	bl	8000a9c <_sbrk>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_sbrk_r+0x1a>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_sbrk_r+0x1a>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	20000b08 	.word	0x20000b08

08005908 <_init>:
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	bf00      	nop
 800590c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590e:	bc08      	pop	{r3}
 8005910:	469e      	mov	lr, r3
 8005912:	4770      	bx	lr

08005914 <_fini>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	bf00      	nop
 8005918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591a:	bc08      	pop	{r3}
 800591c:	469e      	mov	lr, r3
 800591e:	4770      	bx	lr
