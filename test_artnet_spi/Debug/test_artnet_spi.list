
test_artnet_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006578  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da8  08006da8  000080ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006da8  08006da8  00007da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006db0  08006db0  000080ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db0  08006db0  00007db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006db4  08006db4  00007db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08006db8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200000ac  08006e64  000080ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08006e64  00008318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111e9  00000000  00000000  000080dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f73  00000000  00000000  000192c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  0001c238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b56  00000000  00000000  0001d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292d1  00000000  00000000  0001dc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149b2  00000000  00000000  00046f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efd23  00000000  00000000  0005b901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b624  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000435c  00000000  00000000  0014b668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0014f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066f0 	.word	0x080066f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	080066f0 	.word	0x080066f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005dc:	4812      	ldr	r0, [pc, #72]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005de:	f002 f825 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005fa:	f001 fe6d 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4804      	ldr	r0, [pc, #16]	@ (8000628 <MX_GPIO_Init+0xc8>)
 8000618:	f001 fe5e 	bl	80022d8 <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	@ 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <__io_putchar+0x20>)
 800063e:	f004 faa7 	bl	8004b90 <HAL_UART_Transmit>

	return chr;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000134 	.word	0x20000134

08000650 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000656:	f001 fcb9 	bl	8001fcc <HAL_Init>

	/* USER CODE BEGIN Init */
	setbuf(stdout, NULL);
 800065a:	4b2a      	ldr	r3, [pc, #168]	@ (8000704 <main+0xb4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 f924 	bl	80058b0 <setbuf>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000668:	f000 f864 	bl	8000734 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800066c:	f7ff ff78 	bl	8000560 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000670:	f000 fa5c 	bl	8000b2c <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000674:	f000 f8b6 	bl	80007e4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	w5500_init();
 8000678:	f000 fe5a 	bl	8001330 <w5500_init>

	printf("---------- AVANT static_host_configuration ----------\r\n");
 800067c:	4822      	ldr	r0, [pc, #136]	@ (8000708 <main+0xb8>)
 800067e:	f005 f90f 	bl	80058a0 <puts>
	static_host_configuration(&net_info);
 8000682:	4822      	ldr	r0, [pc, #136]	@ (800070c <main+0xbc>)
 8000684:	f000 fc5a 	bl	8000f3c <static_host_configuration>
	//dynamic_host_configuration(net_info.mac);
	printf("---------- APRES static_host_configuration ----------\r\n");
 8000688:	4821      	ldr	r0, [pc, #132]	@ (8000710 <main+0xc0>)
 800068a:	f005 f909 	bl	80058a0 <puts>

	wiz_NetInfo check;
	wizchip_getnetinfo(&check);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fbc5 	bl	8001e20 <wizchip_getnetinfo>
	printf("IP configuree : %d.%d.%d.%d\r\n", check.ip[0], check.ip[1], check.ip[2], check.ip[3]);
 8000696:	7abb      	ldrb	r3, [r7, #10]
 8000698:	4619      	mov	r1, r3
 800069a:	7afb      	ldrb	r3, [r7, #11]
 800069c:	461a      	mov	r2, r3
 800069e:	7b3b      	ldrb	r3, [r7, #12]
 80006a0:	4618      	mov	r0, r3
 80006a2:	7b7b      	ldrb	r3, [r7, #13]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	4603      	mov	r3, r0
 80006a8:	481a      	ldr	r0, [pc, #104]	@ (8000714 <main+0xc4>)
 80006aa:	f005 f891 	bl	80057d0 <iprintf>

	printf("---------- AVANT check_cable_presence ----------\r\n");
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <main+0xc8>)
 80006b0:	f005 f8f6 	bl	80058a0 <puts>
	check_cable_presence();
 80006b4:	f000 fc58 	bl	8000f68 <check_cable_presence>
	printf("---------- APRES check_cable_presence ----------\r\n");
 80006b8:	4818      	ldr	r0, [pc, #96]	@ (800071c <main+0xcc>)
 80006ba:	f005 f8f1 	bl	80058a0 <puts>

	printf("---------- AVANT check_phy_status ----------\r\n");
 80006be:	4818      	ldr	r0, [pc, #96]	@ (8000720 <main+0xd0>)
 80006c0:	f005 f8ee 	bl	80058a0 <puts>
	check_phy_status();
 80006c4:	f000 fc86 	bl	8000fd4 <check_phy_status>
	printf("---------- APRES check_phy_status ----------\r\n");
 80006c8:	4816      	ldr	r0, [pc, #88]	@ (8000724 <main+0xd4>)
 80006ca:	f005 f8e9 	bl	80058a0 <puts>

	printf("---------- AVANT print_current_host_configuration ----------\r\n");
 80006ce:	4816      	ldr	r0, [pc, #88]	@ (8000728 <main+0xd8>)
 80006d0:	f005 f8e6 	bl	80058a0 <puts>
	print_current_host_configuration();
 80006d4:	f000 fd1e 	bl	8001114 <print_current_host_configuration>
	printf("---------- APRES print_current_host_configuration ----------\r\n");
 80006d8:	4814      	ldr	r0, [pc, #80]	@ (800072c <main+0xdc>)
 80006da:	f005 f8e1 	bl	80058a0 <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		for (int i = 0; i < 100; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	e00a      	b.n	80006fa <main+0xaa>
		{
			printf("%i: Hello World!\r\n", i);
 80006e4:	69f9      	ldr	r1, [r7, #28]
 80006e6:	4812      	ldr	r0, [pc, #72]	@ (8000730 <main+0xe0>)
 80006e8:	f005 f872 	bl	80057d0 <iprintf>
			HAL_Delay(1500);
 80006ec:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006f0:	f001 fce8 	bl	80020c4 <HAL_Delay>
		for (int i = 0; i < 100; i++)
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	3301      	adds	r3, #1
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	2b63      	cmp	r3, #99	@ 0x63
 80006fe:	ddf1      	ble.n	80006e4 <main+0x94>
 8000700:	e7ed      	b.n	80006de <main+0x8e>
 8000702:	bf00      	nop
 8000704:	2000005c 	.word	0x2000005c
 8000708:	08006720 	.word	0x08006720
 800070c:	20000000 	.word	0x20000000
 8000710:	08006758 	.word	0x08006758
 8000714:	08006790 	.word	0x08006790
 8000718:	080067b0 	.word	0x080067b0
 800071c:	080067e4 	.word	0x080067e4
 8000720:	08006818 	.word	0x08006818
 8000724:	08006848 	.word	0x08006848
 8000728:	08006878 	.word	0x08006878
 800072c:	080068b8 	.word	0x080068b8
 8000730:	080068f8 	.word	0x080068f8

08000734 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	@ 0x58
 8000738:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2244      	movs	r2, #68	@ 0x44
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fa48 	bl	8005bd8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000756:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800075a:	f001 ff8d 	bl	8002678 <HAL_PWREx_ControlVoltageScaling>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000764:	f000 f837 	bl	80007d6 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000770:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2310      	movs	r3, #16
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000782:	230a      	movs	r3, #10
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000786:	2307      	movs	r3, #7
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f001 ffc4 	bl	8002724 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80007a2:	f000 f818 	bl	80007d6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fb8c 	bl	8002edc <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80007ca:	f000 f804 	bl	80007d6 <Error_Handler>
	}
}
 80007ce:	bf00      	nop
 80007d0:	3758      	adds	r7, #88	@ 0x58
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007da:	b672      	cpsid	i
}
 80007dc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007de:	bf00      	nop
 80007e0:	e7fd      	b.n	80007de <Error_Handler+0x8>
	...

080007e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_SPI1_Init+0x84>)
 80007ea:	4a20      	ldr	r2, [pc, #128]	@ (800086c <MX_SPI1_Init+0x88>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_SPI1_Init+0x84>)
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_SPI1_Init+0x84>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_SPI1_Init+0x84>)
 80007fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000802:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000804:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080a:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_SPI1_Init+0x84>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000812:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000816:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_SPI1_Init+0x84>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI1_Init+0x84>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000830:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000832:	2207      	movs	r2, #7
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_SPI1_Init+0x84>)
 800083e:	2208      	movs	r2, #8
 8000840:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000842:	4809      	ldr	r0, [pc, #36]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000844:	f003 fa2a 	bl	8003c9c <HAL_SPI_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800084e:	f7ff ffc2 	bl	80007d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000852:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <MX_SPI1_Init+0x84>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <MX_SPI1_Init+0x84>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000860:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000c8 	.word	0x200000c8
 800086c:	40013000 	.word	0x40013000

08000870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <HAL_SPI_MspInit+0x7c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d128      	bne.n	80008e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	4a16      	ldr	r2, [pc, #88]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 8000898:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800089c:	6613      	str	r3, [r2, #96]	@ 0x60
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	4a10      	ldr	r2, [pc, #64]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_SPI_MspInit+0x80>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008c2:	23f0      	movs	r3, #240	@ 0xf0
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d2:	2305      	movs	r3, #5
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f001 fcfa 	bl	80022d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	@ 0x60
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000916:	4a08      	ldr	r2, [pc, #32]	@ (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	@ 0x58
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <SysTick_Handler+0x2c>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <SysTick_Handler+0x2c>)
 800099e:	801a      	strh	r2, [r3, #0]
	if(ticks == 1000) {
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <SysTick_Handler+0x2c>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009a8:	d104      	bne.n	80009b4 <SysTick_Handler+0x24>
		DHCP_time_handler();
 80009aa:	f000 fab9 	bl	8000f20 <DHCP_time_handler>
		ticks = 0;
 80009ae:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <SysTick_Handler+0x2c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	801a      	strh	r2, [r3, #0]
	}
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80009b4:	f001 fb66 	bl	8002084 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000012c 	.word	0x2000012c

080009c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00a      	b.n	80009e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d2:	f3af 8000 	nop.w
 80009d6:	4601      	mov	r1, r0
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf0      	blt.n	80009d2 <_read+0x12>
  }

  return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e009      	b.n	8000a20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fe09 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf1      	blt.n	8000a0c <_write+0x12>
  }
  return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_isatty>:

int _isatty(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f005 f8d2 	bl	8005c74 <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20018000 	.word	0x20018000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	20000130 	.word	0x20000130
 8000b04:	20000318 	.word	0x20000318

08000b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b32:	4a15      	ldr	r2, [pc, #84]	@ (8000b88 <MX_USART2_UART_Init+0x5c>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b70:	f003 ffc0 	bl	8004af4 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b7a:	f7ff fe2c 	bl	80007d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000134 	.word	0x20000134
 8000b88:	40004400 	.word	0x40004400

08000b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2288      	movs	r2, #136	@ 0x88
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f005 f813 	bl	8005bd8 <memset>
  if(uartHandle->Instance==USART2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <HAL_UART_MspInit+0xb0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d13b      	bne.n	8000c34 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 fbab 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd4:	f7ff fdff 	bl	80007d6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bdc:	4a18      	ldr	r2, [pc, #96]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c20:	2307      	movs	r3, #7
 8000c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f001 fb52 	bl	80022d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c34:	bf00      	nop
 8000c36:	37b0      	adds	r7, #176	@ 0xb0
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40021000 	.word	0x40021000

08000c44 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	uint8_t spi_data[3];

	WIZCHIP_CRITICAL_ENTER();
 8000c4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4798      	blx	r3
	WIZCHIP.CS._select();
 8000c52:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4798      	blx	r3

	AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

	if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <WIZCHIP_READ+0x24>
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d117      	bne.n	8000c98 <WIZCHIP_READ+0x54>
	{
		printf("SPI Read: Byte mode\r\n");
 8000c68:	481f      	ldr	r0, [pc, #124]	@ (8000ce8 <WIZCHIP_READ+0xa4>)
 8000c6a:	f004 fe19 	bl	80058a0 <puts>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c70:	6a1b      	ldr	r3, [r3, #32]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	0c12      	lsrs	r2, r2, #16
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	4610      	mov	r0, r2
 8000c7a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	0a12      	lsrs	r2, r2, #8
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	4610      	mov	r0, r2
 8000c88:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000c8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000c8c:	6a1b      	ldr	r3, [r3, #32]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	4610      	mov	r0, r2
 8000c94:	4798      	blx	r3
 8000c96:	e014      	b.n	8000cc2 <WIZCHIP_READ+0x7e>
	}
	else																// burst operation
	{
		printf("SPI Read: Burst mode\r\n");
 8000c98:	4814      	ldr	r0, [pc, #80]	@ (8000cec <WIZCHIP_READ+0xa8>)
 8000c9a:	f004 fe01 	bl	80058a0 <puts>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	0c1b      	lsrs	r3, r3, #16
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb8:	f107 020c 	add.w	r2, r7, #12
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	4798      	blx	r3
	}
	ret = WIZCHIP.IF.SPI._read_byte();
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4798      	blx	r3
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]

	WIZCHIP.CS._deselect();
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4798      	blx	r3
	WIZCHIP_CRITICAL_EXIT();
 8000cd2:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <WIZCHIP_READ+0xa0>)
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	4798      	blx	r3
	return ret;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000001c 	.word	0x2000001c
 8000ce8:	0800690c 	.word	0x0800690c
 8000cec:	08006924 	.word	0x08006924

08000cf0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
	uint8_t spi_data[4];

	WIZCHIP_CRITICAL_ENTER();
 8000cfc:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	4798      	blx	r3
	WIZCHIP.CS._select();
 8000d02:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4798      	blx	r3

	AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	607b      	str	r3, [r7, #4]

	//if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
	if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000d10:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d11c      	bne.n	8000d52 <WIZCHIP_WRITE+0x62>
	{
		printf("SPI Write: Byte mode\r\n");
 8000d18:	481f      	ldr	r0, [pc, #124]	@ (8000d98 <WIZCHIP_WRITE+0xa8>)
 8000d1a:	f004 fdc1 	bl	80058a0 <puts>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	0c12      	lsrs	r2, r2, #16
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	0a12      	lsrs	r2, r2, #8
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	4610      	mov	r0, r2
 8000d38:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	4610      	mov	r0, r2
 8000d44:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	78fa      	ldrb	r2, [r7, #3]
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4798      	blx	r3
 8000d50:	e016      	b.n	8000d80 <WIZCHIP_WRITE+0x90>
	}
	else									// burst operation
	{
		printf("SPI Write: Burst mode\r\n");
 8000d52:	4812      	ldr	r0, [pc, #72]	@ (8000d9c <WIZCHIP_WRITE+0xac>)
 8000d54:	f004 fda4 	bl	80058a0 <puts>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	0c1b      	lsrs	r3, r3, #16
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d76:	f107 020c 	add.w	r2, r7, #12
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4798      	blx	r3
	}

	WIZCHIP.CS._deselect();
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4798      	blx	r3
	WIZCHIP_CRITICAL_EXIT();
 8000d86:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <WIZCHIP_WRITE+0xa4>)
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	4798      	blx	r3
}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000001c 	.word	0x2000001c
 8000d98:	0800693c 	.word	0x0800693c
 8000d9c:	08006954 	.word	0x08006954

08000da0 <WIZCHIP_READ_BUF>:

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	4613      	mov	r3, r2
 8000dac:	80fb      	strh	r3, [r7, #6]
	uint8_t spi_data[3];
	uint16_t i;

	WIZCHIP_CRITICAL_ENTER();
 8000dae:	4b2b      	ldr	r3, [pc, #172]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	4798      	blx	r3
	WIZCHIP.CS._select();
 8000db4:	4b29      	ldr	r3, [pc, #164]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	4798      	blx	r3

	AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

	if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000dba:	4b28      	ldr	r3, [pc, #160]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <WIZCHIP_READ_BUF+0x2a>
 8000dc2:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d126      	bne.n	8000e18 <WIZCHIP_READ_BUF+0x78>
	{
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000dca:	4b24      	ldr	r3, [pc, #144]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	0c12      	lsrs	r2, r2, #16
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000dd8:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	0a12      	lsrs	r2, r2, #8
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	4610      	mov	r0, r2
 8000de4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000de6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	4610      	mov	r0, r2
 8000df0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	82fb      	strh	r3, [r7, #22]
 8000df6:	e00a      	b.n	8000e0e <WIZCHIP_READ_BUF+0x6e>
			pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	8afa      	ldrh	r2, [r7, #22]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	188c      	adds	r4, r1, r2
 8000e02:	4798      	blx	r3
 8000e04:	4603      	mov	r3, r0
 8000e06:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000e08:	8afb      	ldrh	r3, [r7, #22]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	82fb      	strh	r3, [r7, #22]
 8000e0e:	8afa      	ldrh	r2, [r7, #22]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d3f0      	bcc.n	8000df8 <WIZCHIP_READ_BUF+0x58>
	if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000e16:	e017      	b.n	8000e48 <WIZCHIP_READ_BUF+0xa8>
	}
	else																// burst operation
	{
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	0c1b      	lsrs	r3, r3, #16
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e32:	f107 0210 	add.w	r2, r7, #16
 8000e36:	2103      	movs	r1, #3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000e3c:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e40:	88fa      	ldrh	r2, [r7, #6]
 8000e42:	4611      	mov	r1, r2
 8000e44:	68b8      	ldr	r0, [r7, #8]
 8000e46:	4798      	blx	r3
	}

	WIZCHIP.CS._deselect();
 8000e48:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4798      	blx	r3
	WIZCHIP_CRITICAL_EXIT();
 8000e4e:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	4798      	blx	r3
}
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	2000001c 	.word	0x2000001c

08000e60 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80fb      	strh	r3, [r7, #6]
	uint8_t spi_data[3];
	uint16_t i;

	WIZCHIP_CRITICAL_ENTER();
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	4798      	blx	r3
	WIZCHIP.CS._select();
 8000e74:	4b29      	ldr	r3, [pc, #164]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4798      	blx	r3

	AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	60fb      	str	r3, [r7, #12]

	if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000e82:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d126      	bne.n	8000ed8 <WIZCHIP_WRITE_BUF+0x78>
	{
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000e8a:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	0c12      	lsrs	r2, r2, #16
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	4610      	mov	r0, r2
 8000e96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000e98:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	0a12      	lsrs	r2, r2, #8
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	82fb      	strh	r3, [r7, #22]
 8000eb6:	e00a      	b.n	8000ece <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	8afa      	ldrh	r2, [r7, #22]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	440a      	add	r2, r1
 8000ec2:	7812      	ldrb	r2, [r2, #0]
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000ec8:	8afb      	ldrh	r3, [r7, #22]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	82fb      	strh	r3, [r7, #22]
 8000ece:	8afa      	ldrh	r2, [r7, #22]
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d3f0      	bcc.n	8000eb8 <WIZCHIP_WRITE_BUF+0x58>
 8000ed6:	e017      	b.n	8000f08 <WIZCHIP_WRITE_BUF+0xa8>
	}
	else									// burst operation
	{
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	0c1b      	lsrs	r3, r3, #16
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef2:	f107 0210 	add.w	r2, r7, #16
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f00:	88fa      	ldrh	r2, [r7, #6]
 8000f02:	4611      	mov	r1, r2
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	4798      	blx	r3
	}

	WIZCHIP.CS._deselect();
 8000f08:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4798      	blx	r3
	WIZCHIP_CRITICAL_EXIT();
 8000f0e:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	4798      	blx	r3
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000001c 	.word	0x2000001c

08000f20 <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <DHCP_time_handler+0x18>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	4a03      	ldr	r2, [pc, #12]	@ (8000f38 <DHCP_time_handler+0x18>)
 8000f2c:	6013      	str	r3, [r2, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	200001bc 	.word	0x200001bc

08000f3c <static_host_configuration>:
 * @param gw Gateway IP address
 * @param dns DNS server IP address
 * @retval None
 */
void static_host_configuration(wiz_NetInfo *net_info)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    printf("Setting up static host configuration...\r\n");
 8000f44:	4806      	ldr	r0, [pc, #24]	@ (8000f60 <static_host_configuration+0x24>)
 8000f46:	f004 fcab 	bl	80058a0 <puts>

    // Set network configuration
    ctlnetwork(CN_SET_NETINFO, (void*)net_info);
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 fc1b 	bl	8001788 <ctlnetwork>

    printf("Static IP configuration is done successfully.\r\n");
 8000f52:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <static_host_configuration+0x28>)
 8000f54:	f004 fca4 	bl	80058a0 <puts>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	0800696c 	.word	0x0800696c
 8000f64:	08006998 	.word	0x08006998

08000f68 <check_cable_presence>:
 *
 * This function continuously checks the status of the PHY link until the Ethernet cable is connected.
 *
 * @return void
 */
void check_cable_presence() {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
    uint8_t phy_status;
    int error_status;

    printf("\r\nChecking ethernet cable presence ...\r\n");
 8000f6e:	4815      	ldr	r0, [pc, #84]	@ (8000fc4 <check_cable_presence+0x5c>)
 8000f70:	f004 fc96 	bl	80058a0 <puts>

    do {
        // Get the PHY link status
        error_status = ctlwizchip(CW_GET_PHYLINK, (void*)&phy_status);
 8000f74:	1cfb      	adds	r3, r7, #3
 8000f76:	4619      	mov	r1, r3
 8000f78:	200f      	movs	r0, #15
 8000f7a:	f000 fb25 	bl	80015c8 <ctlwizchip>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	607b      	str	r3, [r7, #4]

        if (error_status == -1) {
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d103      	bne.n	8000f92 <check_cable_presence+0x2a>
            printf("Failed to get PHY link info.\r\nTrying again...\r\n");
 8000f8a:	480f      	ldr	r0, [pc, #60]	@ (8000fc8 <check_cable_presence+0x60>)
 8000f8c:	f004 fc88 	bl	80058a0 <puts>
            continue;
 8000f90:	e009      	b.n	8000fa6 <check_cable_presence+0x3e>
        }

        // Check if the cable is not connected
        if (phy_status == PHY_LINK_OFF) {
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d106      	bne.n	8000fa6 <check_cable_presence+0x3e>
            printf("Cable is not connected.\r\n");
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <check_cable_presence+0x64>)
 8000f9a:	f004 fc81 	bl	80058a0 <puts>
            HAL_Delay(1500);
 8000f9e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000fa2:	f001 f88f 	bl	80020c4 <HAL_Delay>
        }
    } while (error_status == -1 || phy_status == PHY_LINK_OFF);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d0e2      	beq.n	8000f74 <check_cable_presence+0xc>
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0df      	beq.n	8000f74 <check_cable_presence+0xc>

    printf("Cable is connected.\r\n");
 8000fb4:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <check_cable_presence+0x68>)
 8000fb6:	f004 fc73 	bl	80058a0 <puts>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	08006a68 	.word	0x08006a68
 8000fc8:	08006a90 	.word	0x08006a90
 8000fcc:	08006ac0 	.word	0x08006ac0
 8000fd0:	08006adc 	.word	0x08006adc

08000fd4 <check_phy_status>:
 *
 * This function retrieves and prints the PHY link status and configuration, including mode, speed, and duplex settings.
 *
 * @return void
 */
void check_phy_status() {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
    uint8_t phy_status;

    // Get the PHY link status
    if (ctlwizchip(CW_GET_PHYLINK, (void*)&phy_status) == -1) {
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f000 faf2 	bl	80015c8 <ctlwizchip>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fea:	d103      	bne.n	8000ff4 <check_phy_status+0x20>
        printf("Failed to get PHY link status.\r\n");
 8000fec:	4838      	ldr	r0, [pc, #224]	@ (80010d0 <check_phy_status+0xfc>)
 8000fee:	f004 fc57 	bl	80058a0 <puts>
        return;
 8000ff2:	e06a      	b.n	80010ca <check_phy_status+0xf6>
    }

    // Print the PHY link status
    if (phy_status == PHY_LINK_ON) {
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d103      	bne.n	8001002 <check_phy_status+0x2e>
        printf("PHY Link is ON.\r\n");
 8000ffa:	4836      	ldr	r0, [pc, #216]	@ (80010d4 <check_phy_status+0x100>)
 8000ffc:	f004 fc50 	bl	80058a0 <puts>
 8001000:	e002      	b.n	8001008 <check_phy_status+0x34>
    } else {
        printf("PHY Link is OFF.\r\n");
 8001002:	4835      	ldr	r0, [pc, #212]	@ (80010d8 <check_phy_status+0x104>)
 8001004:	f004 fc4c 	bl	80058a0 <puts>
    }

    // Get the PHY configuration (optional, for more detailed information)
    wiz_PhyConf phy_conf;
    if (ctlwizchip(CW_GET_PHYCONF, (void*)&phy_conf) == -1) {
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	200b      	movs	r0, #11
 800100e:	f000 fadb 	bl	80015c8 <ctlwizchip>
 8001012:	4603      	mov	r3, r0
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d103      	bne.n	8001022 <check_phy_status+0x4e>
        printf("Failed to get PHY configuration.\r\n");
 800101a:	4830      	ldr	r0, [pc, #192]	@ (80010dc <check_phy_status+0x108>)
 800101c:	f004 fc40 	bl	80058a0 <puts>
        return;
 8001020:	e053      	b.n	80010ca <check_phy_status+0xf6>
    }

    // Print the PHY configuration
    printf("PHY Mode: ");
 8001022:	482f      	ldr	r0, [pc, #188]	@ (80010e0 <check_phy_status+0x10c>)
 8001024:	f004 fbd4 	bl	80057d0 <iprintf>
    switch (phy_conf.by) {
 8001028:	783b      	ldrb	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <check_phy_status+0x60>
 800102e:	2b01      	cmp	r3, #1
 8001030:	d004      	beq.n	800103c <check_phy_status+0x68>
 8001032:	e007      	b.n	8001044 <check_phy_status+0x70>
        case PHY_CONFBY_HW:
            printf("Configured by hardware.\r\n");
 8001034:	482b      	ldr	r0, [pc, #172]	@ (80010e4 <check_phy_status+0x110>)
 8001036:	f004 fc33 	bl	80058a0 <puts>
            break;
 800103a:	e007      	b.n	800104c <check_phy_status+0x78>
        case PHY_CONFBY_SW:
            printf("Configured by software.\r\n");
 800103c:	482a      	ldr	r0, [pc, #168]	@ (80010e8 <check_phy_status+0x114>)
 800103e:	f004 fc2f 	bl	80058a0 <puts>
            break;
 8001042:	e003      	b.n	800104c <check_phy_status+0x78>
        default:
            printf("Unknown.\r\n");
 8001044:	4829      	ldr	r0, [pc, #164]	@ (80010ec <check_phy_status+0x118>)
 8001046:	f004 fc2b 	bl	80058a0 <puts>
            break;
 800104a:	bf00      	nop
    }

    printf("PHY Speed: ");
 800104c:	4828      	ldr	r0, [pc, #160]	@ (80010f0 <check_phy_status+0x11c>)
 800104e:	f004 fbbf 	bl	80057d0 <iprintf>
    switch (phy_conf.speed) {
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <check_phy_status+0x8a>
 8001058:	2b01      	cmp	r3, #1
 800105a:	d004      	beq.n	8001066 <check_phy_status+0x92>
 800105c:	e007      	b.n	800106e <check_phy_status+0x9a>
        case PHY_SPEED_10:
            printf("10 Mbps.\r\n");
 800105e:	4825      	ldr	r0, [pc, #148]	@ (80010f4 <check_phy_status+0x120>)
 8001060:	f004 fc1e 	bl	80058a0 <puts>
            break;
 8001064:	e007      	b.n	8001076 <check_phy_status+0xa2>
        case PHY_SPEED_100:
            printf("100 Mbps.\r\n");
 8001066:	4824      	ldr	r0, [pc, #144]	@ (80010f8 <check_phy_status+0x124>)
 8001068:	f004 fc1a 	bl	80058a0 <puts>
            break;
 800106c:	e003      	b.n	8001076 <check_phy_status+0xa2>
        default:
            printf("Unknown.\r\n");
 800106e:	481f      	ldr	r0, [pc, #124]	@ (80010ec <check_phy_status+0x118>)
 8001070:	f004 fc16 	bl	80058a0 <puts>
            break;
 8001074:	bf00      	nop
    }

    printf("PHY Duplex: ");
 8001076:	4821      	ldr	r0, [pc, #132]	@ (80010fc <check_phy_status+0x128>)
 8001078:	f004 fbaa 	bl	80057d0 <iprintf>
    switch (phy_conf.duplex) {
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <check_phy_status+0xb4>
 8001082:	2b01      	cmp	r3, #1
 8001084:	d004      	beq.n	8001090 <check_phy_status+0xbc>
 8001086:	e007      	b.n	8001098 <check_phy_status+0xc4>
        case PHY_DUPLEX_HALF:
            printf("Half duplex.\r\n");
 8001088:	481d      	ldr	r0, [pc, #116]	@ (8001100 <check_phy_status+0x12c>)
 800108a:	f004 fc09 	bl	80058a0 <puts>
            break;
 800108e:	e007      	b.n	80010a0 <check_phy_status+0xcc>
        case PHY_DUPLEX_FULL:
            printf("Full duplex.\r\n");
 8001090:	481c      	ldr	r0, [pc, #112]	@ (8001104 <check_phy_status+0x130>)
 8001092:	f004 fc05 	bl	80058a0 <puts>
            break;
 8001096:	e003      	b.n	80010a0 <check_phy_status+0xcc>
        default:
            printf("Unknown.\r\n");
 8001098:	4814      	ldr	r0, [pc, #80]	@ (80010ec <check_phy_status+0x118>)
 800109a:	f004 fc01 	bl	80058a0 <puts>
            break;
 800109e:	bf00      	nop
    }

    // Print the PHY negotiation mode
    printf("PHY Negotiation Mode: ");
 80010a0:	4819      	ldr	r0, [pc, #100]	@ (8001108 <check_phy_status+0x134>)
 80010a2:	f004 fb95 	bl	80057d0 <iprintf>
    switch (phy_conf.mode) {
 80010a6:	787b      	ldrb	r3, [r7, #1]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <check_phy_status+0xde>
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d004      	beq.n	80010ba <check_phy_status+0xe6>
 80010b0:	e007      	b.n	80010c2 <check_phy_status+0xee>
        case PHY_MODE_MANUAL:
            printf("Manual.\r\n");
 80010b2:	4816      	ldr	r0, [pc, #88]	@ (800110c <check_phy_status+0x138>)
 80010b4:	f004 fbf4 	bl	80058a0 <puts>
            break;
 80010b8:	e007      	b.n	80010ca <check_phy_status+0xf6>
        case PHY_MODE_AUTONEGO:
            printf("Auto-negotiation.\r\n");
 80010ba:	4815      	ldr	r0, [pc, #84]	@ (8001110 <check_phy_status+0x13c>)
 80010bc:	f004 fbf0 	bl	80058a0 <puts>
            break;
 80010c0:	e003      	b.n	80010ca <check_phy_status+0xf6>
        default:
            printf("Unknown.\r\n");
 80010c2:	480a      	ldr	r0, [pc, #40]	@ (80010ec <check_phy_status+0x118>)
 80010c4:	f004 fbec 	bl	80058a0 <puts>
            break;
 80010c8:	bf00      	nop
    }
}
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	08006af4 	.word	0x08006af4
 80010d4:	08006b14 	.word	0x08006b14
 80010d8:	08006b28 	.word	0x08006b28
 80010dc:	08006b3c 	.word	0x08006b3c
 80010e0:	08006b60 	.word	0x08006b60
 80010e4:	08006b6c 	.word	0x08006b6c
 80010e8:	08006b88 	.word	0x08006b88
 80010ec:	08006ba4 	.word	0x08006ba4
 80010f0:	08006bb0 	.word	0x08006bb0
 80010f4:	08006bbc 	.word	0x08006bbc
 80010f8:	08006bc8 	.word	0x08006bc8
 80010fc:	08006bd4 	.word	0x08006bd4
 8001100:	08006be4 	.word	0x08006be4
 8001104:	08006bf4 	.word	0x08006bf4
 8001108:	08006c04 	.word	0x08006c04
 800110c:	08006c1c 	.word	0x08006c1c
 8001110:	08006c28 	.word	0x08006c28

08001114 <print_current_host_configuration>:
 * This function retrieves the current network configuration from the WIZnet chip
 * and prints the MAC address, IP address, subnet mask, gateway, and DNS server.
 *
 * @return void
 */
void print_current_host_configuration() {
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af04      	add	r7, sp, #16
    wiz_NetInfo current_net_info;

    // Retrieve the current network information from the WIZnet chip
    ctlnetwork(CN_GET_NETINFO, (void*)&current_net_info);
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	2001      	movs	r0, #1
 8001120:	f000 fb32 	bl	8001788 <ctlnetwork>

    // Print the MAC address
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 8001124:	783b      	ldrb	r3, [r7, #0]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001126:	4618      	mov	r0, r3
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 8001128:	787b      	ldrb	r3, [r7, #1]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800112a:	461c      	mov	r4, r3
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 800112c:	78bb      	ldrb	r3, [r7, #2]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800112e:	461d      	mov	r5, r3
           current_net_info.mac[3], current_net_info.mac[4], current_net_info.mac[5]);
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	793a      	ldrb	r2, [r7, #4]
 8001134:	7979      	ldrb	r1, [r7, #5]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001136:	9102      	str	r1, [sp, #8]
 8001138:	9201      	str	r2, [sp, #4]
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	462b      	mov	r3, r5
 800113e:	4622      	mov	r2, r4
 8001140:	4601      	mov	r1, r0
 8001142:	481b      	ldr	r0, [pc, #108]	@ (80011b0 <print_current_host_configuration+0x9c>)
 8001144:	f004 fb44 	bl	80057d0 <iprintf>

    // Print the IP address
    printf("IP: %d.%d.%d.%d\r\n",
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 8001148:	79bb      	ldrb	r3, [r7, #6]
    printf("IP: %d.%d.%d.%d\r\n",
 800114a:	4619      	mov	r1, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 800114c:	79fb      	ldrb	r3, [r7, #7]
    printf("IP: %d.%d.%d.%d\r\n",
 800114e:	461a      	mov	r2, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 8001150:	7a3b      	ldrb	r3, [r7, #8]
    printf("IP: %d.%d.%d.%d\r\n",
 8001152:	4618      	mov	r0, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 8001154:	7a7b      	ldrb	r3, [r7, #9]
    printf("IP: %d.%d.%d.%d\r\n",
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	4603      	mov	r3, r0
 800115a:	4816      	ldr	r0, [pc, #88]	@ (80011b4 <print_current_host_configuration+0xa0>)
 800115c:	f004 fb38 	bl	80057d0 <iprintf>

    // Print the subnet mask
    printf("SN: %d.%d.%d.%d\r\n",
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 8001160:	7abb      	ldrb	r3, [r7, #10]
    printf("SN: %d.%d.%d.%d\r\n",
 8001162:	4619      	mov	r1, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 8001164:	7afb      	ldrb	r3, [r7, #11]
    printf("SN: %d.%d.%d.%d\r\n",
 8001166:	461a      	mov	r2, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 8001168:	7b3b      	ldrb	r3, [r7, #12]
    printf("SN: %d.%d.%d.%d\r\n",
 800116a:	4618      	mov	r0, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 800116c:	7b7b      	ldrb	r3, [r7, #13]
    printf("SN: %d.%d.%d.%d\r\n",
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	4603      	mov	r3, r0
 8001172:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <print_current_host_configuration+0xa4>)
 8001174:	f004 fb2c 	bl	80057d0 <iprintf>

    // Print the gateway address
    printf("GW: %d.%d.%d.%d\r\n",
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 8001178:	7bbb      	ldrb	r3, [r7, #14]
    printf("GW: %d.%d.%d.%d\r\n",
 800117a:	4619      	mov	r1, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 800117c:	7bfb      	ldrb	r3, [r7, #15]
    printf("GW: %d.%d.%d.%d\r\n",
 800117e:	461a      	mov	r2, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 8001180:	7c3b      	ldrb	r3, [r7, #16]
    printf("GW: %d.%d.%d.%d\r\n",
 8001182:	4618      	mov	r0, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 8001184:	7c7b      	ldrb	r3, [r7, #17]
    printf("GW: %d.%d.%d.%d\r\n",
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4603      	mov	r3, r0
 800118a:	480c      	ldr	r0, [pc, #48]	@ (80011bc <print_current_host_configuration+0xa8>)
 800118c:	f004 fb20 	bl	80057d0 <iprintf>

    // Print the DNS server address
    printf("DNS: %d.%d.%d.%d\r\n",
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8001190:	7cbb      	ldrb	r3, [r7, #18]
    printf("DNS: %d.%d.%d.%d\r\n",
 8001192:	4619      	mov	r1, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8001194:	7cfb      	ldrb	r3, [r7, #19]
    printf("DNS: %d.%d.%d.%d\r\n",
 8001196:	461a      	mov	r2, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8001198:	7d3b      	ldrb	r3, [r7, #20]
    printf("DNS: %d.%d.%d.%d\r\n",
 800119a:	4618      	mov	r0, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 800119c:	7d7b      	ldrb	r3, [r7, #21]
    printf("DNS: %d.%d.%d.%d\r\n",
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4603      	mov	r3, r0
 80011a2:	4807      	ldr	r0, [pc, #28]	@ (80011c0 <print_current_host_configuration+0xac>)
 80011a4:	f004 fb14 	bl	80057d0 <iprintf>
}
 80011a8:	bf00      	nop
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bdb0      	pop	{r4, r5, r7, pc}
 80011b0:	08006c3c 	.word	0x08006c3c
 80011b4:	08006c64 	.word	0x08006c64
 80011b8:	08006c78 	.word	0x08006c78
 80011bc:	08006c8c 	.word	0x08006c8c
 80011c0:	08006ca0 	.word	0x08006ca0

080011c4 <SPIReadWrite>:
 *@brief Helper driver to send and receive one byte through SPI
 *@param data   : 1 byte data to transmit
 *@return		: 1 byte data which is received
 */
uint8_t SPIReadWrite(uint8_t data)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	 * the SPI_CR2 register is set.
	 */

	// check TXE(tx empty buffer) bit of the status register(SR),
	// and wait until the tx buffer becomes empty
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80011ce:	bf00      	nop
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <SPIReadWrite+0x4c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d1f8      	bne.n	80011d0 <SPIReadWrite+0xc>



	// write the data to the data register to be sent
	*(__IO uint8_t*)&hspi1.Instance->DR = data;
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <SPIReadWrite+0x4c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	330c      	adds	r3, #12
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	701a      	strb	r2, [r3, #0]
	 *	 * and the RXNE flag is set
	 */

	// wait until the data from the slave is received,
	// and the RXNE flag is set
	while((hspi1.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80011e8:	bf00      	nop
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <SPIReadWrite+0x4c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d1f8      	bne.n	80011ea <SPIReadWrite+0x26>


	// return the received byte
	return 	(*(__IO uint8_t*)&hspi1.Instance->DR);
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SPIReadWrite+0x4c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	330c      	adds	r3, #12
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200000c8 	.word	0x200000c8

08001214 <wizchip_deselect>:

/**
 *@brief Helper driver to deselect wizchip
 */
void wizchip_deselect()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2110      	movs	r1, #16
 800121c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001220:	f001 fa04 	bl	800262c <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <wizchip_select>:

/**
 *@brief Helper driver to select wizchip
 */
void wizchip_select()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2110      	movs	r1, #16
 8001230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001234:	f001 f9fa 	bl	800262c <HAL_GPIO_WritePin>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <wizchip_read>:
/**
 *@brief Helper driver to read one byte through SPI
 *@return		: 1 byte data which is received
 */
uint8_t wizchip_read()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	// pass a dummy variable and read from the spi
	return SPIReadWrite(0x00);
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ffbf 	bl	80011c4 <SPIReadWrite>
 8001246:	4603      	mov	r3, r0
}
 8001248:	4618      	mov	r0, r3
 800124a:	bd80      	pop	{r7, pc}

0800124c <wizchip_write>:
/**
 *@brief Helper driver to send one byte through SPI
 *@param data   : 1 byte data to transmit
 */
void wizchip_write(uint8_t data)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(data);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffb3 	bl	80011c4 <SPIReadWrite>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <wizchip_read_burst>:
 *@brief Helper driver to read burst of bytes through SPI
 *@param buff   : buffer to put the received data
 *@param len    : number of bytes to read
 */
void wizchip_read_burst(uint8_t* buff, uint16_t len)
{
 8001266:	b590      	push	{r4, r7, lr}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	e009      	b.n	800128c <wizchip_read_burst+0x26>
	{
		buff[i] = wizchip_read();
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	18d4      	adds	r4, r2, r3
 800127e:	f7ff ffdd 	bl	800123c <wizchip_read>
 8001282:	4603      	mov	r3, r0
 8001284:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf1      	blt.n	8001278 <wizchip_read_burst+0x12>
	}

}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}

0800129e <wizchip_write_burst>:
 *@brief Helper driver to read burst of bytes through SPI
 *@param data   : array containing data to be sent
 *@param len    : number of bytes to send
 */
void wizchip_write_burst(uint8_t* data, uint16_t len)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <wizchip_write_burst+0x26>
	{
		wizchip_write(data[i]);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ffc7 	bl	800124c <wizchip_write>
	for (int i = 0; i < len; i++)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbf1      	blt.n	80012b0 <wizchip_write_burst+0x12>
	}
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <w5500_pins_init>:
/**
 *@brief initializer of PA0(RESET) and SCS(PA1)
 */

void w5500_pins_init()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]


	// enable GPIO clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <w5500_pins_init+0x54>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f0:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <w5500_pins_init+0x54>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <w5500_pins_init+0x54>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	683b      	ldr	r3, [r7, #0]

	// configuring RESET and SCS as outputs
	GPIO_InitStruct.Pin = RESET_PIN | SCS_PIN;
 8001304:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001308:	607b      	str	r3, [r7, #4]

	// push pull(high if 1 and low if 0)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	60bb      	str	r3, [r7, #8]

	// output is NOPULL
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]

	// mark these pins fast
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001312:	2302      	movs	r3, #2
 8001314:	613b      	str	r3, [r7, #16]


	// initialize the pins
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800131e:	f000 ffdb 	bl	80022d8 <HAL_GPIO_Init>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <w5500_init>:

void w5500_init()
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
	// the available size of w5500 is 32KB
	// w5500 supports 8 independents sockets simultaneously
	// here 2KB is allocated for
	// each of the transmit and receive buffer of each socket
	uint8_t memory_for_each_socket[2][8] =
 8001336:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <w5500_init+0x8c>)
 8001338:	1d3c      	adds	r4, r7, #4
 800133a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800133c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{
			{2, 2, 2, 2, 2, 2, 2, 2},		// receive buffer size
			{2, 2, 2, 2, 2, 2, 2, 2}		// transmit buffer size
	};

	uint8_t tmp = 0xFF;
 8001340:	23ff      	movs	r3, #255	@ 0xff
 8001342:	75fb      	strb	r3, [r7, #23]


	// initialize RESET and SCS pins
	w5500_pins_init();
 8001344:	f7ff ffc8 	bl	80012d8 <w5500_pins_init>

	// first deselect the chip(by setting SCS pin)
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2110      	movs	r1, #16
 800134c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001350:	f001 f96c 	bl	800262c <HAL_GPIO_WritePin>


	// hard reset the wiznet chip by clearing RESET
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800135a:	4819      	ldr	r0, [pc, #100]	@ (80013c0 <w5500_init+0x90>)
 800135c:	f001 f966 	bl	800262c <HAL_GPIO_WritePin>

	// busy wait for a while and keep the RESET pin 0
	while(tmp--);
 8001360:	bf00      	nop
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	1e5a      	subs	r2, r3, #1
 8001366:	75fa      	strb	r2, [r7, #23]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1fa      	bne.n	8001362 <w5500_init+0x32>


	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001372:	4813      	ldr	r0, [pc, #76]	@ (80013c0 <w5500_init+0x90>)
 8001374:	f001 f95a 	bl	800262c <HAL_GPIO_WritePin>

	// assign the helper drivers to complete the driver

	// callback functions for selecting and deselecting the chip
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8001378:	4912      	ldr	r1, [pc, #72]	@ (80013c4 <w5500_init+0x94>)
 800137a:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <w5500_init+0x98>)
 800137c:	f000 f8a6 	bl	80014cc <reg_wizchip_cs_cbfunc>

	// callback functions for reading and writing bytes of data
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8001380:	4912      	ldr	r1, [pc, #72]	@ (80013cc <w5500_init+0x9c>)
 8001382:	4813      	ldr	r0, [pc, #76]	@ (80013d0 <w5500_init+0xa0>)
 8001384:	f000 f8c8 	bl	8001518 <reg_wizchip_spi_cbfunc>

	// callback functions for reading and writing burst of data
	reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 8001388:	4912      	ldr	r1, [pc, #72]	@ (80013d4 <w5500_init+0xa4>)
 800138a:	4813      	ldr	r0, [pc, #76]	@ (80013d8 <w5500_init+0xa8>)
 800138c:	f000 f8f0 	bl	8001570 <reg_wizchip_spiburst_cbfunc>



	// allocate the specified memory for each socket
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)memory_for_each_socket) == -1)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4619      	mov	r1, r3
 8001394:	2001      	movs	r0, #1
 8001396:	f000 f917 	bl	80015c8 <ctlwizchip>
 800139a:	4603      	mov	r3, r0
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d104      	bne.n	80013ac <w5500_init+0x7c>
	{
		printf("WIZCHIP initialization failed\r\n");
 80013a2:	480e      	ldr	r0, [pc, #56]	@ (80013dc <w5500_init+0xac>)
 80013a4:	f004 fa7c 	bl	80058a0 <puts>
		while(1);
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <w5500_init+0x78>
	}

	printf("WIZCHIP initialization done successfully\r\n");
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <w5500_init+0xb0>)
 80013ae:	f004 fa77 	bl	80058a0 <puts>
}
 80013b2:	bf00      	nop
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	08006d00 	.word	0x08006d00
 80013c0:	48000800 	.word	0x48000800
 80013c4:	08001215 	.word	0x08001215
 80013c8:	08001229 	.word	0x08001229
 80013cc:	0800124d 	.word	0x0800124d
 80013d0:	0800123d 	.word	0x0800123d
 80013d4:	0800129f 	.word	0x0800129f
 80013d8:	08001267 	.word	0x08001267
 80013dc:	08006cb4 	.word	0x08006cb4
 80013e0:	08006cd4 	.word	0x08006cd4

080013e4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	70fb      	strb	r3, [r7, #3]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	78fa      	ldrb	r2, [r7, #3]
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
 8001458:	2300      	movs	r3, #0
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{ HAL_SPI_Receive(&hspi1, pBuf, len, HAL_MAX_DELAY); }
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	887a      	ldrh	r2, [r7, #2]
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <wizchip_spi_readburst+0x24>)
 8001492:	f002 fe1c 	bl	80040ce <HAL_SPI_Receive>
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200000c8 	.word	0x200000c8

080014a4 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) { HAL_SPI_Transmit(&hspi1, pBuf, len, HAL_MAX_DELAY); }
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	887a      	ldrh	r2, [r7, #2]
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <wizchip_spi_writeburst+0x24>)
 80014ba:	f002 fc92 	bl	8003de2 <HAL_SPI_Transmit>
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000c8 	.word	0x200000c8

080014cc <reg_wizchip_cs_cbfunc>:
		WIZCHIP.CRIS._exit  = cris_ex;
	}
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	if(!cs_sel || !cs_desel)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <reg_wizchip_cs_cbfunc+0x16>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <reg_wizchip_cs_cbfunc+0x24>
	{
		WIZCHIP.CS._select   = wizchip_cs_select;
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <reg_wizchip_cs_cbfunc+0x40>)
 80014e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <reg_wizchip_cs_cbfunc+0x44>)
 80014e6:	615a      	str	r2, [r3, #20]
		WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <reg_wizchip_cs_cbfunc+0x40>)
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <reg_wizchip_cs_cbfunc+0x48>)
 80014ec:	619a      	str	r2, [r3, #24]
 80014ee:	e006      	b.n	80014fe <reg_wizchip_cs_cbfunc+0x32>
	}
	else
	{
		WIZCHIP.CS._select   = cs_sel;
 80014f0:	4a06      	ldr	r2, [pc, #24]	@ (800150c <reg_wizchip_cs_cbfunc+0x40>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6153      	str	r3, [r2, #20]
		WIZCHIP.CS._deselect = cs_desel;
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <reg_wizchip_cs_cbfunc+0x40>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6193      	str	r3, [r2, #24]
	}
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000001c 	.word	0x2000001c
 8001510:	08001401 	.word	0x08001401
 8001514:	0800140f 	.word	0x0800140f

08001518 <reg_wizchip_spi_cbfunc>:
		WIZCHIP.IF.BUS._write_data  = bus_wb;
	}
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001522:	bf00      	nop
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <reg_wizchip_spi_cbfunc+0x4c>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f9      	beq.n	8001524 <reg_wizchip_spi_cbfunc+0xc>

	if(!spi_rb || !spi_wb)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <reg_wizchip_spi_cbfunc+0x24>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d106      	bne.n	800154a <reg_wizchip_spi_cbfunc+0x32>
	{
		WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <reg_wizchip_spi_cbfunc+0x4c>)
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <reg_wizchip_spi_cbfunc+0x50>)
 8001540:	61da      	str	r2, [r3, #28]
		WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <reg_wizchip_spi_cbfunc+0x4c>)
 8001544:	4a09      	ldr	r2, [pc, #36]	@ (800156c <reg_wizchip_spi_cbfunc+0x54>)
 8001546:	621a      	str	r2, [r3, #32]
 8001548:	e006      	b.n	8001558 <reg_wizchip_spi_cbfunc+0x40>
	}
	else
	{
		WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800154a:	4a06      	ldr	r2, [pc, #24]	@ (8001564 <reg_wizchip_spi_cbfunc+0x4c>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	61d3      	str	r3, [r2, #28]
		WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <reg_wizchip_spi_cbfunc+0x4c>)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6213      	str	r3, [r2, #32]
	}
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	2000001c 	.word	0x2000001c
 8001568:	08001455 	.word	0x08001455
 800156c:	08001465 	.word	0x08001465

08001570 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800157a:	bf00      	nop
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <reg_wizchip_spiburst_cbfunc+0x4c>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f9      	beq.n	800157c <reg_wizchip_spiburst_cbfunc+0xc>

	if(!spi_rb || !spi_wb)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <reg_wizchip_spiburst_cbfunc+0x24>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d106      	bne.n	80015a2 <reg_wizchip_spiburst_cbfunc+0x32>
	{
		WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <reg_wizchip_spiburst_cbfunc+0x50>)
 8001598:	625a      	str	r2, [r3, #36]	@ 0x24
		WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <reg_wizchip_spiburst_cbfunc+0x4c>)
 800159c:	4a09      	ldr	r2, [pc, #36]	@ (80015c4 <reg_wizchip_spiburst_cbfunc+0x54>)
 800159e:	629a      	str	r2, [r3, #40]	@ 0x28
 80015a0:	e006      	b.n	80015b0 <reg_wizchip_spiburst_cbfunc+0x40>
	}
	else
	{
		WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80015a2:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <reg_wizchip_spiburst_cbfunc+0x4c>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6253      	str	r3, [r2, #36]	@ 0x24
		WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <reg_wizchip_spiburst_cbfunc+0x4c>)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6293      	str	r3, [r2, #40]	@ 0x28
	}
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	2000001c 	.word	0x2000001c
 80015c0:	0800147d 	.word	0x0800147d
 80015c4:	080014a5 	.word	0x080014a5

080015c8 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
	uint8_t tmp = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	75fb      	strb	r3, [r7, #23]
#endif
	uint8_t* ptmp[2] = {0,0};
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
	switch(cwtype)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	f200 80c5 	bhi.w	8001772 <ctlwizchip+0x1aa>
 80015e8:	a201      	add	r2, pc, #4	@ (adr r2, 80015f0 <ctlwizchip+0x28>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001631 	.word	0x08001631
 80015f4:	08001637 	.word	0x08001637
 80015f8:	08001663 	.word	0x08001663
 80015fc:	08001657 	.word	0x08001657
 8001600:	08001671 	.word	0x08001671
 8001604:	0800167d 	.word	0x0800167d
 8001608:	0800168b 	.word	0x0800168b
 800160c:	080016b1 	.word	0x080016b1
 8001610:	080016d3 	.word	0x080016d3
 8001614:	08001717 	.word	0x08001717
 8001618:	0800171d 	.word	0x0800171d
 800161c:	08001725 	.word	0x08001725
 8001620:	08001779 	.word	0x08001779
 8001624:	0800172d 	.word	0x0800172d
 8001628:	0800173b 	.word	0x0800173b
 800162c:	08001757 	.word	0x08001757
	{
	case CW_RESET_WIZCHIP:
		wizchip_sw_reset();
 8001630:	f000 f8e8 	bl	8001804 <wizchip_sw_reset>
		break;
 8001634:	e0a1      	b.n	800177a <ctlwizchip+0x1b2>
	case CW_INIT_WIZCHIP:
		if(arg != 0)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <ctlwizchip+0x7e>
		{
			ptmp[0] = (uint8_t*)arg;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	60fb      	str	r3, [r7, #12]
			ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3308      	adds	r3, #8
 8001644:	613b      	str	r3, [r7, #16]
		}
		return wizchip_init(ptmp[0], ptmp[1]);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f925 	bl	800189c <wizchip_init>
 8001652:	4603      	mov	r3, r0
 8001654:	e092      	b.n	800177c <ctlwizchip+0x1b4>
	case CW_CLR_INTERRUPT:
		wizchip_clrinterrupt(*((intr_kind*)arg));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f9aa 	bl	80019b4 <wizchip_clrinterrupt>
		break;
 8001660:	e08b      	b.n	800177a <ctlwizchip+0x1b2>
	case CW_GET_INTERRUPT:
		*((intr_kind*)arg) = wizchip_getinterrupt();
 8001662:	f000 f9db 	bl	8001a1c <wizchip_getinterrupt>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	801a      	strh	r2, [r3, #0]
		break;
 800166e:	e084      	b.n	800177a <ctlwizchip+0x1b2>
	case CW_SET_INTRMASK:
		wizchip_setinterruptmask(*((intr_kind*)arg));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f9f6 	bl	8001a66 <wizchip_setinterruptmask>
		break;
 800167a:	e07e      	b.n	800177a <ctlwizchip+0x1b2>
	case CW_GET_INTRMASK:
		*((intr_kind*)arg) = wizchip_getinterruptmask();
 800167c:	f000 fa0e 	bl	8001a9c <wizchip_getinterruptmask>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	801a      	strh	r2, [r3, #0]
		break;
 8001688:	e077      	b.n	800177a <ctlwizchip+0x1b2>
		//M20150601 : This can be supported by W5200, W5500
		//#if _WIZCHIP_ > W5100
#if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
	case CW_SET_INTRTIME:
		setINTLEVEL(*(uint16_t*)arg);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	b29b      	uxth	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800169a:	f7ff fb29 	bl	8000cf0 <WIZCHIP_WRITE>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80016aa:	f7ff fb21 	bl	8000cf0 <WIZCHIP_WRITE>
		break;
 80016ae:	e064      	b.n	800177a <ctlwizchip+0x1b2>
	case CW_GET_INTRTIME:
		*(uint16_t*)arg = getINTLEVEL();
 80016b0:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80016b4:	f7ff fac6 	bl	8000c44 <WIZCHIP_READ>
 80016b8:	4603      	mov	r3, r0
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b29c      	uxth	r4, r3
 80016be:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80016c2:	f7ff fabf 	bl	8000c44 <WIZCHIP_READ>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4423      	add	r3, r4
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	801a      	strh	r2, [r3, #0]
		break;
 80016d0:	e053      	b.n	800177a <ctlwizchip+0x1b2>
#endif
	case CW_GET_ID:
		((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80016d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001784 <ctlwizchip+0x1bc>)
 80016d4:	789a      	ldrb	r2, [r3, #2]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	701a      	strb	r2, [r3, #0]
		((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a29      	ldr	r2, [pc, #164]	@ (8001784 <ctlwizchip+0x1bc>)
 80016e0:	78d2      	ldrb	r2, [r2, #3]
 80016e2:	701a      	strb	r2, [r3, #0]
		((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	3302      	adds	r3, #2
 80016e8:	4a26      	ldr	r2, [pc, #152]	@ (8001784 <ctlwizchip+0x1bc>)
 80016ea:	7912      	ldrb	r2, [r2, #4]
 80016ec:	701a      	strb	r2, [r3, #0]
		((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	3303      	adds	r3, #3
 80016f2:	4a24      	ldr	r2, [pc, #144]	@ (8001784 <ctlwizchip+0x1bc>)
 80016f4:	7952      	ldrb	r2, [r2, #5]
 80016f6:	701a      	strb	r2, [r3, #0]
		((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3304      	adds	r3, #4
 80016fc:	4a21      	ldr	r2, [pc, #132]	@ (8001784 <ctlwizchip+0x1bc>)
 80016fe:	7992      	ldrb	r2, [r2, #6]
 8001700:	701a      	strb	r2, [r3, #0]
		((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3305      	adds	r3, #5
 8001706:	4a1f      	ldr	r2, [pc, #124]	@ (8001784 <ctlwizchip+0x1bc>)
 8001708:	79d2      	ldrb	r2, [r2, #7]
 800170a:	701a      	strb	r2, [r3, #0]
		((uint8_t*)arg)[6] = 0;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	3306      	adds	r3, #6
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
		break;
 8001714:	e031      	b.n	800177a <ctlwizchip+0x1b2>
#if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
	case CW_RESET_PHY:
		wizphy_reset();
 8001716:	f000 fa13 	bl	8001b40 <wizphy_reset>
		break;
 800171a:	e02e      	b.n	800177a <ctlwizchip+0x1b2>
	case CW_SET_PHYCONF:
		wizphy_setphyconf((wiz_PhyConf*)arg);
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f000 fa36 	bl	8001b8e <wizphy_setphyconf>
		break;
 8001722:	e02a      	b.n	800177a <ctlwizchip+0x1b2>
	case CW_GET_PHYCONF:
		wizphy_getphyconf((wiz_PhyConf*)arg);
 8001724:	6838      	ldr	r0, [r7, #0]
 8001726:	f000 fa75 	bl	8001c14 <wizphy_getphyconf>
		break;
 800172a:	e026      	b.n	800177a <ctlwizchip+0x1b2>
	case CW_GET_PHYSTATUS:
		break;
	case CW_SET_PHYPOWMODE:
		return wizphy_setphypmode(*(uint8_t*)arg);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fad9 	bl	8001ce8 <wizphy_setphypmode>
 8001736:	4603      	mov	r3, r0
 8001738:	e020      	b.n	800177c <ctlwizchip+0x1b4>
#endif
#if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
	case CW_GET_PHYPOWMODE:
		tmp = wizphy_getphypmode();
 800173a:	f000 f9e8 	bl	8001b0e <wizphy_getphypmode>
 800173e:	4603      	mov	r3, r0
 8001740:	75fb      	strb	r3, [r7, #23]
		if((int8_t)tmp == -1) return -1;
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	2bff      	cmp	r3, #255	@ 0xff
 8001746:	d102      	bne.n	800174e <ctlwizchip+0x186>
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
 800174c:	e016      	b.n	800177c <ctlwizchip+0x1b4>
		*(uint8_t*)arg = tmp;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	7dfa      	ldrb	r2, [r7, #23]
 8001752:	701a      	strb	r2, [r3, #0]
		break;
 8001754:	e011      	b.n	800177a <ctlwizchip+0x1b2>
	case CW_GET_PHYLINK:
		tmp = wizphy_getphylink();
 8001756:	f000 f9c4 	bl	8001ae2 <wizphy_getphylink>
 800175a:	4603      	mov	r3, r0
 800175c:	75fb      	strb	r3, [r7, #23]
		if((int8_t)tmp == -1) return -1;
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	2bff      	cmp	r3, #255	@ 0xff
 8001762:	d102      	bne.n	800176a <ctlwizchip+0x1a2>
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	e008      	b.n	800177c <ctlwizchip+0x1b4>
		*(uint8_t*)arg = tmp;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	7dfa      	ldrb	r2, [r7, #23]
 800176e:	701a      	strb	r2, [r3, #0]
		break;
 8001770:	e003      	b.n	800177a <ctlwizchip+0x1b2>
#endif
	default:
		return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e001      	b.n	800177c <ctlwizchip+0x1b4>
		break;
 8001778:	bf00      	nop
	}
	return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	2000001c 	.word	0x2000001c

08001788 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]

	switch(cntype)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d82c      	bhi.n	80017f4 <ctlnetwork+0x6c>
 800179a:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <ctlnetwork+0x18>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b9 	.word	0x080017b9
 80017a4:	080017c1 	.word	0x080017c1
 80017a8:	080017c9 	.word	0x080017c9
 80017ac:	080017d7 	.word	0x080017d7
 80017b0:	080017e5 	.word	0x080017e5
 80017b4:	080017ed 	.word	0x080017ed
	{
	case CN_SET_NETINFO:
		wizchip_setnetinfo((wiz_NetInfo*)arg);
 80017b8:	6838      	ldr	r0, [r7, #0]
 80017ba:	f000 fadf 	bl	8001d7c <wizchip_setnetinfo>
		break;
 80017be:	e01c      	b.n	80017fa <ctlnetwork+0x72>
	case CN_GET_NETINFO:
		wizchip_getnetinfo((wiz_NetInfo*)arg);
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f000 fb2d 	bl	8001e20 <wizchip_getnetinfo>
		break;
 80017c6:	e018      	b.n	80017fa <ctlnetwork+0x72>
	case CN_SET_NETMODE:
		return wizchip_setnetmode(*(netmode_type*)arg);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fb67 	bl	8001ea0 <wizchip_setnetmode>
 80017d2:	4603      	mov	r3, r0
 80017d4:	e012      	b.n	80017fc <ctlnetwork+0x74>
	case CN_GET_NETMODE:
		*(netmode_type*)arg = wizchip_getnetmode();
 80017d6:	f000 fb85 	bl	8001ee4 <wizchip_getnetmode>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	701a      	strb	r2, [r3, #0]
		break;
 80017e2:	e00a      	b.n	80017fa <ctlnetwork+0x72>
	case CN_SET_TIMEOUT:
		wizchip_settimeout((wiz_NetTimeout*)arg);
 80017e4:	6838      	ldr	r0, [r7, #0]
 80017e6:	f000 fb85 	bl	8001ef4 <wizchip_settimeout>
		break;
 80017ea:	e006      	b.n	80017fa <ctlnetwork+0x72>
	case CN_GET_TIMEOUT:
		wizchip_gettimeout((wiz_NetTimeout*)arg);
 80017ec:	6838      	ldr	r0, [r7, #0]
 80017ee:	f000 fba2 	bl	8001f36 <wizchip_gettimeout>
		break;
 80017f2:	e002      	b.n	80017fa <ctlnetwork+0x72>
	default:
		return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	e000      	b.n	80017fc <ctlnetwork+0x74>
	}
	return 0;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
	uint16_t mr = (uint16_t)getMR();
	setMR(mr | MR_IND);
#endif
	//
	getSHAR(mac);
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2206      	movs	r2, #6
 800180e:	4619      	mov	r1, r3
 8001810:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001814:	f7ff fac4 	bl	8000da0 <WIZCHIP_READ_BUF>
	getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2204      	movs	r2, #4
 800181e:	4619      	mov	r1, r3
 8001820:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001824:	f7ff fabc 	bl	8000da0 <WIZCHIP_READ_BUF>
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	2204      	movs	r2, #4
 800182e:	4619      	mov	r1, r3
 8001830:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001834:	f7ff fab4 	bl	8000da0 <WIZCHIP_READ_BUF>
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2204      	movs	r2, #4
 800183e:	4619      	mov	r1, r3
 8001840:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001844:	f7ff faac 	bl	8000da0 <WIZCHIP_READ_BUF>
	setMR(MR_RST);
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fa50 	bl	8000cf0 <WIZCHIP_WRITE>
	getMR(); // for delay
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff f9f7 	bl	8000c44 <WIZCHIP_READ>
	//A2015051 : For indirect bus mode
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
	setMR(mr | MR_IND);
#endif
	//
	setSHAR(mac);
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2206      	movs	r2, #6
 800185a:	4619      	mov	r1, r3
 800185c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001860:	f7ff fafe 	bl	8000e60 <WIZCHIP_WRITE_BUF>
	setGAR(gw);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2204      	movs	r2, #4
 800186a:	4619      	mov	r1, r3
 800186c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001870:	f7ff faf6 	bl	8000e60 <WIZCHIP_WRITE_BUF>
	setSUBR(sn);
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	2204      	movs	r2, #4
 800187a:	4619      	mov	r1, r3
 800187c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001880:	f7ff faee 	bl	8000e60 <WIZCHIP_WRITE_BUF>
	setSIPR(sip);
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	2204      	movs	r2, #4
 800188a:	4619      	mov	r1, r3
 800188c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001890:	f7ff fae6 	bl	8000e60 <WIZCHIP_WRITE_BUF>
}
 8001894:	bf00      	nop
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	int8_t i;
#if _WIZCHIP_ < W5200
	int8_t j;
#endif
	int8_t tmp = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73bb      	strb	r3, [r7, #14]
	wizchip_sw_reset();
 80018aa:	f7ff ffab 	bl	8001804 <wizchip_sw_reset>
	if(txsize)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d03b      	beq.n	800192c <wizchip_init+0x90>
	{
		tmp = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e015      	b.n	80018ea <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80018d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	dd02      	ble.n	80018de <wizchip_init+0x42>
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	e066      	b.n	80019ac <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ee:	2b07      	cmp	r3, #7
 80018f0:	dde5      	ble.n	80018be <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e015      	b.n	8001924 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80018f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	3301      	adds	r3, #1
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8001906:	4618      	mov	r0, r3
 8001908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f9ec 	bl	8000cf0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3301      	adds	r3, #1
 8001920:	b2db      	uxtb	r3, r3
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001928:	2b07      	cmp	r3, #7
 800192a:	dde5      	ble.n	80018f8 <wizchip_init+0x5c>
#endif
		}	
	}

	if(rxsize)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d03b      	beq.n	80019aa <wizchip_init+0x10e>
	{
		tmp = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	e015      	b.n	8001968 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	4413      	add	r3, r2
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	4413      	add	r3, r2
 800194a:	b2db      	uxtb	r3, r3
 800194c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800194e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001952:	2b10      	cmp	r3, #16
 8001954:	dd02      	ble.n	800195c <wizchip_init+0xc0>
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e027      	b.n	80019ac <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	3301      	adds	r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196c:	2b07      	cmp	r3, #7
 800196e:	dde5      	ble.n	800193c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e015      	b.n	80019a2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	3301      	adds	r3, #1
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001984:	4618      	mov	r0, r3
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f7ff f9ad 	bl	8000cf0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	3301      	adds	r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	2b07      	cmp	r3, #7
 80019a8:	dde5      	ble.n	8001976 <wizchip_init+0xda>
#endif
		}
	}
	return 0;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
	uint8_t ir  = (uint8_t)intr;
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	73fb      	strb	r3, [r7, #15]
	uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	73bb      	strb	r3, [r7, #14]
	setIR(ir);
	//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
	setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
	setIR(ir);
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	f023 030f 	bic.w	r3, r3, #15
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4619      	mov	r1, r3
 80019d4:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80019d8:	f7ff f98a 	bl	8000cf0 <WIZCHIP_WRITE>
	//M20200227 : For clear
	//setSIR(sir);
	for(ir=0; ir<8; ir++){
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e014      	b.n	8001a0c <wizchip_clrinterrupt+0x58>
		if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80019e2:	7bba      	ldrb	r2, [r7, #14]
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	fa42 f303 	asr.w	r3, r2, r3
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <wizchip_clrinterrupt+0x52>
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	3301      	adds	r3, #1
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80019fe:	211f      	movs	r1, #31
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f975 	bl	8000cf0 <WIZCHIP_WRITE>
	for(ir=0; ir<8; ir++){
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	2b07      	cmp	r3, #7
 8001a10:	d9e7      	bls.n	80019e2 <wizchip_clrinterrupt+0x2e>
	}

#endif   
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
	uint8_t ir  = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71fb      	strb	r3, [r7, #7]
	uint8_t sir = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	71bb      	strb	r3, [r7, #6]
	uint16_t ret = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
	ret = getIR();
	ir = (uint8_t)(ret >> 8);
	sir = (uint8_t)ret;
#else
	ir  = getIR();
 8001a2e:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8001a32:	f7ff f907 	bl	8000c44 <WIZCHIP_READ>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f023 030f 	bic.w	r3, r3, #15
 8001a3c:	71fb      	strb	r3, [r7, #7]
	sir = getSIR();
 8001a3e:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8001a42:	f7ff f8ff 	bl	8000c44 <WIZCHIP_READ>
 8001a46:	4603      	mov	r3, r0
 8001a48:	71bb      	strb	r3, [r7, #6]
	ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
	ir &= ~(1 << 6);
#endif
	ret = sir;
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	80bb      	strh	r3, [r7, #4]
	ret = (ret << 8) + ir;
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	80bb      	strh	r3, [r7, #4]
	return (intr_kind)ret;
 8001a5c:	88bb      	ldrh	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	80fb      	strh	r3, [r7, #6]
	uint8_t imr  = (uint8_t)intr;
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	73fb      	strb	r3, [r7, #15]
	uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	73bb      	strb	r3, [r7, #14]
	setIMR(imr);
	//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
	setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
	setIMR(imr);
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001a84:	f7ff f934 	bl	8000cf0 <WIZCHIP_WRITE>
	setSIMR(simr);
 8001a88:	7bbb      	ldrb	r3, [r7, #14]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001a90:	f7ff f92e 	bl	8000cf0 <WIZCHIP_WRITE>
#endif   
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
	uint8_t imr  = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	uint8_t simr = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71bb      	strb	r3, [r7, #6]
	uint16_t ret = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
	ret = getIMR();
	imr = (uint8_t)(ret >> 8);
	simr = (uint8_t)ret;
#else
	imr  = getIMR();
 8001aae:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001ab2:	f7ff f8c7 	bl	8000c44 <WIZCHIP_READ>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	simr = getSIMR();
 8001aba:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001abe:	f7ff f8c1 	bl	8000c44 <WIZCHIP_READ>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71bb      	strb	r3, [r7, #6]
	imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
	imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
	ret = simr;
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	80bb      	strh	r3, [r7, #4]
	ret = (ret << 8) + imr;
 8001aca:	88bb      	ldrh	r3, [r7, #4]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	80bb      	strh	r3, [r7, #4]
	return (intr_kind)ret;
 8001ad8:	88bb      	ldrh	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
	int8_t tmp = PHY_LINK_OFF;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	71fb      	strb	r3, [r7, #7]
		tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
	if(getPHYSTATUS() & PHYSTATUS_LINK)
		tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
	if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001aec:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001af0:	f7ff f8a8 	bl	8000c44 <WIZCHIP_READ>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <wizphy_getphylink+0x20>
		tmp = PHY_LINK_ON;
 8001afe:	2301      	movs	r3, #1
 8001b00:	71fb      	strb	r3, [r7, #7]

#else
	tmp = -1;
#endif
	return tmp;
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
	int8_t tmp = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	71fb      	strb	r3, [r7, #7]
	if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
		tmp = PHY_POWER_DOWN;
	else
		tmp = PHY_POWER_NORM;
#elif _WIZCHIP_ == 5500
	if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8001b18:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001b1c:	f7ff f892 	bl	8000c44 <WIZCHIP_READ>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b26:	2b30      	cmp	r3, #48	@ 0x30
 8001b28:	d102      	bne.n	8001b30 <wizphy_getphypmode+0x22>
		tmp = PHY_POWER_DOWN;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	71fb      	strb	r3, [r7, #7]
 8001b2e:	e001      	b.n	8001b34 <wizphy_getphypmode+0x26>
	else
		tmp = PHY_POWER_NORM;
 8001b30:	2300      	movs	r3, #0
 8001b32:	71fb      	strb	r3, [r7, #7]
#else
	tmp = -1;
#endif
	return tmp;
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
	uint8_t tmp = getPHYCFGR();
 8001b46:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001b4a:	f7ff f87b 	bl	8000c44 <WIZCHIP_READ>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
	tmp &= PHYCFGR_RST;
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b58:	71fb      	strb	r3, [r7, #7]
	setPHYCFGR(tmp);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001b62:	f7ff f8c5 	bl	8000cf0 <WIZCHIP_WRITE>
	tmp = getPHYCFGR();
 8001b66:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001b6a:	f7ff f86b 	bl	8000c44 <WIZCHIP_READ>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
	tmp |= ~PHYCFGR_RST;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b78:	71fb      	strb	r3, [r7, #7]
	setPHYCFGR(tmp);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001b82:	f7ff f8b5 	bl	8000cf0 <WIZCHIP_WRITE>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
	if(phyconf->by == PHY_CONFBY_SW)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d104      	bne.n	8001bac <wizphy_setphyconf+0x1e>
		tmp |= PHYCFGR_OPMD;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	e003      	b.n	8001bb4 <wizphy_setphyconf+0x26>
	else
		tmp &= ~PHYCFGR_OPMD;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001bb2:	73fb      	strb	r3, [r7, #15]
	if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	785b      	ldrb	r3, [r3, #1]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d104      	bne.n	8001bc6 <wizphy_setphyconf+0x38>
		tmp |= PHYCFGR_OPMDC_ALLA;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e019      	b.n	8001bfa <wizphy_setphyconf+0x6c>
	else
	{
		if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	78db      	ldrb	r3, [r3, #3]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10d      	bne.n	8001bea <wizphy_setphyconf+0x5c>
		{
			if(phyconf->speed == PHY_SPEED_100)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	789b      	ldrb	r3, [r3, #2]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d104      	bne.n	8001be0 <wizphy_setphyconf+0x52>
				tmp |= PHYCFGR_OPMDC_100F;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	f043 0318 	orr.w	r3, r3, #24
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e00c      	b.n	8001bfa <wizphy_setphyconf+0x6c>
			else
				tmp |= PHYCFGR_OPMDC_10F;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e007      	b.n	8001bfa <wizphy_setphyconf+0x6c>
		}
		else
		{
			if(phyconf->speed == PHY_SPEED_100)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	789b      	ldrb	r3, [r3, #2]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d103      	bne.n	8001bfa <wizphy_setphyconf+0x6c>
				tmp |= PHYCFGR_OPMDC_100H;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	f043 0310 	orr.w	r3, r3, #16
 8001bf8:	73fb      	strb	r3, [r7, #15]
			else
				tmp |= PHYCFGR_OPMDC_10H;
		}
	}
	setPHYCFGR(tmp);
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001c02:	f7ff f875 	bl	8000cf0 <WIZCHIP_WRITE>
	wizphy_reset();
 8001c06:	f7ff ff9b 	bl	8001b40 <wizphy_reset>
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
	tmp = getPHYCFGR();
 8001c20:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001c24:	f7ff f80e 	bl	8000c44 <WIZCHIP_READ>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]
	phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	119b      	asrs	r3, r3, #6
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	701a      	strb	r2, [r3, #0]
	switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	d001      	beq.n	8001c4a <wizphy_getphyconf+0x36>
 8001c46:	2b38      	cmp	r3, #56	@ 0x38
 8001c48:	d103      	bne.n	8001c52 <wizphy_getphyconf+0x3e>
	{
	case PHYCFGR_OPMDC_ALLA:
	case PHYCFGR_OPMDC_100FA:
		phyconf->mode = PHY_MODE_AUTONEGO;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	705a      	strb	r2, [r3, #1]
		break;
 8001c50:	e003      	b.n	8001c5a <wizphy_getphyconf+0x46>
	default:
		phyconf->mode = PHY_MODE_MANUAL;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	705a      	strb	r2, [r3, #1]
		break;
 8001c58:	bf00      	nop
	}
	switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c60:	3b10      	subs	r3, #16
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	bf8c      	ite	hi
 8001c66:	2201      	movhi	r2, #1
 8001c68:	2200      	movls	r2, #0
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	d10f      	bne.n	8001c90 <wizphy_getphyconf+0x7c>
 8001c70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <wizphy_getphyconf+0xcc>)
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <wizphy_getphyconf+0x7c>
	{
	case PHYCFGR_OPMDC_100FA:
	case PHYCFGR_OPMDC_100F:
	case PHYCFGR_OPMDC_100H:
		phyconf->speed = PHY_SPEED_100;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	709a      	strb	r2, [r3, #2]
		break;
 8001c8e:	e003      	b.n	8001c98 <wizphy_getphyconf+0x84>
	default:
		phyconf->speed = PHY_SPEED_10;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	709a      	strb	r2, [r3, #2]
		break;
 8001c96:	bf00      	nop
	}
	switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c9e:	3b08      	subs	r3, #8
 8001ca0:	2b18      	cmp	r3, #24
 8001ca2:	bf8c      	ite	hi
 8001ca4:	2201      	movhi	r2, #1
 8001ca6:	2200      	movls	r2, #0
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d10f      	bne.n	8001cce <wizphy_getphyconf+0xba>
 8001cae:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <wizphy_getphyconf+0xd0>)
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <wizphy_getphyconf+0xba>
	{
	case PHYCFGR_OPMDC_100FA:
	case PHYCFGR_OPMDC_100F:
	case PHYCFGR_OPMDC_10F:
		phyconf->duplex = PHY_DUPLEX_FULL;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	70da      	strb	r2, [r3, #3]
		break;
 8001ccc:	e003      	b.n	8001cd6 <wizphy_getphyconf+0xc2>
	default:
		phyconf->duplex = PHY_DUPLEX_HALF;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	70da      	strb	r2, [r3, #3]
		break;
 8001cd4:	bf00      	nop
	}
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	00010101 	.word	0x00010101
 8001ce4:	01010001 	.word	0x01010001

08001ce8 <wizphy_setphypmode>:
	phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
	phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
	tmp = getPHYCFGR();
 8001cf6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001cfa:	f7fe ffa3 	bl	8000c44 <WIZCHIP_READ>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	73fb      	strb	r3, [r7, #15]
	if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <wizphy_setphypmode+0x2a>
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	e030      	b.n	8001d74 <wizphy_setphypmode+0x8c>
	tmp &= ~PHYCFGR_OPMDC_ALLA;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001d18:	73fb      	strb	r3, [r7, #15]
	if( pmode == PHY_POWER_DOWN)
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d104      	bne.n	8001d2a <wizphy_setphypmode+0x42>
		tmp |= PHYCFGR_OPMDC_PDOWN;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e003      	b.n	8001d32 <wizphy_setphypmode+0x4a>
	else
		tmp |= PHYCFGR_OPMDC_ALLA;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001d30:	73fb      	strb	r3, [r7, #15]
	setPHYCFGR(tmp);
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001d3a:	f7fe ffd9 	bl	8000cf0 <WIZCHIP_WRITE>
	wizphy_reset();
 8001d3e:	f7ff feff 	bl	8001b40 <wizphy_reset>
	tmp = getPHYCFGR();
 8001d42:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001d46:	f7fe ff7d 	bl	8000c44 <WIZCHIP_READ>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	73fb      	strb	r3, [r7, #15]
	if( pmode == PHY_POWER_DOWN)
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <wizphy_setphypmode+0x7a>
	{
		if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <wizphy_setphypmode+0x88>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e008      	b.n	8001d74 <wizphy_setphypmode+0x8c>
	}
	else
	{
		if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <wizphy_setphypmode+0x88>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e001      	b.n	8001d74 <wizphy_setphypmode+0x8c>
	}
	return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	@ 0x28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	6078      	str	r0, [r7, #4]
	setSHAR(pnetinfo->mac);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2206      	movs	r2, #6
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001d8e:	f7ff f867 	bl	8000e60 <WIZCHIP_WRITE_BUF>
	setGAR(pnetinfo->gw);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	330e      	adds	r3, #14
 8001d96:	2204      	movs	r2, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d9e:	f7ff f85f 	bl	8000e60 <WIZCHIP_WRITE_BUF>
	setSUBR(pnetinfo->sn);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	330a      	adds	r3, #10
 8001da6:	2204      	movs	r2, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001dae:	f7ff f857 	bl	8000e60 <WIZCHIP_WRITE_BUF>
	setSIPR(pnetinfo->ip);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3306      	adds	r3, #6
 8001db6:	2204      	movs	r2, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001dbe:	f7ff f84f 	bl	8000e60 <WIZCHIP_WRITE_BUF>

	_DNS_[0] = pnetinfo->dns[0];
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7c9a      	ldrb	r2, [r3, #18]
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <wizchip_setnetinfo+0x98>)
 8001dc8:	701a      	strb	r2, [r3, #0]
	_DNS_[1] = pnetinfo->dns[1];
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7cda      	ldrb	r2, [r3, #19]
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <wizchip_setnetinfo+0x98>)
 8001dd0:	705a      	strb	r2, [r3, #1]
	_DNS_[2] = pnetinfo->dns[2];
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7d1a      	ldrb	r2, [r3, #20]
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <wizchip_setnetinfo+0x98>)
 8001dd8:	709a      	strb	r2, [r3, #2]
	_DNS_[3] = pnetinfo->dns[3];
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7d5a      	ldrb	r2, [r3, #21]
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <wizchip_setnetinfo+0x98>)
 8001de0:	70da      	strb	r2, [r3, #3]
	_DHCP_   = pnetinfo->dhcp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7d9a      	ldrb	r2, [r3, #22]
 8001de6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <wizchip_setnetinfo+0x9c>)
 8001de8:	701a      	strb	r2, [r3, #0]

	wiz_NetInfo test;
	wizchip_getnetinfo(&test);
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f816 	bl	8001e20 <wizchip_getnetinfo>
	printf("Just set IP : %d.%d.%d.%d\r\n", test.ip[0], test.ip[1], test.ip[2], test.ip[3]);
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	4619      	mov	r1, r3
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	7c3b      	ldrb	r3, [r7, #16]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	7c7b      	ldrb	r3, [r7, #17]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	4603      	mov	r3, r0
 8001e06:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <wizchip_setnetinfo+0xa0>)
 8001e08:	f003 fce2 	bl	80057d0 <iprintf>
}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200001c0 	.word	0x200001c0
 8001e18:	200001c4 	.word	0x200001c4
 8001e1c:	08006d10 	.word	0x08006d10

08001e20 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	getSHAR(pnetinfo->mac);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001e32:	f7fe ffb5 	bl	8000da0 <WIZCHIP_READ_BUF>
	getGAR(pnetinfo->gw);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	330e      	adds	r3, #14
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e42:	f7fe ffad 	bl	8000da0 <WIZCHIP_READ_BUF>
	getSUBR(pnetinfo->sn);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	330a      	adds	r3, #10
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001e52:	f7fe ffa5 	bl	8000da0 <WIZCHIP_READ_BUF>
	getSIPR(pnetinfo->ip);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3306      	adds	r3, #6
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001e62:	f7fe ff9d 	bl	8000da0 <WIZCHIP_READ_BUF>
	pnetinfo->dns[0]= _DNS_[0];
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <wizchip_getnetinfo+0x78>)
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	749a      	strb	r2, [r3, #18]
	pnetinfo->dns[1]= _DNS_[1];
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <wizchip_getnetinfo+0x78>)
 8001e70:	785a      	ldrb	r2, [r3, #1]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	74da      	strb	r2, [r3, #19]
	pnetinfo->dns[2]= _DNS_[2];
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <wizchip_getnetinfo+0x78>)
 8001e78:	789a      	ldrb	r2, [r3, #2]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	751a      	strb	r2, [r3, #20]
	pnetinfo->dns[3]= _DNS_[3];
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <wizchip_getnetinfo+0x78>)
 8001e80:	78da      	ldrb	r2, [r3, #3]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	755a      	strb	r2, [r3, #21]
	pnetinfo->dhcp  = _DHCP_;
 8001e86:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <wizchip_getnetinfo+0x7c>)
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	759a      	strb	r2, [r3, #22]
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200001c0 	.word	0x200001c0
 8001e9c:	200001c4 	.word	0x200001c4

08001ea0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
	if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
	if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <wizchip_setnetmode+0x1e>
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	e00e      	b.n	8001edc <wizchip_setnetmode+0x3c>
#endif      
	tmp = getMR();
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7fe fec0 	bl	8000c44 <WIZCHIP_READ>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	73fb      	strb	r3, [r7, #15]
	tmp |= (uint8_t)netmode;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	73fb      	strb	r3, [r7, #15]
	setMR(tmp);
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7fe ff0b 	bl	8000cf0 <WIZCHIP_WRITE>
	return 0;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	return (netmode_type) getMR();
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7fe feab 	bl	8000c44 <WIZCHIP_READ>
 8001eee:	4603      	mov	r3, r0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	setRCR(nettime->retry_cnt);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8001f06:	f7fe fef3 	bl	8000cf0 <WIZCHIP_WRITE>
	setRTR(nettime->time_100us);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	885b      	ldrh	r3, [r3, #2]
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8001f1a:	f7fe fee9 	bl	8000cf0 <WIZCHIP_WRITE>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	885b      	ldrh	r3, [r3, #2]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	4619      	mov	r1, r3
 8001f26:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8001f2a:	f7fe fee1 	bl	8000cf0 <WIZCHIP_WRITE>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001f36:	b590      	push	{r4, r7, lr}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	nettime->retry_cnt = getRCR();
 8001f3e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8001f42:	f7fe fe7f 	bl	8000c44 <WIZCHIP_READ>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	701a      	strb	r2, [r3, #0]
	nettime->time_100us = getRTR();
 8001f4e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8001f52:	f7fe fe77 	bl	8000c44 <WIZCHIP_READ>
 8001f56:	4603      	mov	r3, r0
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	b29c      	uxth	r4, r3
 8001f5c:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8001f60:	f7fe fe70 	bl	8000c44 <WIZCHIP_READ>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4423      	add	r3, r4
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	805a      	strh	r2, [r3, #2]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}
	...

08001f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f7c:	f7fe fdc4 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f80:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f82:	490d      	ldr	r1, [pc, #52]	@ (8001fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f84:	4a0d      	ldr	r2, [pc, #52]	@ (8001fbc <LoopForever+0xe>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f98:	4c0a      	ldr	r4, [pc, #40]	@ (8001fc4 <LoopForever+0x16>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f003 fe6b 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001faa:	f7fe fb51 	bl	8000650 <main>

08001fae <LoopForever>:

LoopForever:
    b LoopForever
 8001fae:	e7fe      	b.n	8001fae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001fbc:	08006db8 	.word	0x08006db8
  ldr r2, =_sbss
 8001fc0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001fc4:	20000318 	.word	0x20000318

08001fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC1_2_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <HAL_Init+0x3c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a0b      	ldr	r2, [pc, #44]	@ (8002008 <HAL_Init+0x3c>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe2:	2003      	movs	r0, #3
 8001fe4:	f000 f944 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f000 f80f 	bl	800200c <HAL_InitTick>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	71fb      	strb	r3, [r7, #7]
 8001ff8:	e001      	b.n	8001ffe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ffa:	f7fe fc7b 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40022000 	.word	0x40022000

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002018:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <HAL_InitTick+0x6c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d023      	beq.n	8002068 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002020:	4b16      	ldr	r3, [pc, #88]	@ (800207c <HAL_InitTick+0x70>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <HAL_InitTick+0x6c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f941 	bl	80022be <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0f      	cmp	r3, #15
 8002046:	d809      	bhi.n	800205c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002048:	2200      	movs	r2, #0
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f000 f919 	bl	8002286 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002054:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <HAL_InitTick+0x74>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e007      	b.n	800206c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e004      	b.n	800206c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e001      	b.n	800206c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800206c:	7bfb      	ldrb	r3, [r7, #15]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000004c 	.word	0x2000004c
 800207c:	20000018 	.word	0x20000018
 8002080:	20000048 	.word	0x20000048

08002084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_IncTick+0x20>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_IncTick+0x24>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
 8002094:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <HAL_IncTick+0x24>)
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	2000004c 	.word	0x2000004c
 80020a8:	200001c8 	.word	0x200001c8

080020ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return uwTick;
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <HAL_GetTick+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	200001c8 	.word	0x200001c8

080020c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020cc:	f7ff ffee 	bl	80020ac <HAL_GetTick>
 80020d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d005      	beq.n	80020ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020de:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <HAL_Delay+0x44>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ea:	bf00      	nop
 80020ec:	f7ff ffde 	bl	80020ac <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d8f7      	bhi.n	80020ec <HAL_Delay+0x28>
  {
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000004c 	.word	0x2000004c

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002134:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	@ (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	@ (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	@ (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	@ 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff8e 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	@ (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff47 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff5c 	bl	8002154 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff8e 	bl	80021c4 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5d 	bl	8002170 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffb0 	bl	800222c <SysTick_Config>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e6:	e17f      	b.n	80025e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8171 	beq.w	80025e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d005      	beq.n	8002318 <HAL_GPIO_Init+0x40>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d130      	bne.n	800237a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800234e:	2201      	movs	r2, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 0201 	and.w	r2, r3, #1
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b03      	cmp	r3, #3
 8002384:	d118      	bne.n	80023b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800238c:	2201      	movs	r2, #1
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	f003 0201 	and.w	r2, r3, #1
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d017      	beq.n	80023f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d123      	bne.n	8002448 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	08da      	lsrs	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3208      	adds	r2, #8
 8002408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	220f      	movs	r2, #15
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	08da      	lsrs	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	6939      	ldr	r1, [r7, #16]
 8002444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0203 	and.w	r2, r3, #3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80ac 	beq.w	80025e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	4b5f      	ldr	r3, [pc, #380]	@ (8002608 <HAL_GPIO_Init+0x330>)
 800248c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248e:	4a5e      	ldr	r2, [pc, #376]	@ (8002608 <HAL_GPIO_Init+0x330>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6613      	str	r3, [r2, #96]	@ 0x60
 8002496:	4b5c      	ldr	r3, [pc, #368]	@ (8002608 <HAL_GPIO_Init+0x330>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a2:	4a5a      	ldr	r2, [pc, #360]	@ (800260c <HAL_GPIO_Init+0x334>)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024cc:	d025      	beq.n	800251a <HAL_GPIO_Init+0x242>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002610 <HAL_GPIO_Init+0x338>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d01f      	beq.n	8002516 <HAL_GPIO_Init+0x23e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002614 <HAL_GPIO_Init+0x33c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x23a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002618 <HAL_GPIO_Init+0x340>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x236>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4c      	ldr	r2, [pc, #304]	@ (800261c <HAL_GPIO_Init+0x344>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x232>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002620 <HAL_GPIO_Init+0x348>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x22e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002624 <HAL_GPIO_Init+0x34c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x22a>
 80024fe:	2306      	movs	r3, #6
 8002500:	e00c      	b.n	800251c <HAL_GPIO_Init+0x244>
 8002502:	2307      	movs	r3, #7
 8002504:	e00a      	b.n	800251c <HAL_GPIO_Init+0x244>
 8002506:	2305      	movs	r3, #5
 8002508:	e008      	b.n	800251c <HAL_GPIO_Init+0x244>
 800250a:	2304      	movs	r3, #4
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x244>
 800250e:	2303      	movs	r3, #3
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x244>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x244>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x244>
 800251a:	2300      	movs	r3, #0
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	f002 0203 	and.w	r2, r2, #3
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4093      	lsls	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800252c:	4937      	ldr	r1, [pc, #220]	@ (800260c <HAL_GPIO_Init+0x334>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800253a:	4b3b      	ldr	r3, [pc, #236]	@ (8002628 <HAL_GPIO_Init+0x350>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800255e:	4a32      	ldr	r2, [pc, #200]	@ (8002628 <HAL_GPIO_Init+0x350>)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002564:	4b30      	ldr	r3, [pc, #192]	@ (8002628 <HAL_GPIO_Init+0x350>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002588:	4a27      	ldr	r2, [pc, #156]	@ (8002628 <HAL_GPIO_Init+0x350>)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800258e:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <HAL_GPIO_Init+0x350>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002628 <HAL_GPIO_Init+0x350>)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002628 <HAL_GPIO_Init+0x350>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025dc:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <HAL_GPIO_Init+0x350>)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f47f ae78 	bne.w	80022e8 <HAL_GPIO_Init+0x10>
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	40010000 	.word	0x40010000
 8002610:	48000400 	.word	0x48000400
 8002614:	48000800 	.word	0x48000800
 8002618:	48000c00 	.word	0x48000c00
 800261c:	48001000 	.word	0x48001000
 8002620:	48001400 	.word	0x48001400
 8002624:	48001800 	.word	0x48001800
 8002628:	40010400 	.word	0x40010400

0800262c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800263c:	787b      	ldrb	r3, [r7, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002648:	e002      	b.n	8002650 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <HAL_PWREx_GetVoltageRange+0x18>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40007000 	.word	0x40007000

08002678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002686:	d130      	bne.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002688:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002694:	d038      	beq.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800269e:	4a1e      	ldr	r2, [pc, #120]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026a6:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2232      	movs	r2, #50	@ 0x32
 80026ac:	fb02 f303 	mul.w	r3, r2, r3
 80026b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002720 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0c9b      	lsrs	r3, r3, #18
 80026b8:	3301      	adds	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026bc:	e002      	b.n	80026c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c4:	4b14      	ldr	r3, [pc, #80]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d0:	d102      	bne.n	80026d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f2      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e4:	d110      	bne.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e00f      	b.n	800270a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026f6:	d007      	beq.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026f8:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002700:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002702:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002706:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40007000 	.word	0x40007000
 800271c:	20000018 	.word	0x20000018
 8002720:	431bde83 	.word	0x431bde83

08002724 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e3ca      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002736:	4b97      	ldr	r3, [pc, #604]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002740:	4b94      	ldr	r3, [pc, #592]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80e4 	beq.w	8002920 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_RCC_OscConfig+0x4a>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b0c      	cmp	r3, #12
 8002762:	f040 808b 	bne.w	800287c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 8087 	bne.w	800287c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276e:	4b89      	ldr	r3, [pc, #548]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x62>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e3a2      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	4b82      	ldr	r3, [pc, #520]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_RCC_OscConfig+0x7c>
 8002796:	4b7f      	ldr	r3, [pc, #508]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800279e:	e005      	b.n	80027ac <HAL_RCC_OscConfig+0x88>
 80027a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d223      	bcs.n	80027f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fd55 	bl	8003264 <RCC_SetFlashLatencyFromMSIRange>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e383      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c4:	4b73      	ldr	r3, [pc, #460]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a72      	ldr	r2, [pc, #456]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b70      	ldr	r3, [pc, #448]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	496d      	ldr	r1, [pc, #436]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	4968      	ldr	r1, [pc, #416]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
 80027f6:	e025      	b.n	8002844 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f8:	4b66      	ldr	r3, [pc, #408]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a65      	ldr	r2, [pc, #404]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b63      	ldr	r3, [pc, #396]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4960      	ldr	r1, [pc, #384]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002816:	4b5f      	ldr	r3, [pc, #380]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	495b      	ldr	r1, [pc, #364]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fd15 	bl	8003264 <RCC_SetFlashLatencyFromMSIRange>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e343      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002844:	f000 fc4a 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b52      	ldr	r3, [pc, #328]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	4950      	ldr	r1, [pc, #320]	@ (8002998 <HAL_RCC_OscConfig+0x274>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	4a4e      	ldr	r2, [pc, #312]	@ (800299c <HAL_RCC_OscConfig+0x278>)
 8002862:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002864:	4b4e      	ldr	r3, [pc, #312]	@ (80029a0 <HAL_RCC_OscConfig+0x27c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fbcf 	bl	800200c <HAL_InitTick>
 800286e:	4603      	mov	r3, r0
 8002870:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d052      	beq.n	800291e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	e327      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d032      	beq.n	80028ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002884:	4b43      	ldr	r3, [pc, #268]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a42      	ldr	r2, [pc, #264]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002890:	f7ff fc0c 	bl	80020ac <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002898:	f7ff fc08 	bl	80020ac <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e310      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b6:	4b37      	ldr	r3, [pc, #220]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a36      	ldr	r2, [pc, #216]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b34      	ldr	r3, [pc, #208]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4931      	ldr	r1, [pc, #196]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	492c      	ldr	r1, [pc, #176]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	e01a      	b.n	8002920 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a29      	ldr	r2, [pc, #164]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f6:	f7ff fbd9 	bl	80020ac <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fe:	f7ff fbd5 	bl	80020ac <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e2dd      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002910:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x1da>
 800291c:	e000      	b.n	8002920 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800291e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d074      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x21a>
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d10e      	bne.n	8002956 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d10b      	bne.n	8002956 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293e:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d064      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d160      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e2ba      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x24a>
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e026      	b.n	80029bc <HAL_RCC_OscConfig+0x298>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002976:	d115      	bne.n	80029a4 <HAL_RCC_OscConfig+0x280>
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a05      	ldr	r2, [pc, #20]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800297e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b03      	ldr	r3, [pc, #12]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a02      	ldr	r2, [pc, #8]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e014      	b.n	80029bc <HAL_RCC_OscConfig+0x298>
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	08006d2c 	.word	0x08006d2c
 800299c:	20000018 	.word	0x20000018
 80029a0:	20000048 	.word	0x20000048
 80029a4:	4ba0      	ldr	r3, [pc, #640]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a9f      	ldr	r2, [pc, #636]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 80029aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b9d      	ldr	r3, [pc, #628]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a9c      	ldr	r2, [pc, #624]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 80029b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7ff fb72 	bl	80020ac <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7ff fb6e 	bl	80020ac <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	@ 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e276      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	4b92      	ldr	r3, [pc, #584]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x2a8>
 80029ea:	e014      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7ff fb5e 	bl	80020ac <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7ff fb5a 	bl	80020ac <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	@ 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e262      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a06:	4b88      	ldr	r3, [pc, #544]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2d0>
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d060      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_OscConfig+0x310>
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d116      	bne.n	8002a62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a34:	4b7c      	ldr	r3, [pc, #496]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x328>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e23f      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b76      	ldr	r3, [pc, #472]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	4973      	ldr	r1, [pc, #460]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a60:	e040      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d023      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7ff fb19 	bl	80020ac <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7ff fb15 	bl	80020ac <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e21d      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a90:	4b65      	ldr	r3, [pc, #404]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b62      	ldr	r3, [pc, #392]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	495f      	ldr	r1, [pc, #380]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
 8002ab0:	e018      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7ff faf5 	bl	80020ac <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7ff faf1 	bl	80020ac <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1f9      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ad8:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d03c      	beq.n	8002b6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af8:	4b4b      	ldr	r3, [pc, #300]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afe:	4a4a      	ldr	r2, [pc, #296]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7ff fad0 	bl	80020ac <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b10:	f7ff facc 	bl	80020ac <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1d4      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b22:	4b41      	ldr	r3, [pc, #260]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <HAL_RCC_OscConfig+0x3ec>
 8002b30:	e01b      	b.n	8002b6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b32:	4b3d      	ldr	r3, [pc, #244]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b38:	4a3b      	ldr	r2, [pc, #236]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7ff fab3 	bl	80020ac <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7ff faaf 	bl	80020ac <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1b7      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b5c:	4b32      	ldr	r3, [pc, #200]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ef      	bne.n	8002b4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80a6 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	4a26      	ldr	r2, [pc, #152]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b94:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba4:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <HAL_RCC_OscConfig+0x508>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d118      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <HAL_RCC_OscConfig+0x508>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c2c <HAL_RCC_OscConfig+0x508>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbc:	f7ff fa76 	bl	80020ac <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7ff fa72 	bl	80020ac <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e17a      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <HAL_RCC_OscConfig+0x508>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d108      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4d8>
 8002bea:	4b0f      	ldr	r3, [pc, #60]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bfa:	e029      	b.n	8002c50 <HAL_RCC_OscConfig+0x52c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d115      	bne.n	8002c30 <HAL_RCC_OscConfig+0x50c>
 8002c04:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0a:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c14:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1a:	4a03      	ldr	r2, [pc, #12]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c24:	e014      	b.n	8002c50 <HAL_RCC_OscConfig+0x52c>
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	4b9c      	ldr	r3, [pc, #624]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	4a9b      	ldr	r2, [pc, #620]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c40:	4b98      	ldr	r3, [pc, #608]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c46:	4a97      	ldr	r2, [pc, #604]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d016      	beq.n	8002c86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7ff fa28 	bl	80020ac <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7ff fa24 	bl	80020ac <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e12a      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c76:	4b8b      	ldr	r3, [pc, #556]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ed      	beq.n	8002c60 <HAL_RCC_OscConfig+0x53c>
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c86:	f7ff fa11 	bl	80020ac <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7ff fa0d 	bl	80020ac <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e113      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ed      	bne.n	8002c8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbc:	4a79      	ldr	r2, [pc, #484]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80fe 	beq.w	8002eca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	f040 80d0 	bne.w	8002e78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cd8:	4b72      	ldr	r3, [pc, #456]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d130      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d127      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d11f      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d18:	2a07      	cmp	r2, #7
 8002d1a:	bf14      	ite	ne
 8002d1c:	2201      	movne	r2, #1
 8002d1e:	2200      	moveq	r2, #0
 8002d20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d113      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	3b01      	subs	r3, #1
 8002d34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	3b01      	subs	r3, #1
 8002d48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d06e      	beq.n	8002e2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d069      	beq.n	8002e28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d54:	4b53      	ldr	r3, [pc, #332]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d60:	4b50      	ldr	r3, [pc, #320]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0ad      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d70:	4b4c      	ldr	r3, [pc, #304]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a4b      	ldr	r2, [pc, #300]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d7c:	f7ff f996 	bl	80020ac <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7ff f992 	bl	80020ac <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e09a      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d96:	4b43      	ldr	r3, [pc, #268]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da2:	4b40      	ldr	r3, [pc, #256]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	4b40      	ldr	r3, [pc, #256]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002db2:	3a01      	subs	r2, #1
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002dbc:	0212      	lsls	r2, r2, #8
 8002dbe:	4311      	orrs	r1, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002dc4:	0852      	lsrs	r2, r2, #1
 8002dc6:	3a01      	subs	r2, #1
 8002dc8:	0552      	lsls	r2, r2, #21
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002dd0:	0852      	lsrs	r2, r2, #1
 8002dd2:	3a01      	subs	r2, #1
 8002dd4:	0652      	lsls	r2, r2, #25
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ddc:	0912      	lsrs	r2, r2, #4
 8002dde:	0452      	lsls	r2, r2, #17
 8002de0:	430a      	orrs	r2, r1
 8002de2:	4930      	ldr	r1, [pc, #192]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002de8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e00:	f7ff f954 	bl	80020ac <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7ff f950 	bl	80020ac <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e058      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e26:	e050      	b.n	8002eca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e04f      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d148      	bne.n	8002eca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e44:	4b17      	ldr	r3, [pc, #92]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a16      	ldr	r2, [pc, #88]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e50:	f7ff f92c 	bl	80020ac <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7ff f928 	bl	80020ac <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e030      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x734>
 8002e76:	e028      	b.n	8002eca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d023      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a08      	ldr	r2, [pc, #32]	@ (8002ea4 <HAL_RCC_OscConfig+0x780>)
 8002e84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7ff f90f 	bl	80020ac <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e90:	e00c      	b.n	8002eac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e92:	f7ff f90b 	bl	80020ac <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d905      	bls.n	8002eac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e013      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eac:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_RCC_OscConfig+0x7b0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ec      	bne.n	8002e92 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eb8:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_RCC_OscConfig+0x7b0>)
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	4905      	ldr	r1, [pc, #20]	@ (8002ed4 <HAL_RCC_OscConfig+0x7b0>)
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_RCC_OscConfig+0x7b4>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
 8002ec4:	e001      	b.n	8002eca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	feeefffc 	.word	0xfeeefffc

08002edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0e7      	b.n	80030c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b75      	ldr	r3, [pc, #468]	@ (80030c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d910      	bls.n	8002f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b72      	ldr	r3, [pc, #456]	@ (80030c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 0207 	bic.w	r2, r3, #7
 8002f06:	4970      	ldr	r1, [pc, #448]	@ (80030c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b6e      	ldr	r3, [pc, #440]	@ (80030c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0cf      	b.n	80030c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d010      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	4b66      	ldr	r3, [pc, #408]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d908      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3c:	4b63      	ldr	r3, [pc, #396]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4960      	ldr	r1, [pc, #384]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d04c      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d107      	bne.n	8002f72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f62:	4b5a      	ldr	r3, [pc, #360]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d121      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0a6      	b.n	80030c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f7a:	4b54      	ldr	r3, [pc, #336]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d115      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e09a      	b.n	80030c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f92:	4b4e      	ldr	r3, [pc, #312]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e08e      	b.n	80030c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e086      	b.n	80030c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fb2:	4b46      	ldr	r3, [pc, #280]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f023 0203 	bic.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4943      	ldr	r1, [pc, #268]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc4:	f7ff f872 	bl	80020ac <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fcc:	f7ff f86e 	bl	80020ac <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e06e      	b.n	80030c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 020c 	and.w	r2, r3, #12
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d1eb      	bne.n	8002fcc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	4b31      	ldr	r3, [pc, #196]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800300c:	429a      	cmp	r2, r3
 800300e:	d208      	bcs.n	8003022 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003010:	4b2e      	ldr	r3, [pc, #184]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	492b      	ldr	r1, [pc, #172]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003022:	4b29      	ldr	r3, [pc, #164]	@ (80030c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d210      	bcs.n	8003052 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003030:	4b25      	ldr	r3, [pc, #148]	@ (80030c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 0207 	bic.w	r2, r3, #7
 8003038:	4923      	ldr	r1, [pc, #140]	@ (80030c8 <HAL_RCC_ClockConfig+0x1ec>)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003040:	4b21      	ldr	r3, [pc, #132]	@ (80030c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d001      	beq.n	8003052 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e036      	b.n	80030c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305e:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	4918      	ldr	r1, [pc, #96]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d009      	beq.n	8003090 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307c:	4b13      	ldr	r3, [pc, #76]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4910      	ldr	r1, [pc, #64]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003090:	f000 f824 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <HAL_RCC_ClockConfig+0x1f0>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	490b      	ldr	r1, [pc, #44]	@ (80030d0 <HAL_RCC_ClockConfig+0x1f4>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ac:	4a09      	ldr	r2, [pc, #36]	@ (80030d4 <HAL_RCC_ClockConfig+0x1f8>)
 80030ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030b0:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <HAL_RCC_ClockConfig+0x1fc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe ffa9 	bl	800200c <HAL_InitTick>
 80030ba:	4603      	mov	r3, r0
 80030bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80030be:	7afb      	ldrb	r3, [r7, #11]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08006d2c 	.word	0x08006d2c
 80030d4:	20000018 	.word	0x20000018
 80030d8:	20000048 	.word	0x20000048

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	@ 0x24
 80030e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ea:	4b3e      	ldr	r3, [pc, #248]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f4:	4b3b      	ldr	r3, [pc, #236]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x34>
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d121      	bne.n	800314e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d11e      	bne.n	800314e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003110:	4b34      	ldr	r3, [pc, #208]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800311c:	4b31      	ldr	r3, [pc, #196]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	e005      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800312c:	4b2d      	ldr	r3, [pc, #180]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003138:	4a2b      	ldr	r2, [pc, #172]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003140:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d102      	bne.n	800315a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003154:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	e004      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d101      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003160:	4b23      	ldr	r3, [pc, #140]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003162:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d134      	bne.n	80031d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d003      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0xa6>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b03      	cmp	r3, #3
 800317e:	d003      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0xac>
 8003180:	e005      	b.n	800318e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003182:	4b1a      	ldr	r3, [pc, #104]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003184:	617b      	str	r3, [r7, #20]
      break;
 8003186:	e005      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003188:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800318a:	617b      	str	r3, [r7, #20]
      break;
 800318c:	e002      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	617b      	str	r3, [r7, #20]
      break;
 8003192:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	3301      	adds	r3, #1
 80031a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031a2:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	fb03 f202 	mul.w	r2, r3, r2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031ba:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	0e5b      	lsrs	r3, r3, #25
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	3301      	adds	r3, #1
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031d4:	69bb      	ldr	r3, [r7, #24]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08006d44 	.word	0x08006d44
 80031ec:	00f42400 	.word	0x00f42400
 80031f0:	007a1200 	.word	0x007a1200

080031f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f8:	4b03      	ldr	r3, [pc, #12]	@ (8003208 <HAL_RCC_GetHCLKFreq+0x14>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000018 	.word	0x20000018

0800320c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003210:	f7ff fff0 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	4904      	ldr	r1, [pc, #16]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000
 8003234:	08006d3c 	.word	0x08006d3c

08003238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800323c:	f7ff ffda 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0adb      	lsrs	r3, r3, #11
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4904      	ldr	r1, [pc, #16]	@ (8003260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000
 8003260:	08006d3c 	.word	0x08006d3c

08003264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003270:	4b2a      	ldr	r3, [pc, #168]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800327c:	f7ff f9ee 	bl	800265c <HAL_PWREx_GetVoltageRange>
 8003280:	6178      	str	r0, [r7, #20]
 8003282:	e014      	b.n	80032ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	4b25      	ldr	r3, [pc, #148]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	4a24      	ldr	r2, [pc, #144]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003290:	4b22      	ldr	r3, [pc, #136]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800329c:	f7ff f9de 	bl	800265c <HAL_PWREx_GetVoltageRange>
 80032a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b1e      	ldr	r3, [pc, #120]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	4a1d      	ldr	r2, [pc, #116]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b4:	d10b      	bne.n	80032ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b80      	cmp	r3, #128	@ 0x80
 80032ba:	d919      	bls.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2ba0      	cmp	r3, #160	@ 0xa0
 80032c0:	d902      	bls.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032c2:	2302      	movs	r3, #2
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	e013      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032c8:	2301      	movs	r3, #1
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	e010      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b80      	cmp	r3, #128	@ 0x80
 80032d2:	d902      	bls.n	80032da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032d4:	2303      	movs	r3, #3
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	e00a      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b80      	cmp	r3, #128	@ 0x80
 80032de:	d102      	bne.n	80032e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032e0:	2302      	movs	r3, #2
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	e004      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b70      	cmp	r3, #112	@ 0x70
 80032ea:	d101      	bne.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032ec:	2301      	movs	r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 0207 	bic.w	r2, r3, #7
 80032f8:	4909      	ldr	r1, [pc, #36]	@ (8003320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003300:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	40022000 	.word	0x40022000

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800332c:	2300      	movs	r3, #0
 800332e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003330:	2300      	movs	r3, #0
 8003332:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800333c:	2b00      	cmp	r3, #0
 800333e:	d041      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003344:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003348:	d02a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800334a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800334e:	d824      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003350:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003354:	d008      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003356:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800335a:	d81e      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003360:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003364:	d010      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003366:	e018      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003368:	4b86      	ldr	r3, [pc, #536]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a85      	ldr	r2, [pc, #532]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003372:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003374:	e015      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fabb 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003386:	e00c      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3320      	adds	r3, #32
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fba6 	bl	8003ae0 <RCCEx_PLLSAI2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003398:	e003      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	74fb      	strb	r3, [r7, #19]
      break;
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033a8:	4b76      	ldr	r3, [pc, #472]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033b6:	4973      	ldr	r1, [pc, #460]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033be:	e001      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d041      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033d8:	d02a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033de:	d824      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033e4:	d008      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033ea:	d81e      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033f4:	d010      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033f6:	e018      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033f8:	4b62      	ldr	r3, [pc, #392]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a61      	ldr	r2, [pc, #388]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003402:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003404:	e015      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fa73 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003416:	e00c      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3320      	adds	r3, #32
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fb5e 	bl	8003ae0 <RCCEx_PLLSAI2_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003428:	e003      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	74fb      	strb	r3, [r7, #19]
      break;
 800342e:	e000      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003438:	4b52      	ldr	r3, [pc, #328]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003446:	494f      	ldr	r1, [pc, #316]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800344e:	e001      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80a0 	beq.w	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003466:	4b47      	ldr	r3, [pc, #284]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00d      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347c:	4b41      	ldr	r3, [pc, #260]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	4a40      	ldr	r2, [pc, #256]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003486:	6593      	str	r3, [r2, #88]	@ 0x58
 8003488:	4b3e      	ldr	r3, [pc, #248]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003494:	2301      	movs	r3, #1
 8003496:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003498:	4b3b      	ldr	r3, [pc, #236]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a3a      	ldr	r2, [pc, #232]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800349e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a4:	f7fe fe02 	bl	80020ac <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034aa:	e009      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ac:	f7fe fdfe 	bl	80020ac <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d902      	bls.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	74fb      	strb	r3, [r7, #19]
        break;
 80034be:	e005      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034c0:	4b31      	ldr	r3, [pc, #196]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ef      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d15c      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01f      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d019      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034f0:	4b24      	ldr	r3, [pc, #144]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034fc:	4b21      	ldr	r3, [pc, #132]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	4a20      	ldr	r2, [pc, #128]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800350c:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003512:	4a1c      	ldr	r2, [pc, #112]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800351c:	4a19      	ldr	r2, [pc, #100]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fe fdbd 	bl	80020ac <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003534:	e00b      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe fdb9 	bl	80020ac <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d902      	bls.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	74fb      	strb	r3, [r7, #19]
            break;
 800354c:	e006      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0ec      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10c      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003562:	4b08      	ldr	r3, [pc, #32]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003568:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003572:	4904      	ldr	r1, [pc, #16]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800357a:	e009      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
 8003580:	e006      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003590:	7c7b      	ldrb	r3, [r7, #17]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d105      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003596:	4b9e      	ldr	r3, [pc, #632]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359a:	4a9d      	ldr	r2, [pc, #628]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ae:	4b98      	ldr	r3, [pc, #608]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b4:	f023 0203 	bic.w	r2, r3, #3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035bc:	4994      	ldr	r1, [pc, #592]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d6:	f023 020c 	bic.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035de:	498c      	ldr	r1, [pc, #560]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035f2:	4b87      	ldr	r3, [pc, #540]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	4983      	ldr	r1, [pc, #524]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003614:	4b7e      	ldr	r3, [pc, #504]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	497b      	ldr	r1, [pc, #492]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003636:	4b76      	ldr	r3, [pc, #472]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003644:	4972      	ldr	r1, [pc, #456]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003658:	4b6d      	ldr	r3, [pc, #436]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003666:	496a      	ldr	r1, [pc, #424]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800367a:	4b65      	ldr	r3, [pc, #404]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003680:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003688:	4961      	ldr	r1, [pc, #388]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800369c:	4b5c      	ldr	r3, [pc, #368]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036aa:	4959      	ldr	r1, [pc, #356]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036be:	4b54      	ldr	r3, [pc, #336]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	4950      	ldr	r1, [pc, #320]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ee:	4948      	ldr	r1, [pc, #288]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003702:	4b43      	ldr	r3, [pc, #268]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003708:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003710:	493f      	ldr	r1, [pc, #252]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d028      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003724:	4b3a      	ldr	r3, [pc, #232]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003732:	4937      	ldr	r1, [pc, #220]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800373e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003742:	d106      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003744:	4b32      	ldr	r3, [pc, #200]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a31      	ldr	r2, [pc, #196]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800374e:	60d3      	str	r3, [r2, #12]
 8003750:	e011      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003756:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800375a:	d10c      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	2101      	movs	r1, #1
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f8c8 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d028      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003782:	4b23      	ldr	r3, [pc, #140]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003788:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003790:	491f      	ldr	r1, [pc, #124]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037a0:	d106      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ac:	60d3      	str	r3, [r2, #12]
 80037ae:	e011      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	2101      	movs	r1, #1
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f899 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d02b      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ee:	4908      	ldr	r1, [pc, #32]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037fe:	d109      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003800:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a02      	ldr	r2, [pc, #8]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800380a:	60d3      	str	r3, [r2, #12]
 800380c:	e014      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003818:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800381c:	d10c      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	2101      	movs	r1, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f000 f867 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d02f      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003844:	4b2b      	ldr	r3, [pc, #172]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003852:	4928      	ldr	r1, [pc, #160]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800385e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003862:	d10d      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3304      	adds	r3, #4
 8003868:	2102      	movs	r1, #2
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f844 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d014      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	74bb      	strb	r3, [r7, #18]
 800387e:	e011      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3320      	adds	r3, #32
 800388e:	2102      	movs	r1, #2
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f925 	bl	8003ae0 <RCCEx_PLLSAI2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800389a:	7cfb      	ldrb	r3, [r7, #19]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038b0:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038be:	490d      	ldr	r1, [pc, #52]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038d2:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038e2:	4904      	ldr	r1, [pc, #16]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000

080038f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003906:	4b75      	ldr	r3, [pc, #468]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d018      	beq.n	8003944 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003912:	4b72      	ldr	r3, [pc, #456]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0203 	and.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d10d      	bne.n	800393e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
       ||
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800392a:	4b6c      	ldr	r3, [pc, #432]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
       ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d047      	beq.n	80039ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
 8003942:	e044      	b.n	80039ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d018      	beq.n	800397e <RCCEx_PLLSAI1_Config+0x86>
 800394c:	2b03      	cmp	r3, #3
 800394e:	d825      	bhi.n	800399c <RCCEx_PLLSAI1_Config+0xa4>
 8003950:	2b01      	cmp	r3, #1
 8003952:	d002      	beq.n	800395a <RCCEx_PLLSAI1_Config+0x62>
 8003954:	2b02      	cmp	r3, #2
 8003956:	d009      	beq.n	800396c <RCCEx_PLLSAI1_Config+0x74>
 8003958:	e020      	b.n	800399c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800395a:	4b60      	ldr	r3, [pc, #384]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11d      	bne.n	80039a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800396a:	e01a      	b.n	80039a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800396c:	4b5b      	ldr	r3, [pc, #364]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d116      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397c:	e013      	b.n	80039a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800397e:	4b57      	ldr	r3, [pc, #348]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800398a:	4b54      	ldr	r3, [pc, #336]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800399a:	e006      	b.n	80039aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      break;
 80039a0:	e004      	b.n	80039ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039a2:	bf00      	nop
 80039a4:	e002      	b.n	80039ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039b2:	4b4a      	ldr	r3, [pc, #296]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	430b      	orrs	r3, r1
 80039c8:	4944      	ldr	r1, [pc, #272]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d17d      	bne.n	8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039d4:	4b41      	ldr	r3, [pc, #260]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a40      	ldr	r2, [pc, #256]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e0:	f7fe fb64 	bl	80020ac <HAL_GetTick>
 80039e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039e6:	e009      	b.n	80039fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e8:	f7fe fb60 	bl	80020ac <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d902      	bls.n	80039fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	73fb      	strb	r3, [r7, #15]
        break;
 80039fa:	e005      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039fc:	4b37      	ldr	r3, [pc, #220]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ef      	bne.n	80039e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d160      	bne.n	8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d111      	bne.n	8003a38 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a14:	4b31      	ldr	r3, [pc, #196]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6892      	ldr	r2, [r2, #8]
 8003a24:	0211      	lsls	r1, r2, #8
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68d2      	ldr	r2, [r2, #12]
 8003a2a:	0912      	lsrs	r2, r2, #4
 8003a2c:	0452      	lsls	r2, r2, #17
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	492a      	ldr	r1, [pc, #168]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	610b      	str	r3, [r1, #16]
 8003a36:	e027      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d112      	bne.n	8003a64 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a3e:	4b27      	ldr	r3, [pc, #156]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a46:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6892      	ldr	r2, [r2, #8]
 8003a4e:	0211      	lsls	r1, r2, #8
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6912      	ldr	r2, [r2, #16]
 8003a54:	0852      	lsrs	r2, r2, #1
 8003a56:	3a01      	subs	r2, #1
 8003a58:	0552      	lsls	r2, r2, #21
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	491f      	ldr	r1, [pc, #124]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	610b      	str	r3, [r1, #16]
 8003a62:	e011      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a64:	4b1d      	ldr	r3, [pc, #116]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6892      	ldr	r2, [r2, #8]
 8003a74:	0211      	lsls	r1, r2, #8
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6952      	ldr	r2, [r2, #20]
 8003a7a:	0852      	lsrs	r2, r2, #1
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	0652      	lsls	r2, r2, #25
 8003a80:	430a      	orrs	r2, r1
 8003a82:	4916      	ldr	r1, [pc, #88]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a88:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a13      	ldr	r2, [pc, #76]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fe fb0a 	bl	80020ac <HAL_GetTick>
 8003a98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a9a:	e009      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a9c:	f7fe fb06 	bl	80020ac <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d902      	bls.n	8003ab0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	73fb      	strb	r3, [r7, #15]
          break;
 8003aae:	e005      	b.n	8003abc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ef      	beq.n	8003a9c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ac2:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	4904      	ldr	r1, [pc, #16]	@ (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000

08003ae0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aee:	4b6a      	ldr	r3, [pc, #424]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003afa:	4b67      	ldr	r3, [pc, #412]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0203 	and.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d10d      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b12:	4b61      	ldr	r3, [pc, #388]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
       ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d047      	beq.n	8003bb6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
 8003b2a:	e044      	b.n	8003bb6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d018      	beq.n	8003b66 <RCCEx_PLLSAI2_Config+0x86>
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d825      	bhi.n	8003b84 <RCCEx_PLLSAI2_Config+0xa4>
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d002      	beq.n	8003b42 <RCCEx_PLLSAI2_Config+0x62>
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d009      	beq.n	8003b54 <RCCEx_PLLSAI2_Config+0x74>
 8003b40:	e020      	b.n	8003b84 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b42:	4b55      	ldr	r3, [pc, #340]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d11d      	bne.n	8003b8a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b52:	e01a      	b.n	8003b8a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b54:	4b50      	ldr	r3, [pc, #320]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d116      	bne.n	8003b8e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b64:	e013      	b.n	8003b8e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b66:	4b4c      	ldr	r3, [pc, #304]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b72:	4b49      	ldr	r3, [pc, #292]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b82:	e006      	b.n	8003b92 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      break;
 8003b88:	e004      	b.n	8003b94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e002      	b.n	8003b94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e000      	b.n	8003b94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b92:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	4939      	ldr	r1, [pc, #228]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d167      	bne.n	8003c8c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bbc:	4b36      	ldr	r3, [pc, #216]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a35      	ldr	r2, [pc, #212]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc8:	f7fe fa70 	bl	80020ac <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bce:	e009      	b.n	8003be4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bd0:	f7fe fa6c 	bl	80020ac <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d902      	bls.n	8003be4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	73fb      	strb	r3, [r7, #15]
        break;
 8003be2:	e005      	b.n	8003bf0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003be4:	4b2c      	ldr	r3, [pc, #176]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1ef      	bne.n	8003bd0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d14a      	bne.n	8003c8c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d111      	bne.n	8003c20 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bfc:	4b26      	ldr	r3, [pc, #152]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6892      	ldr	r2, [r2, #8]
 8003c0c:	0211      	lsls	r1, r2, #8
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68d2      	ldr	r2, [r2, #12]
 8003c12:	0912      	lsrs	r2, r2, #4
 8003c14:	0452      	lsls	r2, r2, #17
 8003c16:	430a      	orrs	r2, r1
 8003c18:	491f      	ldr	r1, [pc, #124]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	614b      	str	r3, [r1, #20]
 8003c1e:	e011      	b.n	8003c44 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c20:	4b1d      	ldr	r3, [pc, #116]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6892      	ldr	r2, [r2, #8]
 8003c30:	0211      	lsls	r1, r2, #8
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6912      	ldr	r2, [r2, #16]
 8003c36:	0852      	lsrs	r2, r2, #1
 8003c38:	3a01      	subs	r2, #1
 8003c3a:	0652      	lsls	r2, r2, #25
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	4916      	ldr	r1, [pc, #88]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c44:	4b14      	ldr	r3, [pc, #80]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a13      	ldr	r2, [pc, #76]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fe fa2c 	bl	80020ac <HAL_GetTick>
 8003c54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c56:	e009      	b.n	8003c6c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c58:	f7fe fa28 	bl	80020ac <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d902      	bls.n	8003c6c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	73fb      	strb	r3, [r7, #15]
          break;
 8003c6a:	e005      	b.n	8003c78 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0ef      	beq.n	8003c58 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	4904      	ldr	r1, [pc, #16]	@ (8003c98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000

08003c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e095      	b.n	8003dda <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d108      	bne.n	8003cc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cbe:	d009      	beq.n	8003cd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	61da      	str	r2, [r3, #28]
 8003cc6:	e005      	b.n	8003cd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc fdbe 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d14:	d902      	bls.n	8003d1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	e002      	b.n	8003d22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d2a:	d007      	beq.n	8003d3c <HAL_SPI_Init+0xa0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d34:	d002      	beq.n	8003d3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7e:	ea42 0103 	orr.w	r1, r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	0c1b      	lsrs	r3, r3, #16
 8003d98:	f003 0204 	and.w	r2, r3, #4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003db8:	ea42 0103 	orr.w	r1, r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b088      	sub	sp, #32
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	4613      	mov	r3, r2
 8003df0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df2:	f7fe f95b 	bl	80020ac <HAL_GetTick>
 8003df6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d001      	beq.n	8003e0c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e15c      	b.n	80040c6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_SPI_Transmit+0x36>
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e154      	b.n	80040c6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_SPI_Transmit+0x48>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e14d      	b.n	80040c6 <HAL_SPI_Transmit+0x2e4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2203      	movs	r2, #3
 8003e36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	88fa      	ldrh	r2, [r7, #6]
 8003e4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e7c:	d10f      	bne.n	8003e9e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea8:	2b40      	cmp	r3, #64	@ 0x40
 8003eaa:	d007      	beq.n	8003ebc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ec4:	d952      	bls.n	8003f6c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_SPI_Transmit+0xf2>
 8003ece:	8b7b      	ldrh	r3, [r7, #26]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d145      	bne.n	8003f60 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee4:	1c9a      	adds	r2, r3, #2
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ef8:	e032      	b.n	8003f60 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d112      	bne.n	8003f2e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0c:	881a      	ldrh	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	1c9a      	adds	r2, r3, #2
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f2c:	e018      	b.n	8003f60 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f2e:	f7fe f8bd 	bl	80020ac <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d803      	bhi.n	8003f46 <HAL_SPI_Transmit+0x164>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d102      	bne.n	8003f4c <HAL_SPI_Transmit+0x16a>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0b2      	b.n	80040c6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1c7      	bne.n	8003efa <HAL_SPI_Transmit+0x118>
 8003f6a:	e083      	b.n	8004074 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_SPI_Transmit+0x198>
 8003f74:	8b7b      	ldrh	r3, [r7, #26]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d177      	bne.n	800406a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d912      	bls.n	8003faa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f88:	881a      	ldrh	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f94:	1c9a      	adds	r2, r3, #2
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b02      	subs	r3, #2
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fa8:	e05f      	b.n	800406a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003fd0:	e04b      	b.n	800406a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d12b      	bne.n	8004038 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d912      	bls.n	8004010 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fee:	881a      	ldrh	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffa:	1c9a      	adds	r2, r3, #2
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b02      	subs	r3, #2
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800400e:	e02c      	b.n	800406a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004036:	e018      	b.n	800406a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004038:	f7fe f838 	bl	80020ac <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d803      	bhi.n	8004050 <HAL_SPI_Transmit+0x26e>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d102      	bne.n	8004056 <HAL_SPI_Transmit+0x274>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e02d      	b.n	80040c6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ae      	bne.n	8003fd2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	6839      	ldr	r1, [r7, #0]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fcf5 	bl	8004a68 <SPI_EndRxTxTransaction>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
  }
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b088      	sub	sp, #32
 80040d2:	af02      	add	r7, sp, #8
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d001      	beq.n	80040ee <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
 80040ec:	e123      	b.n	8004336 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040f6:	d112      	bne.n	800411e <HAL_SPI_Receive+0x50>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10e      	bne.n	800411e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2204      	movs	r2, #4
 8004104:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	4613      	mov	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f912 	bl	800433e <HAL_SPI_TransmitReceive>
 800411a:	4603      	mov	r3, r0
 800411c:	e10b      	b.n	8004336 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800411e:	f7fd ffc5 	bl	80020ac <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_SPI_Receive+0x62>
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e100      	b.n	8004336 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_SPI_Receive+0x74>
 800413e:	2302      	movs	r3, #2
 8004140:	e0f9      	b.n	8004336 <HAL_SPI_Receive+0x268>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2204      	movs	r2, #4
 800414e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	88fa      	ldrh	r2, [r7, #6]
 8004162:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	88fa      	ldrh	r2, [r7, #6]
 800416a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004194:	d908      	bls.n	80041a8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	e007      	b.n	80041b8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041c0:	d10f      	bne.n	80041e2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d007      	beq.n	8004200 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004208:	d875      	bhi.n	80042f6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800420a:	e037      	b.n	800427c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d117      	bne.n	800424a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f103 020c 	add.w	r2, r3, #12
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	7812      	ldrb	r2, [r2, #0]
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004248:	e018      	b.n	800427c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800424a:	f7fd ff2f 	bl	80020ac <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d803      	bhi.n	8004262 <HAL_SPI_Receive+0x194>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d102      	bne.n	8004268 <HAL_SPI_Receive+0x19a>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e05c      	b.n	8004336 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1c1      	bne.n	800420c <HAL_SPI_Receive+0x13e>
 8004288:	e03b      	b.n	8004302 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d115      	bne.n	80042c4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	b292      	uxth	r2, r2
 80042a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	1c9a      	adds	r2, r3, #2
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80042c2:	e018      	b.n	80042f6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c4:	f7fd fef2 	bl	80020ac <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d803      	bhi.n	80042dc <HAL_SPI_Receive+0x20e>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d102      	bne.n	80042e2 <HAL_SPI_Receive+0x214>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e01f      	b.n	8004336 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1c3      	bne.n	800428a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	6839      	ldr	r1, [r7, #0]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fb56 	bl	80049b8 <SPI_EndRxTransaction>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004334:	2300      	movs	r3, #0
  }
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b08a      	sub	sp, #40	@ 0x28
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800434c:	2301      	movs	r3, #1
 800434e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004350:	f7fd feac 	bl	80020ac <HAL_GetTick>
 8004354:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800435c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004364:	887b      	ldrh	r3, [r7, #2]
 8004366:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004368:	887b      	ldrh	r3, [r7, #2]
 800436a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800436c:	7ffb      	ldrb	r3, [r7, #31]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d00c      	beq.n	800438c <HAL_SPI_TransmitReceive+0x4e>
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004378:	d106      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x4a>
 8004382:	7ffb      	ldrb	r3, [r7, #31]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d001      	beq.n	800438c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004388:	2302      	movs	r3, #2
 800438a:	e1f3      	b.n	8004774 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_SPI_TransmitReceive+0x60>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_SPI_TransmitReceive+0x60>
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1e8      	b.n	8004774 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x72>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e1e1      	b.n	8004774 <HAL_SPI_TransmitReceive+0x436>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d003      	beq.n	80043cc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2205      	movs	r2, #5
 80043c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	887a      	ldrh	r2, [r7, #2]
 80043dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	887a      	ldrh	r2, [r7, #2]
 80043e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	887a      	ldrh	r2, [r7, #2]
 80043f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800440e:	d802      	bhi.n	8004416 <HAL_SPI_TransmitReceive+0xd8>
 8004410:	8abb      	ldrh	r3, [r7, #20]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d908      	bls.n	8004428 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	e007      	b.n	8004438 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004442:	2b40      	cmp	r3, #64	@ 0x40
 8004444:	d007      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800445e:	f240 8083 	bls.w	8004568 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_SPI_TransmitReceive+0x132>
 800446a:	8afb      	ldrh	r3, [r7, #22]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d16f      	bne.n	8004550 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004474:	881a      	ldrh	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004480:	1c9a      	adds	r2, r3, #2
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004494:	e05c      	b.n	8004550 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d11b      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x19e>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_SPI_TransmitReceive+0x19e>
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d113      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	1c9a      	adds	r2, r3, #2
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d11c      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x1e6>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d016      	beq.n	8004524 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004500:	b292      	uxth	r2, r2
 8004502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004508:	1c9a      	adds	r2, r3, #2
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004520:	2301      	movs	r3, #1
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004524:	f7fd fdc2 	bl	80020ac <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004530:	429a      	cmp	r2, r3
 8004532:	d80d      	bhi.n	8004550 <HAL_SPI_TransmitReceive+0x212>
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d009      	beq.n	8004550 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e111      	b.n	8004774 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d19d      	bne.n	8004496 <HAL_SPI_TransmitReceive+0x158>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d197      	bne.n	8004496 <HAL_SPI_TransmitReceive+0x158>
 8004566:	e0e5      	b.n	8004734 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x23a>
 8004570:	8afb      	ldrh	r3, [r7, #22]
 8004572:	2b01      	cmp	r3, #1
 8004574:	f040 80d1 	bne.w	800471a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	d912      	bls.n	80045a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004586:	881a      	ldrh	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004592:	1c9a      	adds	r2, r3, #2
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b02      	subs	r3, #2
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045a6:	e0b8      	b.n	800471a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	7812      	ldrb	r2, [r2, #0]
 80045b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ce:	e0a4      	b.n	800471a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d134      	bne.n	8004648 <HAL_SPI_TransmitReceive+0x30a>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d02f      	beq.n	8004648 <HAL_SPI_TransmitReceive+0x30a>
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d12c      	bne.n	8004648 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d912      	bls.n	800461e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fc:	881a      	ldrh	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	1c9a      	adds	r2, r3, #2
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b02      	subs	r3, #2
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800461c:	e012      	b.n	8004644 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	7812      	ldrb	r2, [r2, #0]
 800462a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b01      	cmp	r3, #1
 8004654:	d148      	bne.n	80046e8 <HAL_SPI_TransmitReceive+0x3aa>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d042      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d923      	bls.n	80046b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	b292      	uxth	r2, r2
 800467a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	1c9a      	adds	r2, r3, #2
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b02      	subs	r3, #2
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d81f      	bhi.n	80046e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	e016      	b.n	80046e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f103 020c 	add.w	r2, r3, #12
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	7812      	ldrb	r2, [r2, #0]
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046e4:	2301      	movs	r3, #1
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046e8:	f7fd fce0 	bl	80020ac <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d803      	bhi.n	8004700 <HAL_SPI_TransmitReceive+0x3c2>
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d102      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x3c8>
 8004700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e02c      	b.n	8004774 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	f47f af55 	bne.w	80045d0 <HAL_SPI_TransmitReceive+0x292>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	f47f af4e 	bne.w	80045d0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f995 	bl	8004a68 <SPI_EndRxTxTransaction>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e00e      	b.n	8004774 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004772:	2300      	movs	r3, #0
  }
}
 8004774:	4618      	mov	r0, r3
 8004776:	3728      	adds	r7, #40	@ 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800478c:	f7fd fc8e 	bl	80020ac <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	4413      	add	r3, r2
 800479a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800479c:	f7fd fc86 	bl	80020ac <HAL_GetTick>
 80047a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047a2:	4b39      	ldr	r3, [pc, #228]	@ (8004888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	015b      	lsls	r3, r3, #5
 80047a8:	0d1b      	lsrs	r3, r3, #20
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047b2:	e054      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d050      	beq.n	800485e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047bc:	f7fd fc76 	bl	80020ac <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d902      	bls.n	80047d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d13d      	bne.n	800484e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ea:	d111      	bne.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f4:	d004      	beq.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fe:	d107      	bne.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800480e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004818:	d10f      	bne.n	800483a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e017      	b.n	800487e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3b01      	subs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	429a      	cmp	r2, r3
 800487a:	d19b      	bne.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000018 	.word	0x20000018

0800488c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	@ 0x28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800489e:	f7fd fc05 	bl	80020ac <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	4413      	add	r3, r2
 80048ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80048ae:	f7fd fbfd 	bl	80020ac <HAL_GetTick>
 80048b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048bc:	4b3d      	ldr	r3, [pc, #244]	@ (80049b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	00da      	lsls	r2, r3, #3
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	0d1b      	lsrs	r3, r3, #20
 80048cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048d4:	e060      	b.n	8004998 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048dc:	d107      	bne.n	80048ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d050      	beq.n	8004998 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048f6:	f7fd fbd9 	bl	80020ac <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004902:	429a      	cmp	r2, r3
 8004904:	d902      	bls.n	800490c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d13d      	bne.n	8004988 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800491a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004924:	d111      	bne.n	800494a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800492e:	d004      	beq.n	800493a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004938:	d107      	bne.n	800494a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004948:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004952:	d10f      	bne.n	8004974 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004972:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e010      	b.n	80049aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	3b01      	subs	r3, #1
 8004996:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4013      	ands	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d196      	bne.n	80048d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3728      	adds	r7, #40	@ 0x28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000018 	.word	0x20000018

080049b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049cc:	d111      	bne.n	80049f2 <SPI_EndRxTransaction+0x3a>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049d6:	d004      	beq.n	80049e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e0:	d107      	bne.n	80049f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049f0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2180      	movs	r1, #128	@ 0x80
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff febd 	bl	800477c <SPI_WaitFlagStateUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0c:	f043 0220 	orr.w	r2, r3, #32
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e023      	b.n	8004a60 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a20:	d11d      	bne.n	8004a5e <SPI_EndRxTransaction+0xa6>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2a:	d004      	beq.n	8004a36 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a34:	d113      	bne.n	8004a5e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff ff22 	bl	800488c <SPI_WaitFifoStateUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e000      	b.n	8004a60 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7ff ff03 	bl	800488c <SPI_WaitFifoStateUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a90:	f043 0220 	orr.w	r2, r3, #32
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e027      	b.n	8004aec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2180      	movs	r1, #128	@ 0x80
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff fe68 	bl	800477c <SPI_WaitFlagStateUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab6:	f043 0220 	orr.w	r2, r3, #32
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e014      	b.n	8004aec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff fedc 	bl	800488c <SPI_WaitFifoStateUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e000      	b.n	8004aec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e040      	b.n	8004b88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc f838 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	@ 0x24
 8004b20:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fb6a 	bl	8005214 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f8af 	bl	8004ca4 <UART_SetConfig>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e01b      	b.n	8004b88 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fbe9 	bl	8005358 <UART_CheckIdleState>
 8004b86:	4603      	mov	r3, r0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	@ 0x28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d177      	bne.n	8004c98 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Transmit+0x24>
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e070      	b.n	8004c9a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2221      	movs	r2, #33	@ 0x21
 8004bc4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bc6:	f7fd fa71 	bl	80020ac <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88fa      	ldrh	r2, [r7, #6]
 8004bd0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	88fa      	ldrh	r2, [r7, #6]
 8004bd8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be4:	d108      	bne.n	8004bf8 <HAL_UART_Transmit+0x68>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	e003      	b.n	8004c00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c00:	e02f      	b.n	8004c62 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2180      	movs	r1, #128	@ 0x80
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fc4b 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d004      	beq.n	8004c22 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e03b      	b.n	8004c9a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10b      	bne.n	8004c40 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	881a      	ldrh	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c34:	b292      	uxth	r2, r2
 8004c36:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	e007      	b.n	8004c50 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	781a      	ldrb	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1c9      	bne.n	8004c02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2140      	movs	r1, #64	@ 0x40
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fc15 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d004      	beq.n	8004c8e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e005      	b.n	8004c9a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e000      	b.n	8004c9a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
  }
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca8:	b08a      	sub	sp, #40	@ 0x28
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4ba4      	ldr	r3, [pc, #656]	@ (8004f64 <UART_SetConfig+0x2c0>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a99      	ldr	r2, [pc, #612]	@ (8004f68 <UART_SetConfig+0x2c4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a90      	ldr	r2, [pc, #576]	@ (8004f6c <UART_SetConfig+0x2c8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d126      	bne.n	8004d7c <UART_SetConfig+0xd8>
 8004d2e:	4b90      	ldr	r3, [pc, #576]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d81b      	bhi.n	8004d74 <UART_SetConfig+0xd0>
 8004d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d44 <UART_SetConfig+0xa0>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	08004d5d 	.word	0x08004d5d
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5a:	e116      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d62:	e112      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d64:	2304      	movs	r3, #4
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6a:	e10e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d72:	e10a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d7a:	e106      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a7c      	ldr	r2, [pc, #496]	@ (8004f74 <UART_SetConfig+0x2d0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d138      	bne.n	8004df8 <UART_SetConfig+0x154>
 8004d86:	4b7a      	ldr	r3, [pc, #488]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	d82d      	bhi.n	8004df0 <UART_SetConfig+0x14c>
 8004d94:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <UART_SetConfig+0xf8>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dd1 	.word	0x08004dd1
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	08004df1 	.word	0x08004df1
 8004da8:	08004df1 	.word	0x08004df1
 8004dac:	08004de1 	.word	0x08004de1
 8004db0:	08004df1 	.word	0x08004df1
 8004db4:	08004df1 	.word	0x08004df1
 8004db8:	08004df1 	.word	0x08004df1
 8004dbc:	08004dd9 	.word	0x08004dd9
 8004dc0:	08004df1 	.word	0x08004df1
 8004dc4:	08004df1 	.word	0x08004df1
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004de9 	.word	0x08004de9
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd6:	e0d8      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dde:	e0d4      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004de0:	2304      	movs	r3, #4
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de6:	e0d0      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004de8:	2308      	movs	r3, #8
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dee:	e0cc      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004df0:	2310      	movs	r3, #16
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df6:	e0c8      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a5e      	ldr	r2, [pc, #376]	@ (8004f78 <UART_SetConfig+0x2d4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d125      	bne.n	8004e4e <UART_SetConfig+0x1aa>
 8004e02:	4b5b      	ldr	r3, [pc, #364]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e0c:	2b30      	cmp	r3, #48	@ 0x30
 8004e0e:	d016      	beq.n	8004e3e <UART_SetConfig+0x19a>
 8004e10:	2b30      	cmp	r3, #48	@ 0x30
 8004e12:	d818      	bhi.n	8004e46 <UART_SetConfig+0x1a2>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d00a      	beq.n	8004e2e <UART_SetConfig+0x18a>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d814      	bhi.n	8004e46 <UART_SetConfig+0x1a2>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <UART_SetConfig+0x182>
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d008      	beq.n	8004e36 <UART_SetConfig+0x192>
 8004e24:	e00f      	b.n	8004e46 <UART_SetConfig+0x1a2>
 8004e26:	2300      	movs	r3, #0
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2c:	e0ad      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e34:	e0a9      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e36:	2304      	movs	r3, #4
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3c:	e0a5      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e3e:	2308      	movs	r3, #8
 8004e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e44:	e0a1      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e46:	2310      	movs	r3, #16
 8004e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4c:	e09d      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a4a      	ldr	r2, [pc, #296]	@ (8004f7c <UART_SetConfig+0x2d8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d125      	bne.n	8004ea4 <UART_SetConfig+0x200>
 8004e58:	4b45      	ldr	r3, [pc, #276]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e64:	d016      	beq.n	8004e94 <UART_SetConfig+0x1f0>
 8004e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e68:	d818      	bhi.n	8004e9c <UART_SetConfig+0x1f8>
 8004e6a:	2b80      	cmp	r3, #128	@ 0x80
 8004e6c:	d00a      	beq.n	8004e84 <UART_SetConfig+0x1e0>
 8004e6e:	2b80      	cmp	r3, #128	@ 0x80
 8004e70:	d814      	bhi.n	8004e9c <UART_SetConfig+0x1f8>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <UART_SetConfig+0x1d8>
 8004e76:	2b40      	cmp	r3, #64	@ 0x40
 8004e78:	d008      	beq.n	8004e8c <UART_SetConfig+0x1e8>
 8004e7a:	e00f      	b.n	8004e9c <UART_SetConfig+0x1f8>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e82:	e082      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e84:	2302      	movs	r3, #2
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8a:	e07e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e92:	e07a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e076      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e072      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a35      	ldr	r2, [pc, #212]	@ (8004f80 <UART_SetConfig+0x2dc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d12a      	bne.n	8004f04 <UART_SetConfig+0x260>
 8004eae:	4b30      	ldr	r3, [pc, #192]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ebc:	d01a      	beq.n	8004ef4 <UART_SetConfig+0x250>
 8004ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ec2:	d81b      	bhi.n	8004efc <UART_SetConfig+0x258>
 8004ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec8:	d00c      	beq.n	8004ee4 <UART_SetConfig+0x240>
 8004eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ece:	d815      	bhi.n	8004efc <UART_SetConfig+0x258>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <UART_SetConfig+0x238>
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed8:	d008      	beq.n	8004eec <UART_SetConfig+0x248>
 8004eda:	e00f      	b.n	8004efc <UART_SetConfig+0x258>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee2:	e052      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eea:	e04e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004eec:	2304      	movs	r3, #4
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef2:	e04a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efa:	e046      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004efc:	2310      	movs	r3, #16
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f02:	e042      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a17      	ldr	r2, [pc, #92]	@ (8004f68 <UART_SetConfig+0x2c4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d13a      	bne.n	8004f84 <UART_SetConfig+0x2e0>
 8004f0e:	4b18      	ldr	r3, [pc, #96]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f1c:	d01a      	beq.n	8004f54 <UART_SetConfig+0x2b0>
 8004f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f22:	d81b      	bhi.n	8004f5c <UART_SetConfig+0x2b8>
 8004f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f28:	d00c      	beq.n	8004f44 <UART_SetConfig+0x2a0>
 8004f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f2e:	d815      	bhi.n	8004f5c <UART_SetConfig+0x2b8>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <UART_SetConfig+0x298>
 8004f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f38:	d008      	beq.n	8004f4c <UART_SetConfig+0x2a8>
 8004f3a:	e00f      	b.n	8004f5c <UART_SetConfig+0x2b8>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e022      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e01e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e01a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5a:	e016      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f62:	e012      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f64:	efff69f3 	.word	0xefff69f3
 8004f68:	40008000 	.word	0x40008000
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40004400 	.word	0x40004400
 8004f78:	40004800 	.word	0x40004800
 8004f7c:	40004c00 	.word	0x40004c00
 8004f80:	40005000 	.word	0x40005000
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a9f      	ldr	r2, [pc, #636]	@ (800520c <UART_SetConfig+0x568>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d17a      	bne.n	800508a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d824      	bhi.n	8004fe6 <UART_SetConfig+0x342>
 8004f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <UART_SetConfig+0x300>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fe7 	.word	0x08004fe7
 8004fac:	08004fd1 	.word	0x08004fd1
 8004fb0:	08004fe7 	.word	0x08004fe7
 8004fb4:	08004fd7 	.word	0x08004fd7
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08004fe7 	.word	0x08004fe7
 8004fc0:	08004fe7 	.word	0x08004fe7
 8004fc4:	08004fdf 	.word	0x08004fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc8:	f7fe f920 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 8004fcc:	61f8      	str	r0, [r7, #28]
        break;
 8004fce:	e010      	b.n	8004ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd0:	4b8f      	ldr	r3, [pc, #572]	@ (8005210 <UART_SetConfig+0x56c>)
 8004fd2:	61fb      	str	r3, [r7, #28]
        break;
 8004fd4:	e00d      	b.n	8004ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7fe f881 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8004fda:	61f8      	str	r0, [r7, #28]
        break;
 8004fdc:	e009      	b.n	8004ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fe2:	61fb      	str	r3, [r7, #28]
        break;
 8004fe4:	e005      	b.n	8004ff2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80fb 	beq.w	80051f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	4413      	add	r3, r2
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	429a      	cmp	r2, r3
 8005008:	d305      	bcc.n	8005016 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	429a      	cmp	r2, r3
 8005014:	d903      	bls.n	800501e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800501c:	e0e8      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2200      	movs	r2, #0
 8005022:	461c      	mov	r4, r3
 8005024:	4615      	mov	r5, r2
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	022b      	lsls	r3, r5, #8
 8005030:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005034:	0222      	lsls	r2, r4, #8
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	6849      	ldr	r1, [r1, #4]
 800503a:	0849      	lsrs	r1, r1, #1
 800503c:	2000      	movs	r0, #0
 800503e:	4688      	mov	r8, r1
 8005040:	4681      	mov	r9, r0
 8005042:	eb12 0a08 	adds.w	sl, r2, r8
 8005046:	eb43 0b09 	adc.w	fp, r3, r9
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005058:	4650      	mov	r0, sl
 800505a:	4659      	mov	r1, fp
 800505c:	f7fb f908 	bl	8000270 <__aeabi_uldivmod>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4613      	mov	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800506e:	d308      	bcc.n	8005082 <UART_SetConfig+0x3de>
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005076:	d204      	bcs.n	8005082 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	60da      	str	r2, [r3, #12]
 8005080:	e0b6      	b.n	80051f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005088:	e0b2      	b.n	80051f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005092:	d15e      	bne.n	8005152 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005098:	2b08      	cmp	r3, #8
 800509a:	d828      	bhi.n	80050ee <UART_SetConfig+0x44a>
 800509c:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <UART_SetConfig+0x400>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050d1 	.word	0x080050d1
 80050ac:	080050d9 	.word	0x080050d9
 80050b0:	080050ef 	.word	0x080050ef
 80050b4:	080050df 	.word	0x080050df
 80050b8:	080050ef 	.word	0x080050ef
 80050bc:	080050ef 	.word	0x080050ef
 80050c0:	080050ef 	.word	0x080050ef
 80050c4:	080050e7 	.word	0x080050e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fe f8a0 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 80050cc:	61f8      	str	r0, [r7, #28]
        break;
 80050ce:	e014      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d0:	f7fe f8b2 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 80050d4:	61f8      	str	r0, [r7, #28]
        break;
 80050d6:	e010      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005210 <UART_SetConfig+0x56c>)
 80050da:	61fb      	str	r3, [r7, #28]
        break;
 80050dc:	e00d      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050de:	f7fd fffd 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 80050e2:	61f8      	str	r0, [r7, #28]
        break;
 80050e4:	e009      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ea:	61fb      	str	r3, [r7, #28]
        break;
 80050ec:	e005      	b.n	80050fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d077      	beq.n	80051f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	005a      	lsls	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	085b      	lsrs	r3, r3, #1
 800510a:	441a      	add	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b0f      	cmp	r3, #15
 800511a:	d916      	bls.n	800514a <UART_SetConfig+0x4a6>
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005122:	d212      	bcs.n	800514a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f023 030f 	bic.w	r3, r3, #15
 800512c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	b29b      	uxth	r3, r3
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	b29a      	uxth	r2, r3
 800513a:	8afb      	ldrh	r3, [r7, #22]
 800513c:	4313      	orrs	r3, r2
 800513e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	8afa      	ldrh	r2, [r7, #22]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	e052      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005150:	e04e      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005152:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005156:	2b08      	cmp	r3, #8
 8005158:	d827      	bhi.n	80051aa <UART_SetConfig+0x506>
 800515a:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <UART_SetConfig+0x4bc>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005185 	.word	0x08005185
 8005164:	0800518d 	.word	0x0800518d
 8005168:	08005195 	.word	0x08005195
 800516c:	080051ab 	.word	0x080051ab
 8005170:	0800519b 	.word	0x0800519b
 8005174:	080051ab 	.word	0x080051ab
 8005178:	080051ab 	.word	0x080051ab
 800517c:	080051ab 	.word	0x080051ab
 8005180:	080051a3 	.word	0x080051a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005184:	f7fe f842 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e014      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800518c:	f7fe f854 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 8005190:	61f8      	str	r0, [r7, #28]
        break;
 8005192:	e010      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005194:	4b1e      	ldr	r3, [pc, #120]	@ (8005210 <UART_SetConfig+0x56c>)
 8005196:	61fb      	str	r3, [r7, #28]
        break;
 8005198:	e00d      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519a:	f7fd ff9f 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800519e:	61f8      	str	r0, [r7, #28]
        break;
 80051a0:	e009      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051a6:	61fb      	str	r3, [r7, #28]
        break;
 80051a8:	e005      	b.n	80051b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051b4:	bf00      	nop
    }

    if (pclk != 0U)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d019      	beq.n	80051f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	085a      	lsrs	r2, r3, #1
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	441a      	add	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b0f      	cmp	r3, #15
 80051d4:	d909      	bls.n	80051ea <UART_SetConfig+0x546>
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051dc:	d205      	bcs.n	80051ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	e002      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005200:	4618      	mov	r0, r3
 8005202:	3728      	adds	r7, #40	@ 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520a:	bf00      	nop
 800520c:	40008000 	.word	0x40008000
 8005210:	00f42400 	.word	0x00f42400

08005214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01a      	beq.n	800532a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005312:	d10a      	bne.n	800532a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	605a      	str	r2, [r3, #4]
  }
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b098      	sub	sp, #96	@ 0x60
 800535c:	af02      	add	r7, sp, #8
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005368:	f7fc fea0 	bl	80020ac <HAL_GetTick>
 800536c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b08      	cmp	r3, #8
 800537a:	d12e      	bne.n	80053da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800537c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005384:	2200      	movs	r2, #0
 8005386:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f88c 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d021      	beq.n	80053da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e6      	bne.n	8005396 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e062      	b.n	80054a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d149      	bne.n	800547c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f856 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d03c      	beq.n	800547c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	623b      	str	r3, [r7, #32]
   return(result);
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005420:	633b      	str	r3, [r7, #48]	@ 0x30
 8005422:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800542e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e6      	bne.n	8005402 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3308      	adds	r3, #8
 800543a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	60fb      	str	r3, [r7, #12]
   return(result);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005454:	61fa      	str	r2, [r7, #28]
 8005456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	69b9      	ldr	r1, [r7, #24]
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	617b      	str	r3, [r7, #20]
   return(result);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e5      	bne.n	8005434 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e011      	b.n	80054a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3758      	adds	r7, #88	@ 0x58
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b8:	e04f      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d04b      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7fc fdf3 	bl	80020ac <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e04e      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d037      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b80      	cmp	r3, #128	@ 0x80
 80054ee:	d034      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b40      	cmp	r3, #64	@ 0x40
 80054f4:	d031      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b08      	cmp	r3, #8
 8005502:	d110      	bne.n	8005526 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2208      	movs	r2, #8
 800550a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f838 	bl	8005582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2208      	movs	r2, #8
 8005516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e029      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005534:	d111      	bne.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800553e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f81e 	bl	8005582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e00f      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	429a      	cmp	r2, r3
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	429a      	cmp	r2, r3
 8005576:	d0a0      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005582:	b480      	push	{r7}
 8005584:	b095      	sub	sp, #84	@ 0x54
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800559e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80055aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e6      	bne.n	800558a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d118      	bne.n	800562a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	60bb      	str	r3, [r7, #8]
   return(result);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 0310 	bic.w	r3, r3, #16
 800560c:	647b      	str	r3, [r7, #68]	@ 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6979      	ldr	r1, [r7, #20]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e6      	bne.n	80055f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800563e:	bf00      	nop
 8005640:	3754      	adds	r7, #84	@ 0x54
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <std>:
 800564c:	2300      	movs	r3, #0
 800564e:	b510      	push	{r4, lr}
 8005650:	4604      	mov	r4, r0
 8005652:	e9c0 3300 	strd	r3, r3, [r0]
 8005656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800565a:	6083      	str	r3, [r0, #8]
 800565c:	8181      	strh	r1, [r0, #12]
 800565e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005660:	81c2      	strh	r2, [r0, #14]
 8005662:	6183      	str	r3, [r0, #24]
 8005664:	4619      	mov	r1, r3
 8005666:	2208      	movs	r2, #8
 8005668:	305c      	adds	r0, #92	@ 0x5c
 800566a:	f000 fab5 	bl	8005bd8 <memset>
 800566e:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <std+0x58>)
 8005670:	6263      	str	r3, [r4, #36]	@ 0x24
 8005672:	4b0d      	ldr	r3, [pc, #52]	@ (80056a8 <std+0x5c>)
 8005674:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005676:	4b0d      	ldr	r3, [pc, #52]	@ (80056ac <std+0x60>)
 8005678:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <std+0x64>)
 800567c:	6323      	str	r3, [r4, #48]	@ 0x30
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <std+0x68>)
 8005680:	6224      	str	r4, [r4, #32]
 8005682:	429c      	cmp	r4, r3
 8005684:	d006      	beq.n	8005694 <std+0x48>
 8005686:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800568a:	4294      	cmp	r4, r2
 800568c:	d002      	beq.n	8005694 <std+0x48>
 800568e:	33d0      	adds	r3, #208	@ 0xd0
 8005690:	429c      	cmp	r4, r3
 8005692:	d105      	bne.n	80056a0 <std+0x54>
 8005694:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569c:	f000 bb14 	b.w	8005cc8 <__retarget_lock_init_recursive>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	08005a29 	.word	0x08005a29
 80056a8:	08005a4b 	.word	0x08005a4b
 80056ac:	08005a83 	.word	0x08005a83
 80056b0:	08005aa7 	.word	0x08005aa7
 80056b4:	200001cc 	.word	0x200001cc

080056b8 <stdio_exit_handler>:
 80056b8:	4a02      	ldr	r2, [pc, #8]	@ (80056c4 <stdio_exit_handler+0xc>)
 80056ba:	4903      	ldr	r1, [pc, #12]	@ (80056c8 <stdio_exit_handler+0x10>)
 80056bc:	4803      	ldr	r0, [pc, #12]	@ (80056cc <stdio_exit_handler+0x14>)
 80056be:	f000 b869 	b.w	8005794 <_fwalk_sglue>
 80056c2:	bf00      	nop
 80056c4:	20000050 	.word	0x20000050
 80056c8:	08006579 	.word	0x08006579
 80056cc:	20000060 	.word	0x20000060

080056d0 <cleanup_stdio>:
 80056d0:	6841      	ldr	r1, [r0, #4]
 80056d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005704 <cleanup_stdio+0x34>)
 80056d4:	4299      	cmp	r1, r3
 80056d6:	b510      	push	{r4, lr}
 80056d8:	4604      	mov	r4, r0
 80056da:	d001      	beq.n	80056e0 <cleanup_stdio+0x10>
 80056dc:	f000 ff4c 	bl	8006578 <_fflush_r>
 80056e0:	68a1      	ldr	r1, [r4, #8]
 80056e2:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <cleanup_stdio+0x38>)
 80056e4:	4299      	cmp	r1, r3
 80056e6:	d002      	beq.n	80056ee <cleanup_stdio+0x1e>
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 ff45 	bl	8006578 <_fflush_r>
 80056ee:	68e1      	ldr	r1, [r4, #12]
 80056f0:	4b06      	ldr	r3, [pc, #24]	@ (800570c <cleanup_stdio+0x3c>)
 80056f2:	4299      	cmp	r1, r3
 80056f4:	d004      	beq.n	8005700 <cleanup_stdio+0x30>
 80056f6:	4620      	mov	r0, r4
 80056f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056fc:	f000 bf3c 	b.w	8006578 <_fflush_r>
 8005700:	bd10      	pop	{r4, pc}
 8005702:	bf00      	nop
 8005704:	200001cc 	.word	0x200001cc
 8005708:	20000234 	.word	0x20000234
 800570c:	2000029c 	.word	0x2000029c

08005710 <global_stdio_init.part.0>:
 8005710:	b510      	push	{r4, lr}
 8005712:	4b0b      	ldr	r3, [pc, #44]	@ (8005740 <global_stdio_init.part.0+0x30>)
 8005714:	4c0b      	ldr	r4, [pc, #44]	@ (8005744 <global_stdio_init.part.0+0x34>)
 8005716:	4a0c      	ldr	r2, [pc, #48]	@ (8005748 <global_stdio_init.part.0+0x38>)
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	4620      	mov	r0, r4
 800571c:	2200      	movs	r2, #0
 800571e:	2104      	movs	r1, #4
 8005720:	f7ff ff94 	bl	800564c <std>
 8005724:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005728:	2201      	movs	r2, #1
 800572a:	2109      	movs	r1, #9
 800572c:	f7ff ff8e 	bl	800564c <std>
 8005730:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005734:	2202      	movs	r2, #2
 8005736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573a:	2112      	movs	r1, #18
 800573c:	f7ff bf86 	b.w	800564c <std>
 8005740:	20000304 	.word	0x20000304
 8005744:	200001cc 	.word	0x200001cc
 8005748:	080056b9 	.word	0x080056b9

0800574c <__sfp_lock_acquire>:
 800574c:	4801      	ldr	r0, [pc, #4]	@ (8005754 <__sfp_lock_acquire+0x8>)
 800574e:	f000 babc 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8005752:	bf00      	nop
 8005754:	2000030d 	.word	0x2000030d

08005758 <__sfp_lock_release>:
 8005758:	4801      	ldr	r0, [pc, #4]	@ (8005760 <__sfp_lock_release+0x8>)
 800575a:	f000 bab7 	b.w	8005ccc <__retarget_lock_release_recursive>
 800575e:	bf00      	nop
 8005760:	2000030d 	.word	0x2000030d

08005764 <__sinit>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4604      	mov	r4, r0
 8005768:	f7ff fff0 	bl	800574c <__sfp_lock_acquire>
 800576c:	6a23      	ldr	r3, [r4, #32]
 800576e:	b11b      	cbz	r3, 8005778 <__sinit+0x14>
 8005770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005774:	f7ff bff0 	b.w	8005758 <__sfp_lock_release>
 8005778:	4b04      	ldr	r3, [pc, #16]	@ (800578c <__sinit+0x28>)
 800577a:	6223      	str	r3, [r4, #32]
 800577c:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <__sinit+0x2c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f5      	bne.n	8005770 <__sinit+0xc>
 8005784:	f7ff ffc4 	bl	8005710 <global_stdio_init.part.0>
 8005788:	e7f2      	b.n	8005770 <__sinit+0xc>
 800578a:	bf00      	nop
 800578c:	080056d1 	.word	0x080056d1
 8005790:	20000304 	.word	0x20000304

08005794 <_fwalk_sglue>:
 8005794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005798:	4607      	mov	r7, r0
 800579a:	4688      	mov	r8, r1
 800579c:	4614      	mov	r4, r2
 800579e:	2600      	movs	r6, #0
 80057a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a4:	f1b9 0901 	subs.w	r9, r9, #1
 80057a8:	d505      	bpl.n	80057b6 <_fwalk_sglue+0x22>
 80057aa:	6824      	ldr	r4, [r4, #0]
 80057ac:	2c00      	cmp	r4, #0
 80057ae:	d1f7      	bne.n	80057a0 <_fwalk_sglue+0xc>
 80057b0:	4630      	mov	r0, r6
 80057b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d907      	bls.n	80057cc <_fwalk_sglue+0x38>
 80057bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057c0:	3301      	adds	r3, #1
 80057c2:	d003      	beq.n	80057cc <_fwalk_sglue+0x38>
 80057c4:	4629      	mov	r1, r5
 80057c6:	4638      	mov	r0, r7
 80057c8:	47c0      	blx	r8
 80057ca:	4306      	orrs	r6, r0
 80057cc:	3568      	adds	r5, #104	@ 0x68
 80057ce:	e7e9      	b.n	80057a4 <_fwalk_sglue+0x10>

080057d0 <iprintf>:
 80057d0:	b40f      	push	{r0, r1, r2, r3}
 80057d2:	b507      	push	{r0, r1, r2, lr}
 80057d4:	4906      	ldr	r1, [pc, #24]	@ (80057f0 <iprintf+0x20>)
 80057d6:	ab04      	add	r3, sp, #16
 80057d8:	6808      	ldr	r0, [r1, #0]
 80057da:	f853 2b04 	ldr.w	r2, [r3], #4
 80057de:	6881      	ldr	r1, [r0, #8]
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	f000 fb9f 	bl	8005f24 <_vfiprintf_r>
 80057e6:	b003      	add	sp, #12
 80057e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057ec:	b004      	add	sp, #16
 80057ee:	4770      	bx	lr
 80057f0:	2000005c 	.word	0x2000005c

080057f4 <_puts_r>:
 80057f4:	6a03      	ldr	r3, [r0, #32]
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	6884      	ldr	r4, [r0, #8]
 80057fa:	4605      	mov	r5, r0
 80057fc:	460e      	mov	r6, r1
 80057fe:	b90b      	cbnz	r3, 8005804 <_puts_r+0x10>
 8005800:	f7ff ffb0 	bl	8005764 <__sinit>
 8005804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005806:	07db      	lsls	r3, r3, #31
 8005808:	d405      	bmi.n	8005816 <_puts_r+0x22>
 800580a:	89a3      	ldrh	r3, [r4, #12]
 800580c:	0598      	lsls	r0, r3, #22
 800580e:	d402      	bmi.n	8005816 <_puts_r+0x22>
 8005810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005812:	f000 fa5a 	bl	8005cca <__retarget_lock_acquire_recursive>
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	0719      	lsls	r1, r3, #28
 800581a:	d502      	bpl.n	8005822 <_puts_r+0x2e>
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d135      	bne.n	800588e <_puts_r+0x9a>
 8005822:	4621      	mov	r1, r4
 8005824:	4628      	mov	r0, r5
 8005826:	f000 f981 	bl	8005b2c <__swsetup_r>
 800582a:	b380      	cbz	r0, 800588e <_puts_r+0x9a>
 800582c:	f04f 35ff 	mov.w	r5, #4294967295
 8005830:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005832:	07da      	lsls	r2, r3, #31
 8005834:	d405      	bmi.n	8005842 <_puts_r+0x4e>
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	059b      	lsls	r3, r3, #22
 800583a:	d402      	bmi.n	8005842 <_puts_r+0x4e>
 800583c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800583e:	f000 fa45 	bl	8005ccc <__retarget_lock_release_recursive>
 8005842:	4628      	mov	r0, r5
 8005844:	bd70      	pop	{r4, r5, r6, pc}
 8005846:	2b00      	cmp	r3, #0
 8005848:	da04      	bge.n	8005854 <_puts_r+0x60>
 800584a:	69a2      	ldr	r2, [r4, #24]
 800584c:	429a      	cmp	r2, r3
 800584e:	dc17      	bgt.n	8005880 <_puts_r+0x8c>
 8005850:	290a      	cmp	r1, #10
 8005852:	d015      	beq.n	8005880 <_puts_r+0x8c>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	6022      	str	r2, [r4, #0]
 800585a:	7019      	strb	r1, [r3, #0]
 800585c:	68a3      	ldr	r3, [r4, #8]
 800585e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005862:	3b01      	subs	r3, #1
 8005864:	60a3      	str	r3, [r4, #8]
 8005866:	2900      	cmp	r1, #0
 8005868:	d1ed      	bne.n	8005846 <_puts_r+0x52>
 800586a:	2b00      	cmp	r3, #0
 800586c:	da11      	bge.n	8005892 <_puts_r+0x9e>
 800586e:	4622      	mov	r2, r4
 8005870:	210a      	movs	r1, #10
 8005872:	4628      	mov	r0, r5
 8005874:	f000 f91b 	bl	8005aae <__swbuf_r>
 8005878:	3001      	adds	r0, #1
 800587a:	d0d7      	beq.n	800582c <_puts_r+0x38>
 800587c:	250a      	movs	r5, #10
 800587e:	e7d7      	b.n	8005830 <_puts_r+0x3c>
 8005880:	4622      	mov	r2, r4
 8005882:	4628      	mov	r0, r5
 8005884:	f000 f913 	bl	8005aae <__swbuf_r>
 8005888:	3001      	adds	r0, #1
 800588a:	d1e7      	bne.n	800585c <_puts_r+0x68>
 800588c:	e7ce      	b.n	800582c <_puts_r+0x38>
 800588e:	3e01      	subs	r6, #1
 8005890:	e7e4      	b.n	800585c <_puts_r+0x68>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	6022      	str	r2, [r4, #0]
 8005898:	220a      	movs	r2, #10
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e7ee      	b.n	800587c <_puts_r+0x88>
	...

080058a0 <puts>:
 80058a0:	4b02      	ldr	r3, [pc, #8]	@ (80058ac <puts+0xc>)
 80058a2:	4601      	mov	r1, r0
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	f7ff bfa5 	b.w	80057f4 <_puts_r>
 80058aa:	bf00      	nop
 80058ac:	2000005c 	.word	0x2000005c

080058b0 <setbuf>:
 80058b0:	fab1 f281 	clz	r2, r1
 80058b4:	0952      	lsrs	r2, r2, #5
 80058b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058ba:	0052      	lsls	r2, r2, #1
 80058bc:	f000 b800 	b.w	80058c0 <setvbuf>

080058c0 <setvbuf>:
 80058c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058c4:	461d      	mov	r5, r3
 80058c6:	4b57      	ldr	r3, [pc, #348]	@ (8005a24 <setvbuf+0x164>)
 80058c8:	681f      	ldr	r7, [r3, #0]
 80058ca:	4604      	mov	r4, r0
 80058cc:	460e      	mov	r6, r1
 80058ce:	4690      	mov	r8, r2
 80058d0:	b127      	cbz	r7, 80058dc <setvbuf+0x1c>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	b913      	cbnz	r3, 80058dc <setvbuf+0x1c>
 80058d6:	4638      	mov	r0, r7
 80058d8:	f7ff ff44 	bl	8005764 <__sinit>
 80058dc:	f1b8 0f02 	cmp.w	r8, #2
 80058e0:	d006      	beq.n	80058f0 <setvbuf+0x30>
 80058e2:	f1b8 0f01 	cmp.w	r8, #1
 80058e6:	f200 809a 	bhi.w	8005a1e <setvbuf+0x15e>
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	f2c0 8097 	blt.w	8005a1e <setvbuf+0x15e>
 80058f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058f2:	07d9      	lsls	r1, r3, #31
 80058f4:	d405      	bmi.n	8005902 <setvbuf+0x42>
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	059a      	lsls	r2, r3, #22
 80058fa:	d402      	bmi.n	8005902 <setvbuf+0x42>
 80058fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058fe:	f000 f9e4 	bl	8005cca <__retarget_lock_acquire_recursive>
 8005902:	4621      	mov	r1, r4
 8005904:	4638      	mov	r0, r7
 8005906:	f000 fe37 	bl	8006578 <_fflush_r>
 800590a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800590c:	b141      	cbz	r1, 8005920 <setvbuf+0x60>
 800590e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005912:	4299      	cmp	r1, r3
 8005914:	d002      	beq.n	800591c <setvbuf+0x5c>
 8005916:	4638      	mov	r0, r7
 8005918:	f000 f9da 	bl	8005cd0 <_free_r>
 800591c:	2300      	movs	r3, #0
 800591e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005920:	2300      	movs	r3, #0
 8005922:	61a3      	str	r3, [r4, #24]
 8005924:	6063      	str	r3, [r4, #4]
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	061b      	lsls	r3, r3, #24
 800592a:	d503      	bpl.n	8005934 <setvbuf+0x74>
 800592c:	6921      	ldr	r1, [r4, #16]
 800592e:	4638      	mov	r0, r7
 8005930:	f000 f9ce 	bl	8005cd0 <_free_r>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	f1b8 0f02 	cmp.w	r8, #2
 8005942:	81a3      	strh	r3, [r4, #12]
 8005944:	d061      	beq.n	8005a0a <setvbuf+0x14a>
 8005946:	ab01      	add	r3, sp, #4
 8005948:	466a      	mov	r2, sp
 800594a:	4621      	mov	r1, r4
 800594c:	4638      	mov	r0, r7
 800594e:	f000 fe3b 	bl	80065c8 <__swhatbuf_r>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	4318      	orrs	r0, r3
 8005956:	81a0      	strh	r0, [r4, #12]
 8005958:	bb2d      	cbnz	r5, 80059a6 <setvbuf+0xe6>
 800595a:	9d00      	ldr	r5, [sp, #0]
 800595c:	4628      	mov	r0, r5
 800595e:	f000 fa01 	bl	8005d64 <malloc>
 8005962:	4606      	mov	r6, r0
 8005964:	2800      	cmp	r0, #0
 8005966:	d152      	bne.n	8005a0e <setvbuf+0x14e>
 8005968:	f8dd 9000 	ldr.w	r9, [sp]
 800596c:	45a9      	cmp	r9, r5
 800596e:	d140      	bne.n	80059f2 <setvbuf+0x132>
 8005970:	f04f 35ff 	mov.w	r5, #4294967295
 8005974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005978:	f043 0202 	orr.w	r2, r3, #2
 800597c:	81a2      	strh	r2, [r4, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	60a2      	str	r2, [r4, #8]
 8005982:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005986:	6022      	str	r2, [r4, #0]
 8005988:	6122      	str	r2, [r4, #16]
 800598a:	2201      	movs	r2, #1
 800598c:	6162      	str	r2, [r4, #20]
 800598e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005990:	07d6      	lsls	r6, r2, #31
 8005992:	d404      	bmi.n	800599e <setvbuf+0xde>
 8005994:	0598      	lsls	r0, r3, #22
 8005996:	d402      	bmi.n	800599e <setvbuf+0xde>
 8005998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800599a:	f000 f997 	bl	8005ccc <__retarget_lock_release_recursive>
 800599e:	4628      	mov	r0, r5
 80059a0:	b003      	add	sp, #12
 80059a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	d0d8      	beq.n	800595c <setvbuf+0x9c>
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	b913      	cbnz	r3, 80059b4 <setvbuf+0xf4>
 80059ae:	4638      	mov	r0, r7
 80059b0:	f7ff fed8 	bl	8005764 <__sinit>
 80059b4:	f1b8 0f01 	cmp.w	r8, #1
 80059b8:	bf08      	it	eq
 80059ba:	89a3      	ldrheq	r3, [r4, #12]
 80059bc:	6026      	str	r6, [r4, #0]
 80059be:	bf04      	itt	eq
 80059c0:	f043 0301 	orreq.w	r3, r3, #1
 80059c4:	81a3      	strheq	r3, [r4, #12]
 80059c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ca:	f013 0208 	ands.w	r2, r3, #8
 80059ce:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80059d2:	d01e      	beq.n	8005a12 <setvbuf+0x152>
 80059d4:	07d9      	lsls	r1, r3, #31
 80059d6:	bf41      	itttt	mi
 80059d8:	2200      	movmi	r2, #0
 80059da:	426d      	negmi	r5, r5
 80059dc:	60a2      	strmi	r2, [r4, #8]
 80059de:	61a5      	strmi	r5, [r4, #24]
 80059e0:	bf58      	it	pl
 80059e2:	60a5      	strpl	r5, [r4, #8]
 80059e4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059e6:	07d2      	lsls	r2, r2, #31
 80059e8:	d401      	bmi.n	80059ee <setvbuf+0x12e>
 80059ea:	059b      	lsls	r3, r3, #22
 80059ec:	d513      	bpl.n	8005a16 <setvbuf+0x156>
 80059ee:	2500      	movs	r5, #0
 80059f0:	e7d5      	b.n	800599e <setvbuf+0xde>
 80059f2:	4648      	mov	r0, r9
 80059f4:	f000 f9b6 	bl	8005d64 <malloc>
 80059f8:	4606      	mov	r6, r0
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d0b8      	beq.n	8005970 <setvbuf+0xb0>
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a04:	81a3      	strh	r3, [r4, #12]
 8005a06:	464d      	mov	r5, r9
 8005a08:	e7cf      	b.n	80059aa <setvbuf+0xea>
 8005a0a:	2500      	movs	r5, #0
 8005a0c:	e7b2      	b.n	8005974 <setvbuf+0xb4>
 8005a0e:	46a9      	mov	r9, r5
 8005a10:	e7f5      	b.n	80059fe <setvbuf+0x13e>
 8005a12:	60a2      	str	r2, [r4, #8]
 8005a14:	e7e6      	b.n	80059e4 <setvbuf+0x124>
 8005a16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a18:	f000 f958 	bl	8005ccc <__retarget_lock_release_recursive>
 8005a1c:	e7e7      	b.n	80059ee <setvbuf+0x12e>
 8005a1e:	f04f 35ff 	mov.w	r5, #4294967295
 8005a22:	e7bc      	b.n	800599e <setvbuf+0xde>
 8005a24:	2000005c 	.word	0x2000005c

08005a28 <__sread>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a30:	f000 f8fc 	bl	8005c2c <_read_r>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	bfab      	itete	ge
 8005a38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a3c:	181b      	addge	r3, r3, r0
 8005a3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a42:	bfac      	ite	ge
 8005a44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a46:	81a3      	strhlt	r3, [r4, #12]
 8005a48:	bd10      	pop	{r4, pc}

08005a4a <__swrite>:
 8005a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	461f      	mov	r7, r3
 8005a50:	898b      	ldrh	r3, [r1, #12]
 8005a52:	05db      	lsls	r3, r3, #23
 8005a54:	4605      	mov	r5, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	4616      	mov	r6, r2
 8005a5a:	d505      	bpl.n	8005a68 <__swrite+0x1e>
 8005a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a60:	2302      	movs	r3, #2
 8005a62:	2200      	movs	r2, #0
 8005a64:	f000 f8d0 	bl	8005c08 <_lseek_r>
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a72:	81a3      	strh	r3, [r4, #12]
 8005a74:	4632      	mov	r2, r6
 8005a76:	463b      	mov	r3, r7
 8005a78:	4628      	mov	r0, r5
 8005a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7e:	f000 b8e7 	b.w	8005c50 <_write_r>

08005a82 <__sseek>:
 8005a82:	b510      	push	{r4, lr}
 8005a84:	460c      	mov	r4, r1
 8005a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8a:	f000 f8bd 	bl	8005c08 <_lseek_r>
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	bf15      	itete	ne
 8005a94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a9e:	81a3      	strheq	r3, [r4, #12]
 8005aa0:	bf18      	it	ne
 8005aa2:	81a3      	strhne	r3, [r4, #12]
 8005aa4:	bd10      	pop	{r4, pc}

08005aa6 <__sclose>:
 8005aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aaa:	f000 b89d 	b.w	8005be8 <_close_r>

08005aae <__swbuf_r>:
 8005aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab0:	460e      	mov	r6, r1
 8005ab2:	4614      	mov	r4, r2
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	b118      	cbz	r0, 8005ac0 <__swbuf_r+0x12>
 8005ab8:	6a03      	ldr	r3, [r0, #32]
 8005aba:	b90b      	cbnz	r3, 8005ac0 <__swbuf_r+0x12>
 8005abc:	f7ff fe52 	bl	8005764 <__sinit>
 8005ac0:	69a3      	ldr	r3, [r4, #24]
 8005ac2:	60a3      	str	r3, [r4, #8]
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	071a      	lsls	r2, r3, #28
 8005ac8:	d501      	bpl.n	8005ace <__swbuf_r+0x20>
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	b943      	cbnz	r3, 8005ae0 <__swbuf_r+0x32>
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 f82b 	bl	8005b2c <__swsetup_r>
 8005ad6:	b118      	cbz	r0, 8005ae0 <__swbuf_r+0x32>
 8005ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8005adc:	4638      	mov	r0, r7
 8005ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	6922      	ldr	r2, [r4, #16]
 8005ae4:	1a98      	subs	r0, r3, r2
 8005ae6:	6963      	ldr	r3, [r4, #20]
 8005ae8:	b2f6      	uxtb	r6, r6
 8005aea:	4283      	cmp	r3, r0
 8005aec:	4637      	mov	r7, r6
 8005aee:	dc05      	bgt.n	8005afc <__swbuf_r+0x4e>
 8005af0:	4621      	mov	r1, r4
 8005af2:	4628      	mov	r0, r5
 8005af4:	f000 fd40 	bl	8006578 <_fflush_r>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d1ed      	bne.n	8005ad8 <__swbuf_r+0x2a>
 8005afc:	68a3      	ldr	r3, [r4, #8]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	60a3      	str	r3, [r4, #8]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	6022      	str	r2, [r4, #0]
 8005b08:	701e      	strb	r6, [r3, #0]
 8005b0a:	6962      	ldr	r2, [r4, #20]
 8005b0c:	1c43      	adds	r3, r0, #1
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d004      	beq.n	8005b1c <__swbuf_r+0x6e>
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	07db      	lsls	r3, r3, #31
 8005b16:	d5e1      	bpl.n	8005adc <__swbuf_r+0x2e>
 8005b18:	2e0a      	cmp	r6, #10
 8005b1a:	d1df      	bne.n	8005adc <__swbuf_r+0x2e>
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f000 fd2a 	bl	8006578 <_fflush_r>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d0d9      	beq.n	8005adc <__swbuf_r+0x2e>
 8005b28:	e7d6      	b.n	8005ad8 <__swbuf_r+0x2a>
	...

08005b2c <__swsetup_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4b29      	ldr	r3, [pc, #164]	@ (8005bd4 <__swsetup_r+0xa8>)
 8005b30:	4605      	mov	r5, r0
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	460c      	mov	r4, r1
 8005b36:	b118      	cbz	r0, 8005b40 <__swsetup_r+0x14>
 8005b38:	6a03      	ldr	r3, [r0, #32]
 8005b3a:	b90b      	cbnz	r3, 8005b40 <__swsetup_r+0x14>
 8005b3c:	f7ff fe12 	bl	8005764 <__sinit>
 8005b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b44:	0719      	lsls	r1, r3, #28
 8005b46:	d422      	bmi.n	8005b8e <__swsetup_r+0x62>
 8005b48:	06da      	lsls	r2, r3, #27
 8005b4a:	d407      	bmi.n	8005b5c <__swsetup_r+0x30>
 8005b4c:	2209      	movs	r2, #9
 8005b4e:	602a      	str	r2, [r5, #0]
 8005b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5a:	e033      	b.n	8005bc4 <__swsetup_r+0x98>
 8005b5c:	0758      	lsls	r0, r3, #29
 8005b5e:	d512      	bpl.n	8005b86 <__swsetup_r+0x5a>
 8005b60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b62:	b141      	cbz	r1, 8005b76 <__swsetup_r+0x4a>
 8005b64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	d002      	beq.n	8005b72 <__swsetup_r+0x46>
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f000 f8af 	bl	8005cd0 <_free_r>
 8005b72:	2300      	movs	r3, #0
 8005b74:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6063      	str	r3, [r4, #4]
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f043 0308 	orr.w	r3, r3, #8
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	6923      	ldr	r3, [r4, #16]
 8005b90:	b94b      	cbnz	r3, 8005ba6 <__swsetup_r+0x7a>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b9c:	d003      	beq.n	8005ba6 <__swsetup_r+0x7a>
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 fd37 	bl	8006614 <__smakebuf_r>
 8005ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005baa:	f013 0201 	ands.w	r2, r3, #1
 8005bae:	d00a      	beq.n	8005bc6 <__swsetup_r+0x9a>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	60a2      	str	r2, [r4, #8]
 8005bb4:	6962      	ldr	r2, [r4, #20]
 8005bb6:	4252      	negs	r2, r2
 8005bb8:	61a2      	str	r2, [r4, #24]
 8005bba:	6922      	ldr	r2, [r4, #16]
 8005bbc:	b942      	cbnz	r2, 8005bd0 <__swsetup_r+0xa4>
 8005bbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005bc2:	d1c5      	bne.n	8005b50 <__swsetup_r+0x24>
 8005bc4:	bd38      	pop	{r3, r4, r5, pc}
 8005bc6:	0799      	lsls	r1, r3, #30
 8005bc8:	bf58      	it	pl
 8005bca:	6962      	ldrpl	r2, [r4, #20]
 8005bcc:	60a2      	str	r2, [r4, #8]
 8005bce:	e7f4      	b.n	8005bba <__swsetup_r+0x8e>
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	e7f7      	b.n	8005bc4 <__swsetup_r+0x98>
 8005bd4:	2000005c 	.word	0x2000005c

08005bd8 <memset>:
 8005bd8:	4402      	add	r2, r0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d100      	bne.n	8005be2 <memset+0xa>
 8005be0:	4770      	bx	lr
 8005be2:	f803 1b01 	strb.w	r1, [r3], #1
 8005be6:	e7f9      	b.n	8005bdc <memset+0x4>

08005be8 <_close_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d06      	ldr	r5, [pc, #24]	@ (8005c04 <_close_r+0x1c>)
 8005bec:	2300      	movs	r3, #0
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fa ff1d 	bl	8000a32 <_close>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_close_r+0x1a>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_close_r+0x1a>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	20000308 	.word	0x20000308

08005c08 <_lseek_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4d07      	ldr	r5, [pc, #28]	@ (8005c28 <_lseek_r+0x20>)
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	4608      	mov	r0, r1
 8005c10:	4611      	mov	r1, r2
 8005c12:	2200      	movs	r2, #0
 8005c14:	602a      	str	r2, [r5, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f7fa ff32 	bl	8000a80 <_lseek>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <_lseek_r+0x1e>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	b103      	cbz	r3, 8005c26 <_lseek_r+0x1e>
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	20000308 	.word	0x20000308

08005c2c <_read_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4d07      	ldr	r5, [pc, #28]	@ (8005c4c <_read_r+0x20>)
 8005c30:	4604      	mov	r4, r0
 8005c32:	4608      	mov	r0, r1
 8005c34:	4611      	mov	r1, r2
 8005c36:	2200      	movs	r2, #0
 8005c38:	602a      	str	r2, [r5, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f7fa fec0 	bl	80009c0 <_read>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_read_r+0x1e>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_read_r+0x1e>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	20000308 	.word	0x20000308

08005c50 <_write_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4d07      	ldr	r5, [pc, #28]	@ (8005c70 <_write_r+0x20>)
 8005c54:	4604      	mov	r4, r0
 8005c56:	4608      	mov	r0, r1
 8005c58:	4611      	mov	r1, r2
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	602a      	str	r2, [r5, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fa fecb 	bl	80009fa <_write>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_write_r+0x1e>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_write_r+0x1e>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	20000308 	.word	0x20000308

08005c74 <__errno>:
 8005c74:	4b01      	ldr	r3, [pc, #4]	@ (8005c7c <__errno+0x8>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	2000005c 	.word	0x2000005c

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4d0d      	ldr	r5, [pc, #52]	@ (8005cb8 <__libc_init_array+0x38>)
 8005c84:	4c0d      	ldr	r4, [pc, #52]	@ (8005cbc <__libc_init_array+0x3c>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	4d0b      	ldr	r5, [pc, #44]	@ (8005cc0 <__libc_init_array+0x40>)
 8005c92:	4c0c      	ldr	r4, [pc, #48]	@ (8005cc4 <__libc_init_array+0x44>)
 8005c94:	f000 fd2c 	bl	80066f0 <_init>
 8005c98:	1b64      	subs	r4, r4, r5
 8005c9a:	10a4      	asrs	r4, r4, #2
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	42a6      	cmp	r6, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca8:	4798      	blx	r3
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb2:	4798      	blx	r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	08006db0 	.word	0x08006db0
 8005cbc:	08006db0 	.word	0x08006db0
 8005cc0:	08006db0 	.word	0x08006db0
 8005cc4:	08006db4 	.word	0x08006db4

08005cc8 <__retarget_lock_init_recursive>:
 8005cc8:	4770      	bx	lr

08005cca <__retarget_lock_acquire_recursive>:
 8005cca:	4770      	bx	lr

08005ccc <__retarget_lock_release_recursive>:
 8005ccc:	4770      	bx	lr
	...

08005cd0 <_free_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	d041      	beq.n	8005d5c <_free_r+0x8c>
 8005cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cdc:	1f0c      	subs	r4, r1, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bfb8      	it	lt
 8005ce2:	18e4      	addlt	r4, r4, r3
 8005ce4:	f000 f8e8 	bl	8005eb8 <__malloc_lock>
 8005ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d60 <_free_r+0x90>)
 8005cea:	6813      	ldr	r3, [r2, #0]
 8005cec:	b933      	cbnz	r3, 8005cfc <_free_r+0x2c>
 8005cee:	6063      	str	r3, [r4, #4]
 8005cf0:	6014      	str	r4, [r2, #0]
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cf8:	f000 b8e4 	b.w	8005ec4 <__malloc_unlock>
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d908      	bls.n	8005d12 <_free_r+0x42>
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	1821      	adds	r1, r4, r0
 8005d04:	428b      	cmp	r3, r1
 8005d06:	bf01      	itttt	eq
 8005d08:	6819      	ldreq	r1, [r3, #0]
 8005d0a:	685b      	ldreq	r3, [r3, #4]
 8005d0c:	1809      	addeq	r1, r1, r0
 8005d0e:	6021      	streq	r1, [r4, #0]
 8005d10:	e7ed      	b.n	8005cee <_free_r+0x1e>
 8005d12:	461a      	mov	r2, r3
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	b10b      	cbz	r3, 8005d1c <_free_r+0x4c>
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	d9fa      	bls.n	8005d12 <_free_r+0x42>
 8005d1c:	6811      	ldr	r1, [r2, #0]
 8005d1e:	1850      	adds	r0, r2, r1
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d10b      	bne.n	8005d3c <_free_r+0x6c>
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	4401      	add	r1, r0
 8005d28:	1850      	adds	r0, r2, r1
 8005d2a:	4283      	cmp	r3, r0
 8005d2c:	6011      	str	r1, [r2, #0]
 8005d2e:	d1e0      	bne.n	8005cf2 <_free_r+0x22>
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	6053      	str	r3, [r2, #4]
 8005d36:	4408      	add	r0, r1
 8005d38:	6010      	str	r0, [r2, #0]
 8005d3a:	e7da      	b.n	8005cf2 <_free_r+0x22>
 8005d3c:	d902      	bls.n	8005d44 <_free_r+0x74>
 8005d3e:	230c      	movs	r3, #12
 8005d40:	602b      	str	r3, [r5, #0]
 8005d42:	e7d6      	b.n	8005cf2 <_free_r+0x22>
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	1821      	adds	r1, r4, r0
 8005d48:	428b      	cmp	r3, r1
 8005d4a:	bf04      	itt	eq
 8005d4c:	6819      	ldreq	r1, [r3, #0]
 8005d4e:	685b      	ldreq	r3, [r3, #4]
 8005d50:	6063      	str	r3, [r4, #4]
 8005d52:	bf04      	itt	eq
 8005d54:	1809      	addeq	r1, r1, r0
 8005d56:	6021      	streq	r1, [r4, #0]
 8005d58:	6054      	str	r4, [r2, #4]
 8005d5a:	e7ca      	b.n	8005cf2 <_free_r+0x22>
 8005d5c:	bd38      	pop	{r3, r4, r5, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000314 	.word	0x20000314

08005d64 <malloc>:
 8005d64:	4b02      	ldr	r3, [pc, #8]	@ (8005d70 <malloc+0xc>)
 8005d66:	4601      	mov	r1, r0
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	f000 b825 	b.w	8005db8 <_malloc_r>
 8005d6e:	bf00      	nop
 8005d70:	2000005c 	.word	0x2000005c

08005d74 <sbrk_aligned>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	4e0f      	ldr	r6, [pc, #60]	@ (8005db4 <sbrk_aligned+0x40>)
 8005d78:	460c      	mov	r4, r1
 8005d7a:	6831      	ldr	r1, [r6, #0]
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	b911      	cbnz	r1, 8005d86 <sbrk_aligned+0x12>
 8005d80:	f000 fca6 	bl	80066d0 <_sbrk_r>
 8005d84:	6030      	str	r0, [r6, #0]
 8005d86:	4621      	mov	r1, r4
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f000 fca1 	bl	80066d0 <_sbrk_r>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	d103      	bne.n	8005d9a <sbrk_aligned+0x26>
 8005d92:	f04f 34ff 	mov.w	r4, #4294967295
 8005d96:	4620      	mov	r0, r4
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
 8005d9a:	1cc4      	adds	r4, r0, #3
 8005d9c:	f024 0403 	bic.w	r4, r4, #3
 8005da0:	42a0      	cmp	r0, r4
 8005da2:	d0f8      	beq.n	8005d96 <sbrk_aligned+0x22>
 8005da4:	1a21      	subs	r1, r4, r0
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 fc92 	bl	80066d0 <_sbrk_r>
 8005dac:	3001      	adds	r0, #1
 8005dae:	d1f2      	bne.n	8005d96 <sbrk_aligned+0x22>
 8005db0:	e7ef      	b.n	8005d92 <sbrk_aligned+0x1e>
 8005db2:	bf00      	nop
 8005db4:	20000310 	.word	0x20000310

08005db8 <_malloc_r>:
 8005db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	1ccd      	adds	r5, r1, #3
 8005dbe:	f025 0503 	bic.w	r5, r5, #3
 8005dc2:	3508      	adds	r5, #8
 8005dc4:	2d0c      	cmp	r5, #12
 8005dc6:	bf38      	it	cc
 8005dc8:	250c      	movcc	r5, #12
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	4606      	mov	r6, r0
 8005dce:	db01      	blt.n	8005dd4 <_malloc_r+0x1c>
 8005dd0:	42a9      	cmp	r1, r5
 8005dd2:	d904      	bls.n	8005dde <_malloc_r+0x26>
 8005dd4:	230c      	movs	r3, #12
 8005dd6:	6033      	str	r3, [r6, #0]
 8005dd8:	2000      	movs	r0, #0
 8005dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005eb4 <_malloc_r+0xfc>
 8005de2:	f000 f869 	bl	8005eb8 <__malloc_lock>
 8005de6:	f8d8 3000 	ldr.w	r3, [r8]
 8005dea:	461c      	mov	r4, r3
 8005dec:	bb44      	cbnz	r4, 8005e40 <_malloc_r+0x88>
 8005dee:	4629      	mov	r1, r5
 8005df0:	4630      	mov	r0, r6
 8005df2:	f7ff ffbf 	bl	8005d74 <sbrk_aligned>
 8005df6:	1c43      	adds	r3, r0, #1
 8005df8:	4604      	mov	r4, r0
 8005dfa:	d158      	bne.n	8005eae <_malloc_r+0xf6>
 8005dfc:	f8d8 4000 	ldr.w	r4, [r8]
 8005e00:	4627      	mov	r7, r4
 8005e02:	2f00      	cmp	r7, #0
 8005e04:	d143      	bne.n	8005e8e <_malloc_r+0xd6>
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	d04b      	beq.n	8005ea2 <_malloc_r+0xea>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	4630      	mov	r0, r6
 8005e10:	eb04 0903 	add.w	r9, r4, r3
 8005e14:	f000 fc5c 	bl	80066d0 <_sbrk_r>
 8005e18:	4581      	cmp	r9, r0
 8005e1a:	d142      	bne.n	8005ea2 <_malloc_r+0xea>
 8005e1c:	6821      	ldr	r1, [r4, #0]
 8005e1e:	1a6d      	subs	r5, r5, r1
 8005e20:	4629      	mov	r1, r5
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ffa6 	bl	8005d74 <sbrk_aligned>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d03a      	beq.n	8005ea2 <_malloc_r+0xea>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	442b      	add	r3, r5
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	f8d8 3000 	ldr.w	r3, [r8]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	bb62      	cbnz	r2, 8005e94 <_malloc_r+0xdc>
 8005e3a:	f8c8 7000 	str.w	r7, [r8]
 8005e3e:	e00f      	b.n	8005e60 <_malloc_r+0xa8>
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	1b52      	subs	r2, r2, r5
 8005e44:	d420      	bmi.n	8005e88 <_malloc_r+0xd0>
 8005e46:	2a0b      	cmp	r2, #11
 8005e48:	d917      	bls.n	8005e7a <_malloc_r+0xc2>
 8005e4a:	1961      	adds	r1, r4, r5
 8005e4c:	42a3      	cmp	r3, r4
 8005e4e:	6025      	str	r5, [r4, #0]
 8005e50:	bf18      	it	ne
 8005e52:	6059      	strne	r1, [r3, #4]
 8005e54:	6863      	ldr	r3, [r4, #4]
 8005e56:	bf08      	it	eq
 8005e58:	f8c8 1000 	streq.w	r1, [r8]
 8005e5c:	5162      	str	r2, [r4, r5]
 8005e5e:	604b      	str	r3, [r1, #4]
 8005e60:	4630      	mov	r0, r6
 8005e62:	f000 f82f 	bl	8005ec4 <__malloc_unlock>
 8005e66:	f104 000b 	add.w	r0, r4, #11
 8005e6a:	1d23      	adds	r3, r4, #4
 8005e6c:	f020 0007 	bic.w	r0, r0, #7
 8005e70:	1ac2      	subs	r2, r0, r3
 8005e72:	bf1c      	itt	ne
 8005e74:	1a1b      	subne	r3, r3, r0
 8005e76:	50a3      	strne	r3, [r4, r2]
 8005e78:	e7af      	b.n	8005dda <_malloc_r+0x22>
 8005e7a:	6862      	ldr	r2, [r4, #4]
 8005e7c:	42a3      	cmp	r3, r4
 8005e7e:	bf0c      	ite	eq
 8005e80:	f8c8 2000 	streq.w	r2, [r8]
 8005e84:	605a      	strne	r2, [r3, #4]
 8005e86:	e7eb      	b.n	8005e60 <_malloc_r+0xa8>
 8005e88:	4623      	mov	r3, r4
 8005e8a:	6864      	ldr	r4, [r4, #4]
 8005e8c:	e7ae      	b.n	8005dec <_malloc_r+0x34>
 8005e8e:	463c      	mov	r4, r7
 8005e90:	687f      	ldr	r7, [r7, #4]
 8005e92:	e7b6      	b.n	8005e02 <_malloc_r+0x4a>
 8005e94:	461a      	mov	r2, r3
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	d1fb      	bne.n	8005e94 <_malloc_r+0xdc>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6053      	str	r3, [r2, #4]
 8005ea0:	e7de      	b.n	8005e60 <_malloc_r+0xa8>
 8005ea2:	230c      	movs	r3, #12
 8005ea4:	6033      	str	r3, [r6, #0]
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f000 f80c 	bl	8005ec4 <__malloc_unlock>
 8005eac:	e794      	b.n	8005dd8 <_malloc_r+0x20>
 8005eae:	6005      	str	r5, [r0, #0]
 8005eb0:	e7d6      	b.n	8005e60 <_malloc_r+0xa8>
 8005eb2:	bf00      	nop
 8005eb4:	20000314 	.word	0x20000314

08005eb8 <__malloc_lock>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	@ (8005ec0 <__malloc_lock+0x8>)
 8005eba:	f7ff bf06 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	2000030c 	.word	0x2000030c

08005ec4 <__malloc_unlock>:
 8005ec4:	4801      	ldr	r0, [pc, #4]	@ (8005ecc <__malloc_unlock+0x8>)
 8005ec6:	f7ff bf01 	b.w	8005ccc <__retarget_lock_release_recursive>
 8005eca:	bf00      	nop
 8005ecc:	2000030c 	.word	0x2000030c

08005ed0 <__sfputc_r>:
 8005ed0:	6893      	ldr	r3, [r2, #8]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	b410      	push	{r4}
 8005ed8:	6093      	str	r3, [r2, #8]
 8005eda:	da08      	bge.n	8005eee <__sfputc_r+0x1e>
 8005edc:	6994      	ldr	r4, [r2, #24]
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	db01      	blt.n	8005ee6 <__sfputc_r+0x16>
 8005ee2:	290a      	cmp	r1, #10
 8005ee4:	d103      	bne.n	8005eee <__sfputc_r+0x1e>
 8005ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eea:	f7ff bde0 	b.w	8005aae <__swbuf_r>
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	1c58      	adds	r0, r3, #1
 8005ef2:	6010      	str	r0, [r2, #0]
 8005ef4:	7019      	strb	r1, [r3, #0]
 8005ef6:	4608      	mov	r0, r1
 8005ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <__sfputs_r>:
 8005efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f00:	4606      	mov	r6, r0
 8005f02:	460f      	mov	r7, r1
 8005f04:	4614      	mov	r4, r2
 8005f06:	18d5      	adds	r5, r2, r3
 8005f08:	42ac      	cmp	r4, r5
 8005f0a:	d101      	bne.n	8005f10 <__sfputs_r+0x12>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	e007      	b.n	8005f20 <__sfputs_r+0x22>
 8005f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f14:	463a      	mov	r2, r7
 8005f16:	4630      	mov	r0, r6
 8005f18:	f7ff ffda 	bl	8005ed0 <__sfputc_r>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d1f3      	bne.n	8005f08 <__sfputs_r+0xa>
 8005f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f24 <_vfiprintf_r>:
 8005f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f28:	460d      	mov	r5, r1
 8005f2a:	b09d      	sub	sp, #116	@ 0x74
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	4698      	mov	r8, r3
 8005f30:	4606      	mov	r6, r0
 8005f32:	b118      	cbz	r0, 8005f3c <_vfiprintf_r+0x18>
 8005f34:	6a03      	ldr	r3, [r0, #32]
 8005f36:	b90b      	cbnz	r3, 8005f3c <_vfiprintf_r+0x18>
 8005f38:	f7ff fc14 	bl	8005764 <__sinit>
 8005f3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f3e:	07d9      	lsls	r1, r3, #31
 8005f40:	d405      	bmi.n	8005f4e <_vfiprintf_r+0x2a>
 8005f42:	89ab      	ldrh	r3, [r5, #12]
 8005f44:	059a      	lsls	r2, r3, #22
 8005f46:	d402      	bmi.n	8005f4e <_vfiprintf_r+0x2a>
 8005f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f4a:	f7ff febe 	bl	8005cca <__retarget_lock_acquire_recursive>
 8005f4e:	89ab      	ldrh	r3, [r5, #12]
 8005f50:	071b      	lsls	r3, r3, #28
 8005f52:	d501      	bpl.n	8005f58 <_vfiprintf_r+0x34>
 8005f54:	692b      	ldr	r3, [r5, #16]
 8005f56:	b99b      	cbnz	r3, 8005f80 <_vfiprintf_r+0x5c>
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f7ff fde6 	bl	8005b2c <__swsetup_r>
 8005f60:	b170      	cbz	r0, 8005f80 <_vfiprintf_r+0x5c>
 8005f62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f64:	07dc      	lsls	r4, r3, #31
 8005f66:	d504      	bpl.n	8005f72 <_vfiprintf_r+0x4e>
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6c:	b01d      	add	sp, #116	@ 0x74
 8005f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f72:	89ab      	ldrh	r3, [r5, #12]
 8005f74:	0598      	lsls	r0, r3, #22
 8005f76:	d4f7      	bmi.n	8005f68 <_vfiprintf_r+0x44>
 8005f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f7a:	f7ff fea7 	bl	8005ccc <__retarget_lock_release_recursive>
 8005f7e:	e7f3      	b.n	8005f68 <_vfiprintf_r+0x44>
 8005f80:	2300      	movs	r3, #0
 8005f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f84:	2320      	movs	r3, #32
 8005f86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f8e:	2330      	movs	r3, #48	@ 0x30
 8005f90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006140 <_vfiprintf_r+0x21c>
 8005f94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f98:	f04f 0901 	mov.w	r9, #1
 8005f9c:	4623      	mov	r3, r4
 8005f9e:	469a      	mov	sl, r3
 8005fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fa4:	b10a      	cbz	r2, 8005faa <_vfiprintf_r+0x86>
 8005fa6:	2a25      	cmp	r2, #37	@ 0x25
 8005fa8:	d1f9      	bne.n	8005f9e <_vfiprintf_r+0x7a>
 8005faa:	ebba 0b04 	subs.w	fp, sl, r4
 8005fae:	d00b      	beq.n	8005fc8 <_vfiprintf_r+0xa4>
 8005fb0:	465b      	mov	r3, fp
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff ffa1 	bl	8005efe <__sfputs_r>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f000 80a7 	beq.w	8006110 <_vfiprintf_r+0x1ec>
 8005fc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fc4:	445a      	add	r2, fp
 8005fc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 809f 	beq.w	8006110 <_vfiprintf_r+0x1ec>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fdc:	f10a 0a01 	add.w	sl, sl, #1
 8005fe0:	9304      	str	r3, [sp, #16]
 8005fe2:	9307      	str	r3, [sp, #28]
 8005fe4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fe8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fea:	4654      	mov	r4, sl
 8005fec:	2205      	movs	r2, #5
 8005fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff2:	4853      	ldr	r0, [pc, #332]	@ (8006140 <_vfiprintf_r+0x21c>)
 8005ff4:	f7fa f8ec 	bl	80001d0 <memchr>
 8005ff8:	9a04      	ldr	r2, [sp, #16]
 8005ffa:	b9d8      	cbnz	r0, 8006034 <_vfiprintf_r+0x110>
 8005ffc:	06d1      	lsls	r1, r2, #27
 8005ffe:	bf44      	itt	mi
 8006000:	2320      	movmi	r3, #32
 8006002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006006:	0713      	lsls	r3, r2, #28
 8006008:	bf44      	itt	mi
 800600a:	232b      	movmi	r3, #43	@ 0x2b
 800600c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006010:	f89a 3000 	ldrb.w	r3, [sl]
 8006014:	2b2a      	cmp	r3, #42	@ 0x2a
 8006016:	d015      	beq.n	8006044 <_vfiprintf_r+0x120>
 8006018:	9a07      	ldr	r2, [sp, #28]
 800601a:	4654      	mov	r4, sl
 800601c:	2000      	movs	r0, #0
 800601e:	f04f 0c0a 	mov.w	ip, #10
 8006022:	4621      	mov	r1, r4
 8006024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006028:	3b30      	subs	r3, #48	@ 0x30
 800602a:	2b09      	cmp	r3, #9
 800602c:	d94b      	bls.n	80060c6 <_vfiprintf_r+0x1a2>
 800602e:	b1b0      	cbz	r0, 800605e <_vfiprintf_r+0x13a>
 8006030:	9207      	str	r2, [sp, #28]
 8006032:	e014      	b.n	800605e <_vfiprintf_r+0x13a>
 8006034:	eba0 0308 	sub.w	r3, r0, r8
 8006038:	fa09 f303 	lsl.w	r3, r9, r3
 800603c:	4313      	orrs	r3, r2
 800603e:	9304      	str	r3, [sp, #16]
 8006040:	46a2      	mov	sl, r4
 8006042:	e7d2      	b.n	8005fea <_vfiprintf_r+0xc6>
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	1d19      	adds	r1, r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	9103      	str	r1, [sp, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	bfbb      	ittet	lt
 8006050:	425b      	neglt	r3, r3
 8006052:	f042 0202 	orrlt.w	r2, r2, #2
 8006056:	9307      	strge	r3, [sp, #28]
 8006058:	9307      	strlt	r3, [sp, #28]
 800605a:	bfb8      	it	lt
 800605c:	9204      	strlt	r2, [sp, #16]
 800605e:	7823      	ldrb	r3, [r4, #0]
 8006060:	2b2e      	cmp	r3, #46	@ 0x2e
 8006062:	d10a      	bne.n	800607a <_vfiprintf_r+0x156>
 8006064:	7863      	ldrb	r3, [r4, #1]
 8006066:	2b2a      	cmp	r3, #42	@ 0x2a
 8006068:	d132      	bne.n	80060d0 <_vfiprintf_r+0x1ac>
 800606a:	9b03      	ldr	r3, [sp, #12]
 800606c:	1d1a      	adds	r2, r3, #4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	9203      	str	r2, [sp, #12]
 8006072:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006076:	3402      	adds	r4, #2
 8006078:	9305      	str	r3, [sp, #20]
 800607a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006150 <_vfiprintf_r+0x22c>
 800607e:	7821      	ldrb	r1, [r4, #0]
 8006080:	2203      	movs	r2, #3
 8006082:	4650      	mov	r0, sl
 8006084:	f7fa f8a4 	bl	80001d0 <memchr>
 8006088:	b138      	cbz	r0, 800609a <_vfiprintf_r+0x176>
 800608a:	9b04      	ldr	r3, [sp, #16]
 800608c:	eba0 000a 	sub.w	r0, r0, sl
 8006090:	2240      	movs	r2, #64	@ 0x40
 8006092:	4082      	lsls	r2, r0
 8006094:	4313      	orrs	r3, r2
 8006096:	3401      	adds	r4, #1
 8006098:	9304      	str	r3, [sp, #16]
 800609a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609e:	4829      	ldr	r0, [pc, #164]	@ (8006144 <_vfiprintf_r+0x220>)
 80060a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060a4:	2206      	movs	r2, #6
 80060a6:	f7fa f893 	bl	80001d0 <memchr>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d03f      	beq.n	800612e <_vfiprintf_r+0x20a>
 80060ae:	4b26      	ldr	r3, [pc, #152]	@ (8006148 <_vfiprintf_r+0x224>)
 80060b0:	bb1b      	cbnz	r3, 80060fa <_vfiprintf_r+0x1d6>
 80060b2:	9b03      	ldr	r3, [sp, #12]
 80060b4:	3307      	adds	r3, #7
 80060b6:	f023 0307 	bic.w	r3, r3, #7
 80060ba:	3308      	adds	r3, #8
 80060bc:	9303      	str	r3, [sp, #12]
 80060be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c0:	443b      	add	r3, r7
 80060c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060c4:	e76a      	b.n	8005f9c <_vfiprintf_r+0x78>
 80060c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80060ca:	460c      	mov	r4, r1
 80060cc:	2001      	movs	r0, #1
 80060ce:	e7a8      	b.n	8006022 <_vfiprintf_r+0xfe>
 80060d0:	2300      	movs	r3, #0
 80060d2:	3401      	adds	r4, #1
 80060d4:	9305      	str	r3, [sp, #20]
 80060d6:	4619      	mov	r1, r3
 80060d8:	f04f 0c0a 	mov.w	ip, #10
 80060dc:	4620      	mov	r0, r4
 80060de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060e2:	3a30      	subs	r2, #48	@ 0x30
 80060e4:	2a09      	cmp	r2, #9
 80060e6:	d903      	bls.n	80060f0 <_vfiprintf_r+0x1cc>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0c6      	beq.n	800607a <_vfiprintf_r+0x156>
 80060ec:	9105      	str	r1, [sp, #20]
 80060ee:	e7c4      	b.n	800607a <_vfiprintf_r+0x156>
 80060f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80060f4:	4604      	mov	r4, r0
 80060f6:	2301      	movs	r3, #1
 80060f8:	e7f0      	b.n	80060dc <_vfiprintf_r+0x1b8>
 80060fa:	ab03      	add	r3, sp, #12
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	462a      	mov	r2, r5
 8006100:	4b12      	ldr	r3, [pc, #72]	@ (800614c <_vfiprintf_r+0x228>)
 8006102:	a904      	add	r1, sp, #16
 8006104:	4630      	mov	r0, r6
 8006106:	f3af 8000 	nop.w
 800610a:	4607      	mov	r7, r0
 800610c:	1c78      	adds	r0, r7, #1
 800610e:	d1d6      	bne.n	80060be <_vfiprintf_r+0x19a>
 8006110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006112:	07d9      	lsls	r1, r3, #31
 8006114:	d405      	bmi.n	8006122 <_vfiprintf_r+0x1fe>
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	059a      	lsls	r2, r3, #22
 800611a:	d402      	bmi.n	8006122 <_vfiprintf_r+0x1fe>
 800611c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800611e:	f7ff fdd5 	bl	8005ccc <__retarget_lock_release_recursive>
 8006122:	89ab      	ldrh	r3, [r5, #12]
 8006124:	065b      	lsls	r3, r3, #25
 8006126:	f53f af1f 	bmi.w	8005f68 <_vfiprintf_r+0x44>
 800612a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800612c:	e71e      	b.n	8005f6c <_vfiprintf_r+0x48>
 800612e:	ab03      	add	r3, sp, #12
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	462a      	mov	r2, r5
 8006134:	4b05      	ldr	r3, [pc, #20]	@ (800614c <_vfiprintf_r+0x228>)
 8006136:	a904      	add	r1, sp, #16
 8006138:	4630      	mov	r0, r6
 800613a:	f000 f879 	bl	8006230 <_printf_i>
 800613e:	e7e4      	b.n	800610a <_vfiprintf_r+0x1e6>
 8006140:	08006d74 	.word	0x08006d74
 8006144:	08006d7e 	.word	0x08006d7e
 8006148:	00000000 	.word	0x00000000
 800614c:	08005eff 	.word	0x08005eff
 8006150:	08006d7a 	.word	0x08006d7a

08006154 <_printf_common>:
 8006154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	4616      	mov	r6, r2
 800615a:	4698      	mov	r8, r3
 800615c:	688a      	ldr	r2, [r1, #8]
 800615e:	690b      	ldr	r3, [r1, #16]
 8006160:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006164:	4293      	cmp	r3, r2
 8006166:	bfb8      	it	lt
 8006168:	4613      	movlt	r3, r2
 800616a:	6033      	str	r3, [r6, #0]
 800616c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006170:	4607      	mov	r7, r0
 8006172:	460c      	mov	r4, r1
 8006174:	b10a      	cbz	r2, 800617a <_printf_common+0x26>
 8006176:	3301      	adds	r3, #1
 8006178:	6033      	str	r3, [r6, #0]
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	0699      	lsls	r1, r3, #26
 800617e:	bf42      	ittt	mi
 8006180:	6833      	ldrmi	r3, [r6, #0]
 8006182:	3302      	addmi	r3, #2
 8006184:	6033      	strmi	r3, [r6, #0]
 8006186:	6825      	ldr	r5, [r4, #0]
 8006188:	f015 0506 	ands.w	r5, r5, #6
 800618c:	d106      	bne.n	800619c <_printf_common+0x48>
 800618e:	f104 0a19 	add.w	sl, r4, #25
 8006192:	68e3      	ldr	r3, [r4, #12]
 8006194:	6832      	ldr	r2, [r6, #0]
 8006196:	1a9b      	subs	r3, r3, r2
 8006198:	42ab      	cmp	r3, r5
 800619a:	dc26      	bgt.n	80061ea <_printf_common+0x96>
 800619c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	3b00      	subs	r3, #0
 80061a4:	bf18      	it	ne
 80061a6:	2301      	movne	r3, #1
 80061a8:	0692      	lsls	r2, r2, #26
 80061aa:	d42b      	bmi.n	8006204 <_printf_common+0xb0>
 80061ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061b0:	4641      	mov	r1, r8
 80061b2:	4638      	mov	r0, r7
 80061b4:	47c8      	blx	r9
 80061b6:	3001      	adds	r0, #1
 80061b8:	d01e      	beq.n	80061f8 <_printf_common+0xa4>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	6922      	ldr	r2, [r4, #16]
 80061be:	f003 0306 	and.w	r3, r3, #6
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	bf02      	ittt	eq
 80061c6:	68e5      	ldreq	r5, [r4, #12]
 80061c8:	6833      	ldreq	r3, [r6, #0]
 80061ca:	1aed      	subeq	r5, r5, r3
 80061cc:	68a3      	ldr	r3, [r4, #8]
 80061ce:	bf0c      	ite	eq
 80061d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d4:	2500      	movne	r5, #0
 80061d6:	4293      	cmp	r3, r2
 80061d8:	bfc4      	itt	gt
 80061da:	1a9b      	subgt	r3, r3, r2
 80061dc:	18ed      	addgt	r5, r5, r3
 80061de:	2600      	movs	r6, #0
 80061e0:	341a      	adds	r4, #26
 80061e2:	42b5      	cmp	r5, r6
 80061e4:	d11a      	bne.n	800621c <_printf_common+0xc8>
 80061e6:	2000      	movs	r0, #0
 80061e8:	e008      	b.n	80061fc <_printf_common+0xa8>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4652      	mov	r2, sl
 80061ee:	4641      	mov	r1, r8
 80061f0:	4638      	mov	r0, r7
 80061f2:	47c8      	blx	r9
 80061f4:	3001      	adds	r0, #1
 80061f6:	d103      	bne.n	8006200 <_printf_common+0xac>
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	3501      	adds	r5, #1
 8006202:	e7c6      	b.n	8006192 <_printf_common+0x3e>
 8006204:	18e1      	adds	r1, r4, r3
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	2030      	movs	r0, #48	@ 0x30
 800620a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800620e:	4422      	add	r2, r4
 8006210:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006214:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006218:	3302      	adds	r3, #2
 800621a:	e7c7      	b.n	80061ac <_printf_common+0x58>
 800621c:	2301      	movs	r3, #1
 800621e:	4622      	mov	r2, r4
 8006220:	4641      	mov	r1, r8
 8006222:	4638      	mov	r0, r7
 8006224:	47c8      	blx	r9
 8006226:	3001      	adds	r0, #1
 8006228:	d0e6      	beq.n	80061f8 <_printf_common+0xa4>
 800622a:	3601      	adds	r6, #1
 800622c:	e7d9      	b.n	80061e2 <_printf_common+0x8e>
	...

08006230 <_printf_i>:
 8006230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	7e0f      	ldrb	r7, [r1, #24]
 8006236:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006238:	2f78      	cmp	r7, #120	@ 0x78
 800623a:	4691      	mov	r9, r2
 800623c:	4680      	mov	r8, r0
 800623e:	460c      	mov	r4, r1
 8006240:	469a      	mov	sl, r3
 8006242:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006246:	d807      	bhi.n	8006258 <_printf_i+0x28>
 8006248:	2f62      	cmp	r7, #98	@ 0x62
 800624a:	d80a      	bhi.n	8006262 <_printf_i+0x32>
 800624c:	2f00      	cmp	r7, #0
 800624e:	f000 80d2 	beq.w	80063f6 <_printf_i+0x1c6>
 8006252:	2f58      	cmp	r7, #88	@ 0x58
 8006254:	f000 80b9 	beq.w	80063ca <_printf_i+0x19a>
 8006258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800625c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006260:	e03a      	b.n	80062d8 <_printf_i+0xa8>
 8006262:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006266:	2b15      	cmp	r3, #21
 8006268:	d8f6      	bhi.n	8006258 <_printf_i+0x28>
 800626a:	a101      	add	r1, pc, #4	@ (adr r1, 8006270 <_printf_i+0x40>)
 800626c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006270:	080062c9 	.word	0x080062c9
 8006274:	080062dd 	.word	0x080062dd
 8006278:	08006259 	.word	0x08006259
 800627c:	08006259 	.word	0x08006259
 8006280:	08006259 	.word	0x08006259
 8006284:	08006259 	.word	0x08006259
 8006288:	080062dd 	.word	0x080062dd
 800628c:	08006259 	.word	0x08006259
 8006290:	08006259 	.word	0x08006259
 8006294:	08006259 	.word	0x08006259
 8006298:	08006259 	.word	0x08006259
 800629c:	080063dd 	.word	0x080063dd
 80062a0:	08006307 	.word	0x08006307
 80062a4:	08006397 	.word	0x08006397
 80062a8:	08006259 	.word	0x08006259
 80062ac:	08006259 	.word	0x08006259
 80062b0:	080063ff 	.word	0x080063ff
 80062b4:	08006259 	.word	0x08006259
 80062b8:	08006307 	.word	0x08006307
 80062bc:	08006259 	.word	0x08006259
 80062c0:	08006259 	.word	0x08006259
 80062c4:	0800639f 	.word	0x0800639f
 80062c8:	6833      	ldr	r3, [r6, #0]
 80062ca:	1d1a      	adds	r2, r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6032      	str	r2, [r6, #0]
 80062d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062d8:	2301      	movs	r3, #1
 80062da:	e09d      	b.n	8006418 <_printf_i+0x1e8>
 80062dc:	6833      	ldr	r3, [r6, #0]
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	1d19      	adds	r1, r3, #4
 80062e2:	6031      	str	r1, [r6, #0]
 80062e4:	0606      	lsls	r6, r0, #24
 80062e6:	d501      	bpl.n	80062ec <_printf_i+0xbc>
 80062e8:	681d      	ldr	r5, [r3, #0]
 80062ea:	e003      	b.n	80062f4 <_printf_i+0xc4>
 80062ec:	0645      	lsls	r5, r0, #25
 80062ee:	d5fb      	bpl.n	80062e8 <_printf_i+0xb8>
 80062f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062f4:	2d00      	cmp	r5, #0
 80062f6:	da03      	bge.n	8006300 <_printf_i+0xd0>
 80062f8:	232d      	movs	r3, #45	@ 0x2d
 80062fa:	426d      	negs	r5, r5
 80062fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006300:	4859      	ldr	r0, [pc, #356]	@ (8006468 <_printf_i+0x238>)
 8006302:	230a      	movs	r3, #10
 8006304:	e011      	b.n	800632a <_printf_i+0xfa>
 8006306:	6821      	ldr	r1, [r4, #0]
 8006308:	6833      	ldr	r3, [r6, #0]
 800630a:	0608      	lsls	r0, r1, #24
 800630c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006310:	d402      	bmi.n	8006318 <_printf_i+0xe8>
 8006312:	0649      	lsls	r1, r1, #25
 8006314:	bf48      	it	mi
 8006316:	b2ad      	uxthmi	r5, r5
 8006318:	2f6f      	cmp	r7, #111	@ 0x6f
 800631a:	4853      	ldr	r0, [pc, #332]	@ (8006468 <_printf_i+0x238>)
 800631c:	6033      	str	r3, [r6, #0]
 800631e:	bf14      	ite	ne
 8006320:	230a      	movne	r3, #10
 8006322:	2308      	moveq	r3, #8
 8006324:	2100      	movs	r1, #0
 8006326:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800632a:	6866      	ldr	r6, [r4, #4]
 800632c:	60a6      	str	r6, [r4, #8]
 800632e:	2e00      	cmp	r6, #0
 8006330:	bfa2      	ittt	ge
 8006332:	6821      	ldrge	r1, [r4, #0]
 8006334:	f021 0104 	bicge.w	r1, r1, #4
 8006338:	6021      	strge	r1, [r4, #0]
 800633a:	b90d      	cbnz	r5, 8006340 <_printf_i+0x110>
 800633c:	2e00      	cmp	r6, #0
 800633e:	d04b      	beq.n	80063d8 <_printf_i+0x1a8>
 8006340:	4616      	mov	r6, r2
 8006342:	fbb5 f1f3 	udiv	r1, r5, r3
 8006346:	fb03 5711 	mls	r7, r3, r1, r5
 800634a:	5dc7      	ldrb	r7, [r0, r7]
 800634c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006350:	462f      	mov	r7, r5
 8006352:	42bb      	cmp	r3, r7
 8006354:	460d      	mov	r5, r1
 8006356:	d9f4      	bls.n	8006342 <_printf_i+0x112>
 8006358:	2b08      	cmp	r3, #8
 800635a:	d10b      	bne.n	8006374 <_printf_i+0x144>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	07df      	lsls	r7, r3, #31
 8006360:	d508      	bpl.n	8006374 <_printf_i+0x144>
 8006362:	6923      	ldr	r3, [r4, #16]
 8006364:	6861      	ldr	r1, [r4, #4]
 8006366:	4299      	cmp	r1, r3
 8006368:	bfde      	ittt	le
 800636a:	2330      	movle	r3, #48	@ 0x30
 800636c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006370:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006374:	1b92      	subs	r2, r2, r6
 8006376:	6122      	str	r2, [r4, #16]
 8006378:	f8cd a000 	str.w	sl, [sp]
 800637c:	464b      	mov	r3, r9
 800637e:	aa03      	add	r2, sp, #12
 8006380:	4621      	mov	r1, r4
 8006382:	4640      	mov	r0, r8
 8006384:	f7ff fee6 	bl	8006154 <_printf_common>
 8006388:	3001      	adds	r0, #1
 800638a:	d14a      	bne.n	8006422 <_printf_i+0x1f2>
 800638c:	f04f 30ff 	mov.w	r0, #4294967295
 8006390:	b004      	add	sp, #16
 8006392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	f043 0320 	orr.w	r3, r3, #32
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	4833      	ldr	r0, [pc, #204]	@ (800646c <_printf_i+0x23c>)
 80063a0:	2778      	movs	r7, #120	@ 0x78
 80063a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	6831      	ldr	r1, [r6, #0]
 80063aa:	061f      	lsls	r7, r3, #24
 80063ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80063b0:	d402      	bmi.n	80063b8 <_printf_i+0x188>
 80063b2:	065f      	lsls	r7, r3, #25
 80063b4:	bf48      	it	mi
 80063b6:	b2ad      	uxthmi	r5, r5
 80063b8:	6031      	str	r1, [r6, #0]
 80063ba:	07d9      	lsls	r1, r3, #31
 80063bc:	bf44      	itt	mi
 80063be:	f043 0320 	orrmi.w	r3, r3, #32
 80063c2:	6023      	strmi	r3, [r4, #0]
 80063c4:	b11d      	cbz	r5, 80063ce <_printf_i+0x19e>
 80063c6:	2310      	movs	r3, #16
 80063c8:	e7ac      	b.n	8006324 <_printf_i+0xf4>
 80063ca:	4827      	ldr	r0, [pc, #156]	@ (8006468 <_printf_i+0x238>)
 80063cc:	e7e9      	b.n	80063a2 <_printf_i+0x172>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	f023 0320 	bic.w	r3, r3, #32
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	e7f6      	b.n	80063c6 <_printf_i+0x196>
 80063d8:	4616      	mov	r6, r2
 80063da:	e7bd      	b.n	8006358 <_printf_i+0x128>
 80063dc:	6833      	ldr	r3, [r6, #0]
 80063de:	6825      	ldr	r5, [r4, #0]
 80063e0:	6961      	ldr	r1, [r4, #20]
 80063e2:	1d18      	adds	r0, r3, #4
 80063e4:	6030      	str	r0, [r6, #0]
 80063e6:	062e      	lsls	r6, r5, #24
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	d501      	bpl.n	80063f0 <_printf_i+0x1c0>
 80063ec:	6019      	str	r1, [r3, #0]
 80063ee:	e002      	b.n	80063f6 <_printf_i+0x1c6>
 80063f0:	0668      	lsls	r0, r5, #25
 80063f2:	d5fb      	bpl.n	80063ec <_printf_i+0x1bc>
 80063f4:	8019      	strh	r1, [r3, #0]
 80063f6:	2300      	movs	r3, #0
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	4616      	mov	r6, r2
 80063fc:	e7bc      	b.n	8006378 <_printf_i+0x148>
 80063fe:	6833      	ldr	r3, [r6, #0]
 8006400:	1d1a      	adds	r2, r3, #4
 8006402:	6032      	str	r2, [r6, #0]
 8006404:	681e      	ldr	r6, [r3, #0]
 8006406:	6862      	ldr	r2, [r4, #4]
 8006408:	2100      	movs	r1, #0
 800640a:	4630      	mov	r0, r6
 800640c:	f7f9 fee0 	bl	80001d0 <memchr>
 8006410:	b108      	cbz	r0, 8006416 <_printf_i+0x1e6>
 8006412:	1b80      	subs	r0, r0, r6
 8006414:	6060      	str	r0, [r4, #4]
 8006416:	6863      	ldr	r3, [r4, #4]
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	2300      	movs	r3, #0
 800641c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006420:	e7aa      	b.n	8006378 <_printf_i+0x148>
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	4632      	mov	r2, r6
 8006426:	4649      	mov	r1, r9
 8006428:	4640      	mov	r0, r8
 800642a:	47d0      	blx	sl
 800642c:	3001      	adds	r0, #1
 800642e:	d0ad      	beq.n	800638c <_printf_i+0x15c>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	079b      	lsls	r3, r3, #30
 8006434:	d413      	bmi.n	800645e <_printf_i+0x22e>
 8006436:	68e0      	ldr	r0, [r4, #12]
 8006438:	9b03      	ldr	r3, [sp, #12]
 800643a:	4298      	cmp	r0, r3
 800643c:	bfb8      	it	lt
 800643e:	4618      	movlt	r0, r3
 8006440:	e7a6      	b.n	8006390 <_printf_i+0x160>
 8006442:	2301      	movs	r3, #1
 8006444:	4632      	mov	r2, r6
 8006446:	4649      	mov	r1, r9
 8006448:	4640      	mov	r0, r8
 800644a:	47d0      	blx	sl
 800644c:	3001      	adds	r0, #1
 800644e:	d09d      	beq.n	800638c <_printf_i+0x15c>
 8006450:	3501      	adds	r5, #1
 8006452:	68e3      	ldr	r3, [r4, #12]
 8006454:	9903      	ldr	r1, [sp, #12]
 8006456:	1a5b      	subs	r3, r3, r1
 8006458:	42ab      	cmp	r3, r5
 800645a:	dcf2      	bgt.n	8006442 <_printf_i+0x212>
 800645c:	e7eb      	b.n	8006436 <_printf_i+0x206>
 800645e:	2500      	movs	r5, #0
 8006460:	f104 0619 	add.w	r6, r4, #25
 8006464:	e7f5      	b.n	8006452 <_printf_i+0x222>
 8006466:	bf00      	nop
 8006468:	08006d85 	.word	0x08006d85
 800646c:	08006d96 	.word	0x08006d96

08006470 <__sflush_r>:
 8006470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006478:	0716      	lsls	r6, r2, #28
 800647a:	4605      	mov	r5, r0
 800647c:	460c      	mov	r4, r1
 800647e:	d454      	bmi.n	800652a <__sflush_r+0xba>
 8006480:	684b      	ldr	r3, [r1, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	dc02      	bgt.n	800648c <__sflush_r+0x1c>
 8006486:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	dd48      	ble.n	800651e <__sflush_r+0xae>
 800648c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800648e:	2e00      	cmp	r6, #0
 8006490:	d045      	beq.n	800651e <__sflush_r+0xae>
 8006492:	2300      	movs	r3, #0
 8006494:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006498:	682f      	ldr	r7, [r5, #0]
 800649a:	6a21      	ldr	r1, [r4, #32]
 800649c:	602b      	str	r3, [r5, #0]
 800649e:	d030      	beq.n	8006502 <__sflush_r+0x92>
 80064a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	0759      	lsls	r1, r3, #29
 80064a6:	d505      	bpl.n	80064b4 <__sflush_r+0x44>
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064ae:	b10b      	cbz	r3, 80064b4 <__sflush_r+0x44>
 80064b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	2300      	movs	r3, #0
 80064b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064b8:	6a21      	ldr	r1, [r4, #32]
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b0      	blx	r6
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	d106      	bne.n	80064d2 <__sflush_r+0x62>
 80064c4:	6829      	ldr	r1, [r5, #0]
 80064c6:	291d      	cmp	r1, #29
 80064c8:	d82b      	bhi.n	8006522 <__sflush_r+0xb2>
 80064ca:	4a2a      	ldr	r2, [pc, #168]	@ (8006574 <__sflush_r+0x104>)
 80064cc:	410a      	asrs	r2, r1
 80064ce:	07d6      	lsls	r6, r2, #31
 80064d0:	d427      	bmi.n	8006522 <__sflush_r+0xb2>
 80064d2:	2200      	movs	r2, #0
 80064d4:	6062      	str	r2, [r4, #4]
 80064d6:	04d9      	lsls	r1, r3, #19
 80064d8:	6922      	ldr	r2, [r4, #16]
 80064da:	6022      	str	r2, [r4, #0]
 80064dc:	d504      	bpl.n	80064e8 <__sflush_r+0x78>
 80064de:	1c42      	adds	r2, r0, #1
 80064e0:	d101      	bne.n	80064e6 <__sflush_r+0x76>
 80064e2:	682b      	ldr	r3, [r5, #0]
 80064e4:	b903      	cbnz	r3, 80064e8 <__sflush_r+0x78>
 80064e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80064e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064ea:	602f      	str	r7, [r5, #0]
 80064ec:	b1b9      	cbz	r1, 800651e <__sflush_r+0xae>
 80064ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064f2:	4299      	cmp	r1, r3
 80064f4:	d002      	beq.n	80064fc <__sflush_r+0x8c>
 80064f6:	4628      	mov	r0, r5
 80064f8:	f7ff fbea 	bl	8005cd0 <_free_r>
 80064fc:	2300      	movs	r3, #0
 80064fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8006500:	e00d      	b.n	800651e <__sflush_r+0xae>
 8006502:	2301      	movs	r3, #1
 8006504:	4628      	mov	r0, r5
 8006506:	47b0      	blx	r6
 8006508:	4602      	mov	r2, r0
 800650a:	1c50      	adds	r0, r2, #1
 800650c:	d1c9      	bne.n	80064a2 <__sflush_r+0x32>
 800650e:	682b      	ldr	r3, [r5, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0c6      	beq.n	80064a2 <__sflush_r+0x32>
 8006514:	2b1d      	cmp	r3, #29
 8006516:	d001      	beq.n	800651c <__sflush_r+0xac>
 8006518:	2b16      	cmp	r3, #22
 800651a:	d11e      	bne.n	800655a <__sflush_r+0xea>
 800651c:	602f      	str	r7, [r5, #0]
 800651e:	2000      	movs	r0, #0
 8006520:	e022      	b.n	8006568 <__sflush_r+0xf8>
 8006522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006526:	b21b      	sxth	r3, r3
 8006528:	e01b      	b.n	8006562 <__sflush_r+0xf2>
 800652a:	690f      	ldr	r7, [r1, #16]
 800652c:	2f00      	cmp	r7, #0
 800652e:	d0f6      	beq.n	800651e <__sflush_r+0xae>
 8006530:	0793      	lsls	r3, r2, #30
 8006532:	680e      	ldr	r6, [r1, #0]
 8006534:	bf08      	it	eq
 8006536:	694b      	ldreq	r3, [r1, #20]
 8006538:	600f      	str	r7, [r1, #0]
 800653a:	bf18      	it	ne
 800653c:	2300      	movne	r3, #0
 800653e:	eba6 0807 	sub.w	r8, r6, r7
 8006542:	608b      	str	r3, [r1, #8]
 8006544:	f1b8 0f00 	cmp.w	r8, #0
 8006548:	dde9      	ble.n	800651e <__sflush_r+0xae>
 800654a:	6a21      	ldr	r1, [r4, #32]
 800654c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800654e:	4643      	mov	r3, r8
 8006550:	463a      	mov	r2, r7
 8006552:	4628      	mov	r0, r5
 8006554:	47b0      	blx	r6
 8006556:	2800      	cmp	r0, #0
 8006558:	dc08      	bgt.n	800656c <__sflush_r+0xfc>
 800655a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006562:	81a3      	strh	r3, [r4, #12]
 8006564:	f04f 30ff 	mov.w	r0, #4294967295
 8006568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800656c:	4407      	add	r7, r0
 800656e:	eba8 0800 	sub.w	r8, r8, r0
 8006572:	e7e7      	b.n	8006544 <__sflush_r+0xd4>
 8006574:	dfbffffe 	.word	0xdfbffffe

08006578 <_fflush_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	690b      	ldr	r3, [r1, #16]
 800657c:	4605      	mov	r5, r0
 800657e:	460c      	mov	r4, r1
 8006580:	b913      	cbnz	r3, 8006588 <_fflush_r+0x10>
 8006582:	2500      	movs	r5, #0
 8006584:	4628      	mov	r0, r5
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	b118      	cbz	r0, 8006592 <_fflush_r+0x1a>
 800658a:	6a03      	ldr	r3, [r0, #32]
 800658c:	b90b      	cbnz	r3, 8006592 <_fflush_r+0x1a>
 800658e:	f7ff f8e9 	bl	8005764 <__sinit>
 8006592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f3      	beq.n	8006582 <_fflush_r+0xa>
 800659a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800659c:	07d0      	lsls	r0, r2, #31
 800659e:	d404      	bmi.n	80065aa <_fflush_r+0x32>
 80065a0:	0599      	lsls	r1, r3, #22
 80065a2:	d402      	bmi.n	80065aa <_fflush_r+0x32>
 80065a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065a6:	f7ff fb90 	bl	8005cca <__retarget_lock_acquire_recursive>
 80065aa:	4628      	mov	r0, r5
 80065ac:	4621      	mov	r1, r4
 80065ae:	f7ff ff5f 	bl	8006470 <__sflush_r>
 80065b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065b4:	07da      	lsls	r2, r3, #31
 80065b6:	4605      	mov	r5, r0
 80065b8:	d4e4      	bmi.n	8006584 <_fflush_r+0xc>
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	059b      	lsls	r3, r3, #22
 80065be:	d4e1      	bmi.n	8006584 <_fflush_r+0xc>
 80065c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065c2:	f7ff fb83 	bl	8005ccc <__retarget_lock_release_recursive>
 80065c6:	e7dd      	b.n	8006584 <_fflush_r+0xc>

080065c8 <__swhatbuf_r>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	460c      	mov	r4, r1
 80065cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d0:	2900      	cmp	r1, #0
 80065d2:	b096      	sub	sp, #88	@ 0x58
 80065d4:	4615      	mov	r5, r2
 80065d6:	461e      	mov	r6, r3
 80065d8:	da0d      	bge.n	80065f6 <__swhatbuf_r+0x2e>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065e0:	f04f 0100 	mov.w	r1, #0
 80065e4:	bf14      	ite	ne
 80065e6:	2340      	movne	r3, #64	@ 0x40
 80065e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065ec:	2000      	movs	r0, #0
 80065ee:	6031      	str	r1, [r6, #0]
 80065f0:	602b      	str	r3, [r5, #0]
 80065f2:	b016      	add	sp, #88	@ 0x58
 80065f4:	bd70      	pop	{r4, r5, r6, pc}
 80065f6:	466a      	mov	r2, sp
 80065f8:	f000 f848 	bl	800668c <_fstat_r>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	dbec      	blt.n	80065da <__swhatbuf_r+0x12>
 8006600:	9901      	ldr	r1, [sp, #4]
 8006602:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006606:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800660a:	4259      	negs	r1, r3
 800660c:	4159      	adcs	r1, r3
 800660e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006612:	e7eb      	b.n	80065ec <__swhatbuf_r+0x24>

08006614 <__smakebuf_r>:
 8006614:	898b      	ldrh	r3, [r1, #12]
 8006616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006618:	079d      	lsls	r5, r3, #30
 800661a:	4606      	mov	r6, r0
 800661c:	460c      	mov	r4, r1
 800661e:	d507      	bpl.n	8006630 <__smakebuf_r+0x1c>
 8006620:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	6123      	str	r3, [r4, #16]
 8006628:	2301      	movs	r3, #1
 800662a:	6163      	str	r3, [r4, #20]
 800662c:	b003      	add	sp, #12
 800662e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006630:	ab01      	add	r3, sp, #4
 8006632:	466a      	mov	r2, sp
 8006634:	f7ff ffc8 	bl	80065c8 <__swhatbuf_r>
 8006638:	9f00      	ldr	r7, [sp, #0]
 800663a:	4605      	mov	r5, r0
 800663c:	4639      	mov	r1, r7
 800663e:	4630      	mov	r0, r6
 8006640:	f7ff fbba 	bl	8005db8 <_malloc_r>
 8006644:	b948      	cbnz	r0, 800665a <__smakebuf_r+0x46>
 8006646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800664a:	059a      	lsls	r2, r3, #22
 800664c:	d4ee      	bmi.n	800662c <__smakebuf_r+0x18>
 800664e:	f023 0303 	bic.w	r3, r3, #3
 8006652:	f043 0302 	orr.w	r3, r3, #2
 8006656:	81a3      	strh	r3, [r4, #12]
 8006658:	e7e2      	b.n	8006620 <__smakebuf_r+0xc>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	6020      	str	r0, [r4, #0]
 800665e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006662:	81a3      	strh	r3, [r4, #12]
 8006664:	9b01      	ldr	r3, [sp, #4]
 8006666:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800666a:	b15b      	cbz	r3, 8006684 <__smakebuf_r+0x70>
 800666c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006670:	4630      	mov	r0, r6
 8006672:	f000 f81d 	bl	80066b0 <_isatty_r>
 8006676:	b128      	cbz	r0, 8006684 <__smakebuf_r+0x70>
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	81a3      	strh	r3, [r4, #12]
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	431d      	orrs	r5, r3
 8006688:	81a5      	strh	r5, [r4, #12]
 800668a:	e7cf      	b.n	800662c <__smakebuf_r+0x18>

0800668c <_fstat_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	4d07      	ldr	r5, [pc, #28]	@ (80066ac <_fstat_r+0x20>)
 8006690:	2300      	movs	r3, #0
 8006692:	4604      	mov	r4, r0
 8006694:	4608      	mov	r0, r1
 8006696:	4611      	mov	r1, r2
 8006698:	602b      	str	r3, [r5, #0]
 800669a:	f7fa f9d6 	bl	8000a4a <_fstat>
 800669e:	1c43      	adds	r3, r0, #1
 80066a0:	d102      	bne.n	80066a8 <_fstat_r+0x1c>
 80066a2:	682b      	ldr	r3, [r5, #0]
 80066a4:	b103      	cbz	r3, 80066a8 <_fstat_r+0x1c>
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	bd38      	pop	{r3, r4, r5, pc}
 80066aa:	bf00      	nop
 80066ac:	20000308 	.word	0x20000308

080066b0 <_isatty_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4d06      	ldr	r5, [pc, #24]	@ (80066cc <_isatty_r+0x1c>)
 80066b4:	2300      	movs	r3, #0
 80066b6:	4604      	mov	r4, r0
 80066b8:	4608      	mov	r0, r1
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	f7fa f9d5 	bl	8000a6a <_isatty>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_isatty_r+0x1a>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_isatty_r+0x1a>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	20000308 	.word	0x20000308

080066d0 <_sbrk_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d06      	ldr	r5, [pc, #24]	@ (80066ec <_sbrk_r+0x1c>)
 80066d4:	2300      	movs	r3, #0
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	f7fa f9de 	bl	8000a9c <_sbrk>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_sbrk_r+0x1a>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_sbrk_r+0x1a>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	20000308 	.word	0x20000308

080066f0 <_init>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr

080066fc <_fini>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr
